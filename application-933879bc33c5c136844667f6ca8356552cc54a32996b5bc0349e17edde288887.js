 (() => new EventSource("http://localhost:3200").onmessage = () => location.reload())();
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../../node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js
  var require_rails_ujs = __commonJS({
    "../../node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js"(exports2, module4) {
      (function() {
        var context = this;
        (function() {
          (function() {
            this.Rails = {
              linkClickSelector: "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]",
              buttonClickSelector: {
                selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
                exclude: "form button"
              },
              inputChangeSelector: "select[data-remote], input[data-remote], textarea[data-remote]",
              formSubmitSelector: "form:not([data-turbo=true])",
              formInputClickSelector: "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])",
              formDisableSelector: "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled",
              formEnableSelector: "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled",
              fileInputSelector: "input[name][type=file]:not([disabled])",
              linkDisableSelector: "a[data-disable-with], a[data-disable]",
              buttonDisableSelector: "button[data-remote][data-disable-with], button[data-remote][data-disable]"
            };
          }).call(this);
        }).call(context);
        var Rails3 = context.Rails;
        (function() {
          (function() {
            var nonce;
            nonce = null;
            Rails3.loadCSPNonce = function() {
              var ref;
              return nonce = (ref = document.querySelector("meta[name=csp-nonce]")) != null ? ref.content : void 0;
            };
            Rails3.cspNonce = function() {
              return nonce != null ? nonce : Rails3.loadCSPNonce();
            };
          }).call(this);
          (function() {
            var expando, m3;
            m3 = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
            Rails3.matches = function(element, selector) {
              if (selector.exclude != null) {
                return m3.call(element, selector.selector) && !m3.call(element, selector.exclude);
              } else {
                return m3.call(element, selector);
              }
            };
            expando = "_ujsData";
            Rails3.getData = function(element, key) {
              var ref;
              return (ref = element[expando]) != null ? ref[key] : void 0;
            };
            Rails3.setData = function(element, key, value) {
              if (element[expando] == null) {
                element[expando] = {};
              }
              return element[expando][key] = value;
            };
            Rails3.$ = function(selector) {
              return Array.prototype.slice.call(document.querySelectorAll(selector));
            };
          }).call(this);
          (function() {
            var $2, csrfParam, csrfToken;
            $2 = Rails3.$;
            csrfToken = Rails3.csrfToken = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-token]");
              return meta && meta.content;
            };
            csrfParam = Rails3.csrfParam = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-param]");
              return meta && meta.content;
            };
            Rails3.CSRFProtection = function(xhr) {
              var token;
              token = csrfToken();
              if (token != null) {
                return xhr.setRequestHeader("X-CSRF-Token", token);
              }
            };
            Rails3.refreshCSRFTokens = function() {
              var param, token;
              token = csrfToken();
              param = csrfParam();
              if (token != null && param != null) {
                return $2('form input[name="' + param + '"]').forEach(function(input) {
                  return input.value = token;
                });
              }
            };
          }).call(this);
          (function() {
            var CustomEvent2, fire, matches, preventDefault;
            matches = Rails3.matches;
            CustomEvent2 = window.CustomEvent;
            if (typeof CustomEvent2 !== "function") {
              CustomEvent2 = function(event, params) {
                var evt;
                evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
                return evt;
              };
              CustomEvent2.prototype = window.Event.prototype;
              preventDefault = CustomEvent2.prototype.preventDefault;
              CustomEvent2.prototype.preventDefault = function() {
                var result;
                result = preventDefault.call(this);
                if (this.cancelable && !this.defaultPrevented) {
                  Object.defineProperty(this, "defaultPrevented", {
                    get: function() {
                      return true;
                    }
                  });
                }
                return result;
              };
            }
            fire = Rails3.fire = function(obj, name, data) {
              var event;
              event = new CustomEvent2(name, {
                bubbles: true,
                cancelable: true,
                detail: data
              });
              obj.dispatchEvent(event);
              return !event.defaultPrevented;
            };
            Rails3.stopEverything = function(e12) {
              fire(e12.target, "ujs:everythingStopped");
              e12.preventDefault();
              e12.stopPropagation();
              return e12.stopImmediatePropagation();
            };
            Rails3.delegate = function(element, selector, eventType, handler) {
              return element.addEventListener(eventType, function(e12) {
                var target;
                target = e12.target;
                while (!(!(target instanceof Element) || matches(target, selector))) {
                  target = target.parentNode;
                }
                if (target instanceof Element && handler.call(target, e12) === false) {
                  e12.preventDefault();
                  return e12.stopPropagation();
                }
              });
            };
          }).call(this);
          (function() {
            var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;
            cspNonce = Rails3.cspNonce, CSRFProtection = Rails3.CSRFProtection, fire = Rails3.fire;
            AcceptHeaders = {
              "*": "*/*",
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript",
              script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            };
            Rails3.ajax = function(options2) {
              var xhr;
              options2 = prepareOptions(options2);
              xhr = createXHR(options2, function() {
                var ref, response;
                response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader("Content-Type"));
                if (Math.floor(xhr.status / 100) === 2) {
                  if (typeof options2.success === "function") {
                    options2.success(response, xhr.statusText, xhr);
                  }
                } else {
                  if (typeof options2.error === "function") {
                    options2.error(response, xhr.statusText, xhr);
                  }
                }
                return typeof options2.complete === "function" ? options2.complete(xhr, xhr.statusText) : void 0;
              });
              if (options2.beforeSend != null && !options2.beforeSend(xhr, options2)) {
                return false;
              }
              if (xhr.readyState === XMLHttpRequest.OPENED) {
                return xhr.send(options2.data);
              }
            };
            prepareOptions = function(options2) {
              options2.url = options2.url || location.href;
              options2.type = options2.type.toUpperCase();
              if (options2.type === "GET" && options2.data) {
                if (options2.url.indexOf("?") < 0) {
                  options2.url += "?" + options2.data;
                } else {
                  options2.url += "&" + options2.data;
                }
              }
              if (AcceptHeaders[options2.dataType] == null) {
                options2.dataType = "*";
              }
              options2.accept = AcceptHeaders[options2.dataType];
              if (options2.dataType !== "*") {
                options2.accept += ", */*; q=0.01";
              }
              return options2;
            };
            createXHR = function(options2, done) {
              var xhr;
              xhr = new XMLHttpRequest();
              xhr.open(options2.type, options2.url, true);
              xhr.setRequestHeader("Accept", options2.accept);
              if (typeof options2.data === "string") {
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
              }
              if (!options2.crossDomain) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                CSRFProtection(xhr);
              }
              xhr.withCredentials = !!options2.withCredentials;
              xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                  return done(xhr);
                }
              };
              return xhr;
            };
            processResponse = function(response, type) {
              var parser, script;
              if (typeof response === "string" && typeof type === "string") {
                if (type.match(/\bjson\b/)) {
                  try {
                    response = JSON.parse(response);
                  } catch (error2) {
                  }
                } else if (type.match(/\b(?:java|ecma)script\b/)) {
                  script = document.createElement("script");
                  script.setAttribute("nonce", cspNonce());
                  script.text = response;
                  document.head.appendChild(script).parentNode.removeChild(script);
                } else if (type.match(/\b(xml|html|svg)\b/)) {
                  parser = new DOMParser();
                  type = type.replace(/;.+/, "");
                  try {
                    response = parser.parseFromString(response, type);
                  } catch (error2) {
                  }
                }
              }
              return response;
            };
            Rails3.href = function(element) {
              return element.href;
            };
            Rails3.isCrossDomain = function(url) {
              var e12, originAnchor, urlAnchor;
              originAnchor = document.createElement("a");
              originAnchor.href = location.href;
              urlAnchor = document.createElement("a");
              try {
                urlAnchor.href = url;
                return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
              } catch (error2) {
                e12 = error2;
                return true;
              }
            };
          }).call(this);
          (function() {
            var matches, toArray;
            matches = Rails3.matches;
            toArray = function(e12) {
              return Array.prototype.slice.call(e12);
            };
            Rails3.serializeElement = function(element, additionalParam) {
              var inputs, params;
              inputs = [element];
              if (matches(element, "form")) {
                inputs = toArray(element.elements);
              }
              params = [];
              inputs.forEach(function(input) {
                if (!input.name || input.disabled) {
                  return;
                }
                if (matches(input, "fieldset[disabled] *")) {
                  return;
                }
                if (matches(input, "select")) {
                  return toArray(input.options).forEach(function(option) {
                    if (option.selected) {
                      return params.push({
                        name: input.name,
                        value: option.value
                      });
                    }
                  });
                } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
                  return params.push({
                    name: input.name,
                    value: input.value
                  });
                }
              });
              if (additionalParam) {
                params.push(additionalParam);
              }
              return params.map(function(param) {
                if (param.name != null) {
                  return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
                } else {
                  return param;
                }
              }).join("&");
            };
            Rails3.formElements = function(form, selector) {
              if (matches(form, "form")) {
                return toArray(form.elements).filter(function(el) {
                  return matches(el, selector);
                });
              } else {
                return toArray(form.querySelectorAll(selector));
              }
            };
          }).call(this);
          (function() {
            var allowAction, fire, stopEverything;
            fire = Rails3.fire, stopEverything = Rails3.stopEverything;
            Rails3.handleConfirm = function(e12) {
              if (!allowAction(this)) {
                return stopEverything(e12);
              }
            };
            Rails3.confirm = function(message, element) {
              return confirm(message);
            };
            allowAction = function(element) {
              var answer, callback, message;
              message = element.getAttribute("data-confirm");
              if (!message) {
                return true;
              }
              answer = false;
              if (fire(element, "confirm")) {
                try {
                  answer = Rails3.confirm(message, element);
                } catch (error2) {
                }
                callback = fire(element, "confirm:complete", [answer]);
              }
              return answer && callback;
            };
          }).call(this);
          (function() {
            var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, isXhrRedirect, matches, setData, stopEverything;
            matches = Rails3.matches, getData = Rails3.getData, setData = Rails3.setData, stopEverything = Rails3.stopEverything, formElements = Rails3.formElements;
            Rails3.handleDisabledElement = function(e12) {
              var element;
              element = this;
              if (element.disabled) {
                return stopEverything(e12);
              }
            };
            Rails3.enableElement = function(e12) {
              var element;
              if (e12 instanceof Event) {
                if (isXhrRedirect(e12)) {
                  return;
                }
                element = e12.target;
              } else {
                element = e12;
              }
              if (matches(element, Rails3.linkDisableSelector)) {
                return enableLinkElement(element);
              } else if (matches(element, Rails3.buttonDisableSelector) || matches(element, Rails3.formEnableSelector)) {
                return enableFormElement(element);
              } else if (matches(element, Rails3.formSubmitSelector)) {
                return enableFormElements(element);
              }
            };
            Rails3.disableElement = function(e12) {
              var element;
              element = e12 instanceof Event ? e12.target : e12;
              if (matches(element, Rails3.linkDisableSelector)) {
                return disableLinkElement(element);
              } else if (matches(element, Rails3.buttonDisableSelector) || matches(element, Rails3.formDisableSelector)) {
                return disableFormElement(element);
              } else if (matches(element, Rails3.formSubmitSelector)) {
                return disableFormElements(element);
              }
            };
            disableLinkElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                setData(element, "ujs:enable-with", element.innerHTML);
                element.innerHTML = replacement;
              }
              element.addEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", true);
            };
            enableLinkElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                element.innerHTML = originalText;
                setData(element, "ujs:enable-with", null);
              }
              element.removeEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", null);
            };
            disableFormElements = function(form) {
              return formElements(form, Rails3.formDisableSelector).forEach(disableFormElement);
            };
            disableFormElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                if (matches(element, "button")) {
                  setData(element, "ujs:enable-with", element.innerHTML);
                  element.innerHTML = replacement;
                } else {
                  setData(element, "ujs:enable-with", element.value);
                  element.value = replacement;
                }
              }
              element.disabled = true;
              return setData(element, "ujs:disabled", true);
            };
            enableFormElements = function(form) {
              return formElements(form, Rails3.formEnableSelector).forEach(enableFormElement);
            };
            enableFormElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                if (matches(element, "button")) {
                  element.innerHTML = originalText;
                } else {
                  element.value = originalText;
                }
                setData(element, "ujs:enable-with", null);
              }
              element.disabled = false;
              return setData(element, "ujs:disabled", null);
            };
            isXhrRedirect = function(event) {
              var ref, xhr;
              xhr = (ref = event.detail) != null ? ref[0] : void 0;
              return (xhr != null ? xhr.getResponseHeader("X-Xhr-Redirect") : void 0) != null;
            };
          }).call(this);
          (function() {
            var stopEverything;
            stopEverything = Rails3.stopEverything;
            Rails3.handleMethod = function(e12) {
              var csrfParam, csrfToken, form, formContent, href, link, method;
              link = this;
              method = link.getAttribute("data-method");
              if (!method) {
                return;
              }
              href = Rails3.href(link);
              csrfToken = Rails3.csrfToken();
              csrfParam = Rails3.csrfParam();
              form = document.createElement("form");
              formContent = "<input name='_method' value='" + method + "' type='hidden' />";
              if (csrfParam != null && csrfToken != null && !Rails3.isCrossDomain(href)) {
                formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
              }
              formContent += '<input type="submit" />';
              form.method = "post";
              form.action = href;
              form.target = link.target;
              form.innerHTML = formContent;
              form.style.display = "none";
              document.body.appendChild(form);
              form.querySelector('[type="submit"]').click();
              return stopEverything(e12);
            };
          }).call(this);
          (function() {
            var ajax, fire, getData, isCrossDomain, isRemote, matches, serializeElement, setData, stopEverything, slice = [].slice;
            matches = Rails3.matches, getData = Rails3.getData, setData = Rails3.setData, fire = Rails3.fire, stopEverything = Rails3.stopEverything, ajax = Rails3.ajax, isCrossDomain = Rails3.isCrossDomain, serializeElement = Rails3.serializeElement;
            isRemote = function(element) {
              var value;
              value = element.getAttribute("data-remote");
              return value != null && value !== "false";
            };
            Rails3.handleRemote = function(e12) {
              var button, data, dataType, element, method, url, withCredentials;
              element = this;
              if (!isRemote(element)) {
                return true;
              }
              if (!fire(element, "ajax:before")) {
                fire(element, "ajax:stopped");
                return false;
              }
              withCredentials = element.getAttribute("data-with-credentials");
              dataType = element.getAttribute("data-type") || "script";
              if (matches(element, Rails3.formSubmitSelector)) {
                button = getData(element, "ujs:submit-button");
                method = getData(element, "ujs:submit-button-formmethod") || element.method;
                url = getData(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
                if (method.toUpperCase() === "GET") {
                  url = url.replace(/\?.*$/, "");
                }
                if (element.enctype === "multipart/form-data") {
                  data = new FormData(element);
                  if (button != null) {
                    data.append(button.name, button.value);
                  }
                } else {
                  data = serializeElement(element, button);
                }
                setData(element, "ujs:submit-button", null);
                setData(element, "ujs:submit-button-formmethod", null);
                setData(element, "ujs:submit-button-formaction", null);
              } else if (matches(element, Rails3.buttonClickSelector) || matches(element, Rails3.inputChangeSelector)) {
                method = element.getAttribute("data-method");
                url = element.getAttribute("data-url");
                data = serializeElement(element, element.getAttribute("data-params"));
              } else {
                method = element.getAttribute("data-method");
                url = Rails3.href(element);
                data = element.getAttribute("data-params");
              }
              ajax({
                type: method || "GET",
                url,
                data,
                dataType,
                beforeSend: function(xhr, options2) {
                  if (fire(element, "ajax:beforeSend", [xhr, options2])) {
                    return fire(element, "ajax:send", [xhr]);
                  } else {
                    fire(element, "ajax:stopped");
                    return false;
                  }
                },
                success: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:success", args);
                },
                error: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:error", args);
                },
                complete: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:complete", args);
                },
                crossDomain: isCrossDomain(url),
                withCredentials: withCredentials != null && withCredentials !== "false"
              });
              return stopEverything(e12);
            };
            Rails3.formSubmitButtonClick = function(e12) {
              var button, form;
              button = this;
              form = button.form;
              if (!form) {
                return;
              }
              if (button.name) {
                setData(form, "ujs:submit-button", {
                  name: button.name,
                  value: button.value
                });
              }
              setData(form, "ujs:formnovalidate-button", button.formNoValidate);
              setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
              return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
            };
            Rails3.preventInsignificantClick = function(e12) {
              var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;
              link = this;
              method = (link.getAttribute("data-method") || "GET").toUpperCase();
              data = link.getAttribute("data-params");
              metaClick = e12.metaKey || e12.ctrlKey;
              insignificantMetaClick = metaClick && method === "GET" && !data;
              nonPrimaryMouseClick = e12.button != null && e12.button !== 0;
              if (nonPrimaryMouseClick || insignificantMetaClick) {
                return e12.stopImmediatePropagation();
              }
            };
          }).call(this);
          (function() {
            var $2, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;
            fire = Rails3.fire, delegate = Rails3.delegate, getData = Rails3.getData, $2 = Rails3.$, refreshCSRFTokens = Rails3.refreshCSRFTokens, CSRFProtection = Rails3.CSRFProtection, loadCSPNonce = Rails3.loadCSPNonce, enableElement = Rails3.enableElement, disableElement = Rails3.disableElement, handleDisabledElement = Rails3.handleDisabledElement, handleConfirm = Rails3.handleConfirm, preventInsignificantClick = Rails3.preventInsignificantClick, handleRemote = Rails3.handleRemote, formSubmitButtonClick = Rails3.formSubmitButtonClick, handleMethod = Rails3.handleMethod;
            if (typeof jQuery !== "undefined" && jQuery !== null && jQuery.ajax != null) {
              if (jQuery.rails) {
                throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
              }
              jQuery.rails = Rails3;
              jQuery.ajaxPrefilter(function(options2, originalOptions, xhr) {
                if (!options2.crossDomain) {
                  return CSRFProtection(xhr);
                }
              });
            }
            Rails3.start = function() {
              if (window._rails_loaded) {
                throw new Error("rails-ujs has already been loaded!");
              }
              window.addEventListener("pageshow", function() {
                $2(Rails3.formEnableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
                return $2(Rails3.linkDisableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
              });
              delegate(document, Rails3.linkDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails3.linkDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails3.buttonDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails3.buttonDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails3.linkClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails3.linkClickSelector, "click", handleDisabledElement);
              delegate(document, Rails3.linkClickSelector, "click", handleConfirm);
              delegate(document, Rails3.linkClickSelector, "click", disableElement);
              delegate(document, Rails3.linkClickSelector, "click", handleRemote);
              delegate(document, Rails3.linkClickSelector, "click", handleMethod);
              delegate(document, Rails3.buttonClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails3.buttonClickSelector, "click", handleDisabledElement);
              delegate(document, Rails3.buttonClickSelector, "click", handleConfirm);
              delegate(document, Rails3.buttonClickSelector, "click", disableElement);
              delegate(document, Rails3.buttonClickSelector, "click", handleRemote);
              delegate(document, Rails3.inputChangeSelector, "change", handleDisabledElement);
              delegate(document, Rails3.inputChangeSelector, "change", handleConfirm);
              delegate(document, Rails3.inputChangeSelector, "change", handleRemote);
              delegate(document, Rails3.formSubmitSelector, "submit", handleDisabledElement);
              delegate(document, Rails3.formSubmitSelector, "submit", handleConfirm);
              delegate(document, Rails3.formSubmitSelector, "submit", handleRemote);
              delegate(document, Rails3.formSubmitSelector, "submit", function(e12) {
                return setTimeout(function() {
                  return disableElement(e12);
                }, 13);
              });
              delegate(document, Rails3.formSubmitSelector, "ajax:send", disableElement);
              delegate(document, Rails3.formSubmitSelector, "ajax:complete", enableElement);
              delegate(document, Rails3.formInputClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails3.formInputClickSelector, "click", handleDisabledElement);
              delegate(document, Rails3.formInputClickSelector, "click", handleConfirm);
              delegate(document, Rails3.formInputClickSelector, "click", formSubmitButtonClick);
              document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
              document.addEventListener("DOMContentLoaded", loadCSPNonce);
              return window._rails_loaded = true;
            };
            if (window.Rails === Rails3 && fire(document, "rails:attachBindings")) {
              Rails3.start();
            }
          }).call(this);
        }).call(this);
        if (typeof module4 === "object" && module4.exports) {
          module4.exports = Rails3;
        } else if (typeof define === "function" && define.amd) {
          define(Rails3);
        }
      }).call(exports2);
    }
  });

  // ../../node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "../../node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: self.console,
        WebSocket: self.WebSocket
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "../../node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "../../node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => new Date().getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "../../node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "../../node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${protocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              return this.subscriptions.notify(identifier, "connected");
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription.js
  var extend, Subscription;
  var init_subscription = __esm({
    "../../node_modules/@rails/actioncable/src/subscription.js"() {
      extend = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "../../node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s8) => s8 !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "../../node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s8) => s8 !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s8) => s8.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a4 = document.createElement("a");
      a4.href = url;
      a4.href = a4.href;
      a4.protocol = a4.protocol.replace("http", "ws");
      return a4.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "../../node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "../../node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // ../../node_modules/clipboard/dist/clipboard.js
  var require_clipboard = __commonJS({
    "../../node_modules/clipboard/dist/clipboard.js"(exports2, module4) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports2 === "object" && typeof module4 === "object")
          module4.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports2 === "object")
          exports2["ClipboardJS"] = factory();
        else
          root["ClipboardJS"] = factory();
      })(exports2, function() {
        return function() {
          var __webpack_modules__ = {
            686: function(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
              "use strict";
              __webpack_require__2.d(__webpack_exports__, {
                "default": function() {
                  return clipboard;
                }
              });
              var tiny_emitter = __webpack_require__2(279);
              var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
              var listen = __webpack_require__2(370);
              var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
              var src_select = __webpack_require__2(817);
              var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
              ;
              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }
              ;
              var ClipboardActionCut = function ClipboardActionCut2(target) {
                var selectedText = select_default()(target);
                command("cut");
                return selectedText;
              };
              var actions_cut = ClipboardActionCut;
              ;
              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute("dir") === "rtl";
                var fakeElement = document.createElement("textarea");
                fakeElement.style.fontSize = "12pt";
                fakeElement.style.border = "0";
                fakeElement.style.padding = "0";
                fakeElement.style.margin = "0";
                fakeElement.style.position = "absolute";
                fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute("readonly", "");
                fakeElement.value = value;
                return fakeElement;
              }
              ;
              var fakeCopyAction = function fakeCopyAction2(value, options2) {
                var fakeElement = createFakeElement(value);
                options2.container.appendChild(fakeElement);
                var selectedText = select_default()(fakeElement);
                command("copy");
                fakeElement.remove();
                return selectedText;
              };
              var ClipboardActionCopy = function ClipboardActionCopy2(target) {
                var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                };
                var selectedText = "";
                if (typeof target === "string") {
                  selectedText = fakeCopyAction(target, options2);
                } else if (target instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target === null || target === void 0 ? void 0 : target.type)) {
                  selectedText = fakeCopyAction(target.value, options2);
                } else {
                  selectedText = select_default()(target);
                  command("copy");
                }
                return selectedText;
              };
              var actions_copy = ClipboardActionCopy;
              ;
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              var ClipboardActionDefault = function ClipboardActionDefault2() {
                var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var _options$action = options2.action, action = _options$action === void 0 ? "copy" : _options$action, container = options2.container, target = options2.target, text = options2.text;
                if (action !== "copy" && action !== "cut") {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
                if (target !== void 0) {
                  if (target && _typeof(target) === "object" && target.nodeType === 1) {
                    if (action === "copy" && target.hasAttribute("disabled")) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }
                    if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                      throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                }
                if (text) {
                  return actions_copy(text, {
                    container
                  });
                }
                if (target) {
                  return action === "cut" ? actions_cut(target) : actions_copy(target, {
                    container
                  });
                }
              };
              var actions_default = ClipboardActionDefault;
              ;
              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  clipboard_typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return clipboard_typeof(obj);
              }
              function _classCallCheck2(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties2(target, props) {
                for (var i6 = 0; i6 < props.length; i6++) {
                  var descriptor = props[i6];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              function _createClass2(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties2(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties2(Constructor, staticProps);
                return Constructor;
              }
              function _inherits2(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf2(subClass, superClass);
              }
              function _setPrototypeOf2(o11, p3) {
                _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o12, p4) {
                  o12.__proto__ = p4;
                  return o12;
                };
                return _setPrototypeOf2(o11, p3);
              }
              function _createSuper2(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct2();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf2(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf2(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn2(this, result);
                };
              }
              function _possibleConstructorReturn2(self2, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }
                return _assertThisInitialized2(self2);
              }
              function _assertThisInitialized2(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct2() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  }));
                  return true;
                } catch (e12) {
                  return false;
                }
              }
              function _getPrototypeOf2(o11) {
                _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o12) {
                  return o12.__proto__ || Object.getPrototypeOf(o12);
                };
                return _getPrototypeOf2(o11);
              }
              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);
                if (!element.hasAttribute(attribute)) {
                  return;
                }
                return element.getAttribute(attribute);
              }
              var Clipboard = /* @__PURE__ */ function(_Emitter) {
                _inherits2(Clipboard2, _Emitter);
                var _super = _createSuper2(Clipboard2);
                function Clipboard2(trigger, options2) {
                  var _this;
                  _classCallCheck2(this, Clipboard2);
                  _this = _super.call(this);
                  _this.resolveOptions(options2);
                  _this.listenClick(trigger);
                  return _this;
                }
                _createClass2(Clipboard2, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    this.action = typeof options2.action === "function" ? options2.action : this.defaultAction;
                    this.target = typeof options2.target === "function" ? options2.target : this.defaultTarget;
                    this.text = typeof options2.text === "function" ? options2.text : this.defaultText;
                    this.container = clipboard_typeof(options2.container) === "object" ? options2.container : document.body;
                  }
                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;
                    this.listener = listen_default()(trigger, "click", function(e12) {
                      return _this2.onClick(e12);
                    });
                  }
                }, {
                  key: "onClick",
                  value: function onClick(e12) {
                    var trigger = e12.delegateTarget || e12.currentTarget;
                    var action = this.action(trigger) || "copy";
                    var text = actions_default({
                      action,
                      container: this.container,
                      target: this.target(trigger),
                      text: this.text(trigger)
                    });
                    this.emit(text ? "success" : "error", {
                      action,
                      text,
                      trigger,
                      clearSelection: function clearSelection() {
                        if (trigger) {
                          trigger.focus();
                        }
                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue("action", trigger);
                  }
                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue("target", trigger);
                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                }, {
                  key: "defaultText",
                  value: function defaultText(trigger) {
                    return getAttributeValue("text", trigger);
                  }
                }, {
                  key: "destroy",
                  value: function destroy2() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target) {
                    var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target, options2);
                  }
                }, {
                  key: "cut",
                  value: function cut(target) {
                    return actions_cut(target);
                  }
                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                    var actions = typeof action === "string" ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function(action2) {
                      support = support && !!document.queryCommandSupported(action2);
                    });
                    return support;
                  }
                }]);
                return Clipboard2;
              }(tiny_emitter_default());
              var clipboard = Clipboard;
            },
            828: function(module5) {
              var DOCUMENT_NODE_TYPE = 9;
              if (typeof Element !== "undefined" && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === "function" && element.matches(selector)) {
                    return element;
                  }
                  element = element.parentNode;
                }
              }
              module5.exports = closest;
            },
            438: function(module5, __unused_webpack_exports, __webpack_require__2) {
              var closest = __webpack_require__2(828);
              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              function delegate(elements2, selector, type, callback, useCapture) {
                if (typeof elements2.addEventListener === "function") {
                  return _delegate.apply(null, arguments);
                }
                if (typeof type === "function") {
                  return _delegate.bind(null, document).apply(null, arguments);
                }
                if (typeof elements2 === "string") {
                  elements2 = document.querySelectorAll(elements2);
                }
                return Array.prototype.map.call(elements2, function(element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              function listener(element, selector, type, callback) {
                return function(e12) {
                  e12.delegateTarget = closest(e12.target, selector);
                  if (e12.delegateTarget) {
                    callback.call(element, e12);
                  }
                };
              }
              module5.exports = delegate;
            },
            879: function(__unused_webpack_module, exports3) {
              exports3.node = function(value) {
                return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
              };
              exports3.nodeList = function(value) {
                var type = Object.prototype.toString.call(value);
                return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports3.node(value[0]));
              };
              exports3.string = function(value) {
                return typeof value === "string" || value instanceof String;
              };
              exports3.fn = function(value) {
                var type = Object.prototype.toString.call(value);
                return type === "[object Function]";
              };
            },
            370: function(module5, __unused_webpack_exports, __webpack_require__2) {
              var is = __webpack_require__2(879);
              var delegate = __webpack_require__2(438);
              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error("Missing required arguments");
                }
                if (!is.string(type)) {
                  throw new TypeError("Second argument must be a String");
                }
                if (!is.fn(callback)) {
                  throw new TypeError("Third argument must be a Function");
                }
                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                }
              }
              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function(node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function() {
                    Array.prototype.forEach.call(nodeList, function(node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }
              module5.exports = listen;
            },
            817: function(module5) {
              function select(element) {
                var selectedText;
                if (element.nodeName === "SELECT") {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
                  var isReadOnly = element.hasAttribute("readonly");
                  if (!isReadOnly) {
                    element.setAttribute("readonly", "");
                  }
                  element.select();
                  element.setSelectionRange(0, element.value.length);
                  if (!isReadOnly) {
                    element.removeAttribute("readonly");
                  }
                  selectedText = element.value;
                } else {
                  if (element.hasAttribute("contenteditable")) {
                    element.focus();
                  }
                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }
                return selectedText;
              }
              module5.exports = select;
            },
            279: function(module5) {
              function E2() {
              }
              E2.prototype = {
                on: function(name, callback, ctx) {
                  var e12 = this.e || (this.e = {});
                  (e12[name] || (e12[name] = [])).push({
                    fn: callback,
                    ctx
                  });
                  return this;
                },
                once: function(name, callback, ctx) {
                  var self2 = this;
                  function listener() {
                    self2.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  ;
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i6 = 0;
                  var len = evtArr.length;
                  for (i6; i6 < len; i6++) {
                    evtArr[i6].fn.apply(evtArr[i6].ctx, data);
                  }
                  return this;
                },
                off: function(name, callback) {
                  var e12 = this.e || (this.e = {});
                  var evts = e12[name];
                  var liveEvents = [];
                  if (evts && callback) {
                    for (var i6 = 0, len = evts.length; i6 < len; i6++) {
                      if (evts[i6].fn !== callback && evts[i6].fn._ !== callback)
                        liveEvents.push(evts[i6]);
                    }
                  }
                  liveEvents.length ? e12[name] = liveEvents : delete e12[name];
                  return this;
                }
              };
              module5.exports = E2;
              module5.exports.TinyEmitter = E2;
            }
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            if (__webpack_module_cache__[moduleId]) {
              return __webpack_module_cache__[moduleId].exports;
            }
            var module5 = __webpack_module_cache__[moduleId] = {
              exports: {}
            };
            __webpack_modules__[moduleId](module5, module5.exports, __webpack_require__);
            return module5.exports;
          }
          !function() {
            __webpack_require__.n = function(module5) {
              var getter = module5 && module5.__esModule ? function() {
                return module5["default"];
              } : function() {
                return module5;
              };
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          }();
          !function() {
            __webpack_require__.d = function(exports3, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports3, key)) {
                  Object.defineProperty(exports3, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
          }();
          return __webpack_require__(686);
        }().default;
      });
    }
  });

  // ../../node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "../../node_modules/tslib/tslib.js"(exports2, module4) {
      var __extends2;
      var __assign3;
      var __rest2;
      var __decorate5;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays3;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports3) {
            factory(createExporter(root, createExporter(exports3)));
          });
        } else if (typeof module4 === "object" && typeof module4.exports === "object") {
          factory(createExporter(root, createExporter(module4.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports3, previous) {
          if (exports3 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports3, "__esModule", { value: true });
            } else {
              exports3.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports3[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b2) {
          d3.__proto__ = b2;
        } || function(d3, b2) {
          for (var p3 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p3))
              d3[p3] = b2[p3];
        };
        __extends2 = function(d3, b2) {
          if (typeof b2 !== "function" && b2 !== null)
            throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
          extendStatics(d3, b2);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign3 = Object.assign || function(t5) {
          for (var s8, i6 = 1, n9 = arguments.length; i6 < n9; i6++) {
            s8 = arguments[i6];
            for (var p3 in s8)
              if (Object.prototype.hasOwnProperty.call(s8, p3))
                t5[p3] = s8[p3];
          }
          return t5;
        };
        __rest2 = function(s8, e12) {
          var t5 = {};
          for (var p3 in s8)
            if (Object.prototype.hasOwnProperty.call(s8, p3) && e12.indexOf(p3) < 0)
              t5[p3] = s8[p3];
          if (s8 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i6 = 0, p3 = Object.getOwnPropertySymbols(s8); i6 < p3.length; i6++) {
              if (e12.indexOf(p3[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s8, p3[i6]))
                t5[p3[i6]] = s8[p3[i6]];
            }
          return t5;
        };
        __decorate5 = function(decorators, target, key, desc) {
          var c6 = arguments.length, r7 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r7 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i6 = decorators.length - 1; i6 >= 0; i6--)
              if (d3 = decorators[i6])
                r7 = (c6 < 3 ? d3(r7) : c6 > 3 ? d3(target, key, r7) : d3(target, key)) || r7;
          return c6 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e12) {
                reject(e12);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e12) {
                reject(e12);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _2 = { label: 0, sent: function() {
            if (t5[0] & 1)
              throw t5[1];
            return t5[1];
          }, trys: [], ops: [] }, f3, y2, t5, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n9) {
            return function(v2) {
              return step([n9, v2]);
            };
          }
          function step(op) {
            if (f3)
              throw new TypeError("Generator is already executing.");
            while (_2)
              try {
                if (f3 = 1, y2 && (t5 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t5 = y2["return"]) && t5.call(y2), 0) : y2.next) && !(t5 = t5.call(y2, op[1])).done)
                  return t5;
                if (y2 = 0, t5)
                  op = [op[0] & 2, t5.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t5 = op;
                    break;
                  case 4:
                    _2.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _2.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _2.ops.pop();
                    _2.trys.pop();
                    continue;
                  default:
                    if (!(t5 = _2.trys, t5 = t5.length > 0 && t5[t5.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _2 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t5 || op[1] > t5[0] && op[1] < t5[3])) {
                      _2.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _2.label < t5[1]) {
                      _2.label = t5[1];
                      t5 = op;
                      break;
                    }
                    if (t5 && _2.label < t5[2]) {
                      _2.label = t5[2];
                      _2.ops.push(op);
                      break;
                    }
                    if (t5[2])
                      _2.ops.pop();
                    _2.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _2);
              } catch (e12) {
                op = [6, e12];
                y2 = 0;
              } finally {
                f3 = t5 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m3, o11) {
          for (var p3 in m3)
            if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(o11, p3))
              __createBinding2(o11, m3, p3);
        };
        __createBinding2 = Object.create ? function(o11, m3, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m3, k2);
          if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m3[k2];
            } };
          }
          Object.defineProperty(o11, k22, desc);
        } : function(o11, m3, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o11[k22] = m3[k2];
        };
        __values2 = function(o11) {
          var s8 = typeof Symbol === "function" && Symbol.iterator, m3 = s8 && o11[s8], i6 = 0;
          if (m3)
            return m3.call(o11);
          if (o11 && typeof o11.length === "number")
            return {
              next: function() {
                if (o11 && i6 >= o11.length)
                  o11 = void 0;
                return { value: o11 && o11[i6++], done: !o11 };
              }
            };
          throw new TypeError(s8 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o11, n9) {
          var m3 = typeof Symbol === "function" && o11[Symbol.iterator];
          if (!m3)
            return o11;
          var i6 = m3.call(o11), r7, ar = [], e12;
          try {
            while ((n9 === void 0 || n9-- > 0) && !(r7 = i6.next()).done)
              ar.push(r7.value);
          } catch (error2) {
            e12 = { error: error2 };
          } finally {
            try {
              if (r7 && !r7.done && (m3 = i6["return"]))
                m3.call(i6);
            } finally {
              if (e12)
                throw e12.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i6 = 0; i6 < arguments.length; i6++)
            ar = ar.concat(__read2(arguments[i6]));
          return ar;
        };
        __spreadArrays3 = function() {
          for (var s8 = 0, i6 = 0, il = arguments.length; i6 < il; i6++)
            s8 += arguments[i6].length;
          for (var r7 = Array(s8), k2 = 0, i6 = 0; i6 < il; i6++)
            for (var a4 = arguments[i6], j = 0, jl = a4.length; j < jl; j++, k2++)
              r7[k2] = a4[j];
          return r7;
        };
        __spreadArray2 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i6 = 0, l9 = from.length, ar; i6 < l9; i6++) {
              if (ar || !(i6 in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i6);
                ar[i6] = from[i6];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await2 = function(v2) {
          return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i6, q = [];
          return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
            return this;
          }, i6;
          function verb(n9) {
            if (g2[n9])
              i6[n9] = function(v2) {
                return new Promise(function(a4, b2) {
                  q.push([n9, v2, a4, b2]) > 1 || resume(n9, v2);
                });
              };
          }
          function resume(n9, v2) {
            try {
              step(g2[n9](v2));
            } catch (e12) {
              settle(q[0][3], e12);
            }
          }
          function step(r7) {
            r7.value instanceof __await2 ? Promise.resolve(r7.value.v).then(fulfill, reject) : settle(q[0][2], r7);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f3, v2) {
            if (f3(v2), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o11) {
          var i6, p3;
          return i6 = {}, verb("next"), verb("throw", function(e12) {
            throw e12;
          }), verb("return"), i6[Symbol.iterator] = function() {
            return this;
          }, i6;
          function verb(n9, f3) {
            i6[n9] = o11[n9] ? function(v2) {
              return (p3 = !p3) ? { value: __await2(o11[n9](v2)), done: n9 === "return" } : f3 ? f3(v2) : v2;
            } : f3;
          }
        };
        __asyncValues2 = function(o11) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m3 = o11[Symbol.asyncIterator], i6;
          return m3 ? m3.call(o11) : (o11 = typeof __values2 === "function" ? __values2(o11) : o11[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
            return this;
          }, i6);
          function verb(n9) {
            i6[n9] = o11[n9] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o11[n9](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d3, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d3 });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o11, v2) {
          Object.defineProperty(o11, "default", { enumerable: true, value: v2 });
        } : function(o11, v2) {
          o11["default"] = v2;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
                __createBinding2(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, state, kind, f3) {
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f3 : kind === "a" ? f3.call(receiver) : f3 ? f3.value : state.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, state, value, kind, f3) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f3)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f3 : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f3.call(receiver, value) : f3 ? f3.value = value : state.set(receiver, value), value;
        };
        __classPrivateFieldIn2 = function(state, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state === "function" ? receiver === state : state.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign3);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate5);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays3);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // ../../node_modules/tributejs/dist/tribute.min.js
  var require_tribute_min = __commonJS({
    "../../node_modules/tributejs/dist/tribute.min.js"(exports2, module4) {
      !function(e12, t5) {
        "object" == typeof exports2 && "undefined" != typeof module4 ? module4.exports = t5() : "function" == typeof define && define.amd ? define(t5) : (e12 = e12 || self).Tribute = t5();
      }(exports2, function() {
        "use strict";
        function e12(e13, t6) {
          if (!(e13 instanceof t6))
            throw new TypeError("Cannot call a class as a function");
        }
        function t5(e13, t6) {
          for (var n10 = 0; n10 < t6.length; n10++) {
            var i7 = t6[n10];
            i7.enumerable = i7.enumerable || false, i7.configurable = true, "value" in i7 && (i7.writable = true), Object.defineProperty(e13, i7.key, i7);
          }
        }
        function n9(e13, n10, i7) {
          return n10 && t5(e13.prototype, n10), i7 && t5(e13, i7), e13;
        }
        function i6(e13, t6) {
          return function(e14) {
            if (Array.isArray(e14))
              return e14;
          }(e13) || function(e14, t7) {
            if (!(Symbol.iterator in Object(e14) || "[object Arguments]" === Object.prototype.toString.call(e14)))
              return;
            var n10 = [], i7 = true, r8 = false, o12 = void 0;
            try {
              for (var u5, l10 = e14[Symbol.iterator](); !(i7 = (u5 = l10.next()).done) && (n10.push(u5.value), !t7 || n10.length !== t7); i7 = true)
                ;
            } catch (e15) {
              r8 = true, o12 = e15;
            } finally {
              try {
                i7 || null == l10.return || l10.return();
              } finally {
                if (r8)
                  throw o12;
              }
            }
            return n10;
          }(e13, t6) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        if (Array.prototype.find || (Array.prototype.find = function(e13) {
          if (null === this)
            throw new TypeError("Array.prototype.find called on null or undefined");
          if ("function" != typeof e13)
            throw new TypeError("predicate must be a function");
          for (var t6, n10 = Object(this), i7 = n10.length >>> 0, r8 = arguments[1], o12 = 0; o12 < i7; o12++)
            if (t6 = n10[o12], e13.call(r8, t6, o12, n10))
              return t6;
        }), window && "function" != typeof window.CustomEvent) {
          var r7 = function(e13, t6) {
            t6 = t6 || { bubbles: false, cancelable: false, detail: void 0 };
            var n10 = document.createEvent("CustomEvent");
            return n10.initCustomEvent(e13, t6.bubbles, t6.cancelable, t6.detail), n10;
          };
          void 0 !== window.Event && (r7.prototype = window.Event.prototype), window.CustomEvent = r7;
        }
        var o11 = function() {
          function t6(n10) {
            e12(this, t6), this.tribute = n10, this.tribute.events = this;
          }
          return n9(t6, [{ key: "bind", value: function(e13) {
            e13.boundKeydown = this.keydown.bind(e13, this), e13.boundKeyup = this.keyup.bind(e13, this), e13.boundInput = this.input.bind(e13, this), e13.addEventListener("keydown", e13.boundKeydown, false), e13.addEventListener("keyup", e13.boundKeyup, false), e13.addEventListener("input", e13.boundInput, false);
          } }, { key: "unbind", value: function(e13) {
            e13.removeEventListener("keydown", e13.boundKeydown, false), e13.removeEventListener("keyup", e13.boundKeyup, false), e13.removeEventListener("input", e13.boundInput, false), delete e13.boundKeydown, delete e13.boundKeyup, delete e13.boundInput;
          } }, { key: "keydown", value: function(e13, n10) {
            e13.shouldDeactivate(n10) && (e13.tribute.isActive = false, e13.tribute.hideMenu());
            var i7 = this;
            e13.commandEvent = false, t6.keys().forEach(function(t7) {
              t7.key === n10.keyCode && (e13.commandEvent = true, e13.callbacks()[t7.value.toLowerCase()](n10, i7));
            });
          } }, { key: "input", value: function(e13, t7) {
            e13.inputEvent = true, e13.keyup.call(this, e13, t7);
          } }, { key: "click", value: function(e13, t7) {
            var n10 = e13.tribute;
            if (n10.menu && n10.menu.contains(t7.target)) {
              var i7 = t7.target;
              for (t7.preventDefault(), t7.stopPropagation(); "li" !== i7.nodeName.toLowerCase(); )
                if (!(i7 = i7.parentNode) || i7 === n10.menu)
                  throw new Error("cannot find the <li> container for the click");
              n10.selectItemAtIndex(i7.getAttribute("data-index"), t7), n10.hideMenu();
            } else
              n10.current.element && !n10.current.externalTrigger && (n10.current.externalTrigger = false, setTimeout(function() {
                return n10.hideMenu();
              }));
          } }, { key: "keyup", value: function(e13, t7) {
            if (e13.inputEvent && (e13.inputEvent = false), e13.updateSelection(this), 27 !== t7.keyCode) {
              if (!e13.tribute.allowSpaces && e13.tribute.hasTrailingSpace)
                return e13.tribute.hasTrailingSpace = false, e13.commandEvent = true, void e13.callbacks().space(t7, this);
              if (!e13.tribute.isActive)
                if (e13.tribute.autocompleteMode)
                  e13.callbacks().triggerChar(t7, this, "");
                else {
                  var n10 = e13.getKeyCode(e13, this, t7);
                  if (isNaN(n10) || !n10)
                    return;
                  var i7 = e13.tribute.triggers().find(function(e14) {
                    return e14.charCodeAt(0) === n10;
                  });
                  void 0 !== i7 && e13.callbacks().triggerChar(t7, this, i7);
                }
              e13.tribute.current.mentionText.length < e13.tribute.current.collection.menuShowMinLength || ((e13.tribute.current.trigger || e13.tribute.autocompleteMode) && false === e13.commandEvent || e13.tribute.isActive && 8 === t7.keyCode) && e13.tribute.showMenuFor(this, true);
            }
          } }, { key: "shouldDeactivate", value: function(e13) {
            if (!this.tribute.isActive)
              return false;
            if (0 === this.tribute.current.mentionText.length) {
              var n10 = false;
              return t6.keys().forEach(function(t7) {
                e13.keyCode === t7.key && (n10 = true);
              }), !n10;
            }
            return false;
          } }, { key: "getKeyCode", value: function(e13, t7, n10) {
            var i7 = e13.tribute, r8 = i7.range.getTriggerInfo(false, i7.hasTrailingSpace, true, i7.allowSpaces, i7.autocompleteMode);
            return !!r8 && r8.mentionTriggerChar.charCodeAt(0);
          } }, { key: "updateSelection", value: function(e13) {
            this.tribute.current.element = e13;
            var t7 = this.tribute.range.getTriggerInfo(false, this.tribute.hasTrailingSpace, true, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            t7 && (this.tribute.current.selectedPath = t7.mentionSelectedPath, this.tribute.current.mentionText = t7.mentionText, this.tribute.current.selectedOffset = t7.mentionSelectedOffset);
          } }, { key: "callbacks", value: function() {
            var e13 = this;
            return { triggerChar: function(t7, n10, i7) {
              var r8 = e13.tribute;
              r8.current.trigger = i7;
              var o12 = r8.collection.find(function(e14) {
                return e14.trigger === i7;
              });
              r8.current.collection = o12, r8.current.mentionText.length >= r8.current.collection.menuShowMinLength && r8.inputEvent && r8.showMenuFor(n10, true);
            }, enter: function(t7, n10) {
              e13.tribute.isActive && e13.tribute.current.filteredItems && (t7.preventDefault(), t7.stopPropagation(), setTimeout(function() {
                e13.tribute.selectItemAtIndex(e13.tribute.menuSelected, t7), e13.tribute.hideMenu();
              }, 0));
            }, escape: function(t7, n10) {
              e13.tribute.isActive && (t7.preventDefault(), t7.stopPropagation(), e13.tribute.isActive = false, e13.tribute.hideMenu());
            }, tab: function(t7, n10) {
              e13.callbacks().enter(t7, n10);
            }, space: function(t7, n10) {
              e13.tribute.isActive && (e13.tribute.spaceSelectsMatch ? e13.callbacks().enter(t7, n10) : e13.tribute.allowSpaces || (t7.stopPropagation(), setTimeout(function() {
                e13.tribute.hideMenu(), e13.tribute.isActive = false;
              }, 0)));
            }, up: function(t7, n10) {
              if (e13.tribute.isActive && e13.tribute.current.filteredItems) {
                t7.preventDefault(), t7.stopPropagation();
                var i7 = e13.tribute.current.filteredItems.length, r8 = e13.tribute.menuSelected;
                i7 > r8 && r8 > 0 ? (e13.tribute.menuSelected--, e13.setActiveLi()) : 0 === r8 && (e13.tribute.menuSelected = i7 - 1, e13.setActiveLi(), e13.tribute.menu.scrollTop = e13.tribute.menu.scrollHeight);
              }
            }, down: function(t7, n10) {
              if (e13.tribute.isActive && e13.tribute.current.filteredItems) {
                t7.preventDefault(), t7.stopPropagation();
                var i7 = e13.tribute.current.filteredItems.length - 1, r8 = e13.tribute.menuSelected;
                i7 > r8 ? (e13.tribute.menuSelected++, e13.setActiveLi()) : i7 === r8 && (e13.tribute.menuSelected = 0, e13.setActiveLi(), e13.tribute.menu.scrollTop = 0);
              }
            }, delete: function(t7, n10) {
              e13.tribute.isActive && e13.tribute.current.mentionText.length < 1 ? e13.tribute.hideMenu() : e13.tribute.isActive && e13.tribute.showMenuFor(n10);
            } };
          } }, { key: "setActiveLi", value: function(e13) {
            var t7 = this.tribute.menu.querySelectorAll("li"), n10 = t7.length >>> 0;
            e13 && (this.tribute.menuSelected = parseInt(e13));
            for (var i7 = 0; i7 < n10; i7++) {
              var r8 = t7[i7];
              if (i7 === this.tribute.menuSelected) {
                r8.classList.add(this.tribute.current.collection.selectClass);
                var o12 = r8.getBoundingClientRect(), u5 = this.tribute.menu.getBoundingClientRect();
                if (o12.bottom > u5.bottom) {
                  var l10 = o12.bottom - u5.bottom;
                  this.tribute.menu.scrollTop += l10;
                } else if (o12.top < u5.top) {
                  var s9 = u5.top - o12.top;
                  this.tribute.menu.scrollTop -= s9;
                }
              } else
                r8.classList.remove(this.tribute.current.collection.selectClass);
            }
          } }, { key: "getFullHeight", value: function(e13, t7) {
            var n10 = e13.getBoundingClientRect().height;
            if (t7) {
              var i7 = e13.currentStyle || window.getComputedStyle(e13);
              return n10 + parseFloat(i7.marginTop) + parseFloat(i7.marginBottom);
            }
            return n10;
          } }], [{ key: "keys", value: function() {
            return [{ key: 9, value: "TAB" }, { key: 8, value: "DELETE" }, { key: 13, value: "ENTER" }, { key: 27, value: "ESCAPE" }, { key: 32, value: "SPACE" }, { key: 38, value: "UP" }, { key: 40, value: "DOWN" }];
          } }]), t6;
        }(), u4 = function() {
          function t6(n10) {
            e12(this, t6), this.tribute = n10, this.tribute.menuEvents = this, this.menu = this.tribute.menu;
          }
          return n9(t6, [{ key: "bind", value: function(e13) {
            var t7 = this;
            this.menuClickEvent = this.tribute.events.click.bind(null, this), this.menuContainerScrollEvent = this.debounce(function() {
              t7.tribute.isActive && t7.tribute.showMenuFor(t7.tribute.current.element, false);
            }, 300, false), this.windowResizeEvent = this.debounce(function() {
              t7.tribute.isActive && t7.tribute.range.positionMenuAtCaret(true);
            }, 300, false), this.tribute.range.getDocument().addEventListener("MSPointerDown", this.menuClickEvent, false), this.tribute.range.getDocument().addEventListener("mousedown", this.menuClickEvent, false), window.addEventListener("resize", this.windowResizeEvent), this.menuContainer ? this.menuContainer.addEventListener("scroll", this.menuContainerScrollEvent, false) : window.addEventListener("scroll", this.menuContainerScrollEvent);
          } }, { key: "unbind", value: function(e13) {
            this.tribute.range.getDocument().removeEventListener("mousedown", this.menuClickEvent, false), this.tribute.range.getDocument().removeEventListener("MSPointerDown", this.menuClickEvent, false), window.removeEventListener("resize", this.windowResizeEvent), this.menuContainer ? this.menuContainer.removeEventListener("scroll", this.menuContainerScrollEvent, false) : window.removeEventListener("scroll", this.menuContainerScrollEvent);
          } }, { key: "debounce", value: function(e13, t7, n10) {
            var i7, r8 = arguments, o12 = this;
            return function() {
              var u5 = o12, l10 = r8, s9 = n10 && !i7;
              clearTimeout(i7), i7 = setTimeout(function() {
                i7 = null, n10 || e13.apply(u5, l10);
              }, t7), s9 && e13.apply(u5, l10);
            };
          } }]), t6;
        }(), l9 = function() {
          function t6(n10) {
            e12(this, t6), this.tribute = n10, this.tribute.range = this;
          }
          return n9(t6, [{ key: "getDocument", value: function() {
            var e13;
            return this.tribute.current.collection && (e13 = this.tribute.current.collection.iframe), e13 ? e13.contentWindow.document : document;
          } }, { key: "positionMenuAtCaret", value: function(e13) {
            var t7, n10 = this, i7 = this.tribute.current, r8 = this.getTriggerInfo(false, this.tribute.hasTrailingSpace, true, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            if (void 0 !== r8) {
              if (!this.tribute.positionMenu)
                return void (this.tribute.menu.style.cssText = "display: block;");
              t7 = this.isContentEditable(i7.element) ? this.getContentEditableCaretPosition(r8.mentionPosition) : this.getTextAreaOrInputUnderlinePosition(this.tribute.current.element, r8.mentionPosition), this.tribute.menu.style.cssText = "top: ".concat(t7.top, "px;\n                                     left: ").concat(t7.left, "px;\n                                     right: ").concat(t7.right, "px;\n                                     bottom: ").concat(t7.bottom, "px;\n                                     position: absolute;\n                                     display: block;"), "auto" === t7.left && (this.tribute.menu.style.left = "auto"), "auto" === t7.top && (this.tribute.menu.style.top = "auto"), e13 && this.scrollIntoView(), window.setTimeout(function() {
                var i8 = { width: n10.tribute.menu.offsetWidth, height: n10.tribute.menu.offsetHeight }, r9 = n10.isMenuOffScreen(t7, i8), o12 = window.innerWidth > i8.width && (r9.left || r9.right), u5 = window.innerHeight > i8.height && (r9.top || r9.bottom);
                (o12 || u5) && (n10.tribute.menu.style.cssText = "display: none", n10.positionMenuAtCaret(e13));
              }, 0);
            } else
              this.tribute.menu.style.cssText = "display: none";
          } }, { key: "selectElement", value: function(e13, t7, n10) {
            var i7, r8 = e13;
            if (t7)
              for (var o12 = 0; o12 < t7.length; o12++) {
                if (void 0 === (r8 = r8.childNodes[t7[o12]]))
                  return;
                for (; r8.length < n10; )
                  n10 -= r8.length, r8 = r8.nextSibling;
                0 !== r8.childNodes.length || r8.length || (r8 = r8.previousSibling);
              }
            var u5 = this.getWindowSelection();
            (i7 = this.getDocument().createRange()).setStart(r8, n10), i7.setEnd(r8, n10), i7.collapse(true);
            try {
              u5.removeAllRanges();
            } catch (e14) {
            }
            u5.addRange(i7), e13.focus();
          } }, { key: "replaceTriggerText", value: function(e13, t7, n10, i7, r8) {
            var o12 = this.getTriggerInfo(true, n10, t7, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            if (void 0 !== o12) {
              var u5 = this.tribute.current, l10 = new CustomEvent("tribute-replaced", { detail: { item: r8, instance: u5, context: o12, event: i7 } });
              if (this.isContentEditable(u5.element)) {
                e13 += "string" == typeof this.tribute.replaceTextSuffix ? this.tribute.replaceTextSuffix : "\xA0";
                var s9 = o12.mentionPosition + o12.mentionText.length;
                this.tribute.autocompleteMode || (s9 += o12.mentionTriggerChar.length), this.pasteHtml(e13, o12.mentionPosition, s9);
              } else {
                var a4 = this.tribute.current.element, c6 = "string" == typeof this.tribute.replaceTextSuffix ? this.tribute.replaceTextSuffix : " ";
                e13 += c6;
                var h6 = o12.mentionPosition, d3 = o12.mentionPosition + o12.mentionText.length + c6.length;
                this.tribute.autocompleteMode || (d3 += o12.mentionTriggerChar.length - 1), a4.value = a4.value.substring(0, h6) + e13 + a4.value.substring(d3, a4.value.length), a4.selectionStart = h6 + e13.length, a4.selectionEnd = h6 + e13.length;
              }
              u5.element.dispatchEvent(new CustomEvent("input", { bubbles: true })), u5.element.dispatchEvent(l10);
            }
          } }, { key: "pasteHtml", value: function(e13, t7, n10) {
            var i7, r8;
            r8 = this.getWindowSelection(), (i7 = this.getDocument().createRange()).setStart(r8.anchorNode, t7), i7.setEnd(r8.anchorNode, n10), i7.deleteContents();
            var o12 = this.getDocument().createElement("div");
            o12.innerHTML = e13;
            for (var u5, l10, s9 = this.getDocument().createDocumentFragment(); u5 = o12.firstChild; )
              l10 = s9.appendChild(u5);
            i7.insertNode(s9), l10 && ((i7 = i7.cloneRange()).setStartAfter(l10), i7.collapse(true), r8.removeAllRanges(), r8.addRange(i7));
          } }, { key: "getWindowSelection", value: function() {
            return this.tribute.collection.iframe ? this.tribute.collection.iframe.contentWindow.getSelection() : window.getSelection();
          } }, { key: "getNodePositionInParent", value: function(e13) {
            if (null === e13.parentNode)
              return 0;
            for (var t7 = 0; t7 < e13.parentNode.childNodes.length; t7++) {
              if (e13.parentNode.childNodes[t7] === e13)
                return t7;
            }
          } }, { key: "getContentEditableSelectedPath", value: function(e13) {
            var t7 = this.getWindowSelection(), n10 = t7.anchorNode, i7 = [];
            if (null != n10) {
              for (var r8, o12 = n10.contentEditable; null !== n10 && "true" !== o12; )
                r8 = this.getNodePositionInParent(n10), i7.push(r8), null !== (n10 = n10.parentNode) && (o12 = n10.contentEditable);
              return i7.reverse(), { selected: n10, path: i7, offset: t7.getRangeAt(0).startOffset };
            }
          } }, { key: "getTextPrecedingCurrentSelection", value: function() {
            var e13 = this.tribute.current, t7 = "";
            if (this.isContentEditable(e13.element)) {
              var n10 = this.getWindowSelection().anchorNode;
              if (null != n10) {
                var i7 = n10.textContent, r8 = this.getWindowSelection().getRangeAt(0).startOffset;
                i7 && r8 >= 0 && (t7 = i7.substring(0, r8));
              }
            } else {
              var o12 = this.tribute.current.element;
              if (o12) {
                var u5 = o12.selectionStart;
                o12.value && u5 >= 0 && (t7 = o12.value.substring(0, u5));
              }
            }
            return t7;
          } }, { key: "getLastWordInText", value: function(e13) {
            var t7 = (e13 = e13.replace(/\u00A0/g, " ")).split(/\s+/);
            return t7[t7.length - 1].trim();
          } }, { key: "getTriggerInfo", value: function(e13, t7, n10, i7, r8) {
            var o12, u5, l10, s9 = this, a4 = this.tribute.current;
            if (this.isContentEditable(a4.element)) {
              var c6 = this.getContentEditableSelectedPath(a4);
              c6 && (o12 = c6.selected, u5 = c6.path, l10 = c6.offset);
            } else
              o12 = this.tribute.current.element;
            var h6 = this.getTextPrecedingCurrentSelection(), d3 = this.getLastWordInText(h6);
            if (r8)
              return { mentionPosition: h6.length - d3.length, mentionText: d3, mentionSelectedElement: o12, mentionSelectedPath: u5, mentionSelectedOffset: l10 };
            if (null != h6) {
              var f3, m3 = -1;
              if (this.tribute.collection.forEach(function(e14) {
                var t8 = e14.trigger, i8 = e14.requireLeadingSpace ? s9.lastIndexWithLeadingSpace(h6, t8) : h6.lastIndexOf(t8);
                i8 > m3 && (m3 = i8, f3 = t8, n10 = e14.requireLeadingSpace);
              }), m3 >= 0 && (0 === m3 || !n10 || /[\xA0\s]/g.test(h6.substring(m3 - 1, m3)))) {
                var p3 = h6.substring(m3 + f3.length, h6.length);
                f3 = h6.substring(m3, m3 + f3.length);
                var v2 = p3.substring(0, 1), g2 = p3.length > 0 && (" " === v2 || "\xA0" === v2);
                t7 && (p3 = p3.trim());
                var b2 = i7 ? /[^\S ]/g : /[\xA0\s]/g;
                if (this.tribute.hasTrailingSpace = b2.test(p3), !g2 && (e13 || !b2.test(p3)))
                  return { mentionPosition: m3, mentionText: p3, mentionSelectedElement: o12, mentionSelectedPath: u5, mentionSelectedOffset: l10, mentionTriggerChar: f3 };
              }
            }
          } }, { key: "lastIndexWithLeadingSpace", value: function(e13, t7) {
            for (var n10 = e13.split("").reverse().join(""), i7 = -1, r8 = 0, o12 = e13.length; r8 < o12; r8++) {
              for (var u5 = r8 === e13.length - 1, l10 = /\s/.test(n10[r8 + 1]), s9 = true, a4 = t7.length - 1; a4 >= 0; a4--)
                if (t7[a4] !== n10[r8 - a4]) {
                  s9 = false;
                  break;
                }
              if (s9 && (u5 || l10)) {
                i7 = e13.length - 1 - r8;
                break;
              }
            }
            return i7;
          } }, { key: "isContentEditable", value: function(e13) {
            return "INPUT" !== e13.nodeName && "TEXTAREA" !== e13.nodeName;
          } }, { key: "isMenuOffScreen", value: function(e13, t7) {
            var n10 = window.innerWidth, i7 = window.innerHeight, r8 = document.documentElement, o12 = (window.pageXOffset || r8.scrollLeft) - (r8.clientLeft || 0), u5 = (window.pageYOffset || r8.scrollTop) - (r8.clientTop || 0), l10 = "number" == typeof e13.top ? e13.top : u5 + i7 - e13.bottom - t7.height, s9 = "number" == typeof e13.right ? e13.right : e13.left + t7.width, a4 = "number" == typeof e13.bottom ? e13.bottom : e13.top + t7.height, c6 = "number" == typeof e13.left ? e13.left : o12 + n10 - e13.right - t7.width;
            return { top: l10 < Math.floor(u5), right: s9 > Math.ceil(o12 + n10), bottom: a4 > Math.ceil(u5 + i7), left: c6 < Math.floor(o12) };
          } }, { key: "getMenuDimensions", value: function() {
            var e13 = { width: null, height: null };
            return this.tribute.menu.style.cssText = "top: 0px;\n                                 left: 0px;\n                                 position: fixed;\n                                 display: block;\n                                 visibility; hidden;", e13.width = this.tribute.menu.offsetWidth, e13.height = this.tribute.menu.offsetHeight, this.tribute.menu.style.cssText = "display: none;", e13;
          } }, { key: "getTextAreaOrInputUnderlinePosition", value: function(e13, t7, n10) {
            var i7 = null !== window.mozInnerScreenX, r8 = this.getDocument().createElement("div");
            r8.id = "input-textarea-caret-position-mirror-div", this.getDocument().body.appendChild(r8);
            var o12 = r8.style, u5 = window.getComputedStyle ? getComputedStyle(e13) : e13.currentStyle;
            o12.whiteSpace = "pre-wrap", "INPUT" !== e13.nodeName && (o12.wordWrap = "break-word"), o12.position = "absolute", o12.visibility = "hidden", ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"].forEach(function(e14) {
              o12[e14] = u5[e14];
            }), i7 ? (o12.width = "".concat(parseInt(u5.width) - 2, "px"), e13.scrollHeight > parseInt(u5.height) && (o12.overflowY = "scroll")) : o12.overflow = "hidden", r8.textContent = e13.value.substring(0, t7), "INPUT" === e13.nodeName && (r8.textContent = r8.textContent.replace(/\s/g, "\xA0"));
            var l10 = this.getDocument().createElement("span");
            l10.textContent = e13.value.substring(t7) || ".", r8.appendChild(l10);
            var s9 = e13.getBoundingClientRect(), a4 = document.documentElement, c6 = (window.pageXOffset || a4.scrollLeft) - (a4.clientLeft || 0), h6 = (window.pageYOffset || a4.scrollTop) - (a4.clientTop || 0), d3 = 0, f3 = 0;
            this.menuContainerIsBody && (d3 = s9.top, f3 = s9.left);
            var m3 = { top: d3 + h6 + l10.offsetTop + parseInt(u5.borderTopWidth) + parseInt(u5.fontSize) - e13.scrollTop, left: f3 + c6 + l10.offsetLeft + parseInt(u5.borderLeftWidth) }, p3 = window.innerWidth, v2 = window.innerHeight, g2 = this.getMenuDimensions(), b2 = this.isMenuOffScreen(m3, g2);
            b2.right && (m3.right = p3 - m3.left, m3.left = "auto");
            var y2 = this.tribute.menuContainer ? this.tribute.menuContainer.offsetHeight : this.getDocument().body.offsetHeight;
            if (b2.bottom) {
              var w2 = y2 - (v2 - (this.tribute.menuContainer ? this.tribute.menuContainer.getBoundingClientRect() : this.getDocument().body.getBoundingClientRect()).top);
              m3.bottom = w2 + (v2 - s9.top - l10.offsetTop), m3.top = "auto";
            }
            return (b2 = this.isMenuOffScreen(m3, g2)).left && (m3.left = p3 > g2.width ? c6 + p3 - g2.width : c6, delete m3.right), b2.top && (m3.top = v2 > g2.height ? h6 + v2 - g2.height : h6, delete m3.bottom), this.getDocument().body.removeChild(r8), m3;
          } }, { key: "getContentEditableCaretPosition", value: function(e13) {
            var t7, n10 = this.getWindowSelection();
            (t7 = this.getDocument().createRange()).setStart(n10.anchorNode, e13), t7.setEnd(n10.anchorNode, e13), t7.collapse(false);
            var i7 = t7.getBoundingClientRect(), r8 = document.documentElement, o12 = (window.pageXOffset || r8.scrollLeft) - (r8.clientLeft || 0), u5 = (window.pageYOffset || r8.scrollTop) - (r8.clientTop || 0), l10 = { left: i7.left + o12, top: i7.top + i7.height + u5 }, s9 = window.innerWidth, a4 = window.innerHeight, c6 = this.getMenuDimensions(), h6 = this.isMenuOffScreen(l10, c6);
            h6.right && (l10.left = "auto", l10.right = s9 - i7.left - o12);
            var d3 = this.tribute.menuContainer ? this.tribute.menuContainer.offsetHeight : this.getDocument().body.offsetHeight;
            if (h6.bottom) {
              var f3 = d3 - (a4 - (this.tribute.menuContainer ? this.tribute.menuContainer.getBoundingClientRect() : this.getDocument().body.getBoundingClientRect()).top);
              l10.top = "auto", l10.bottom = f3 + (a4 - i7.top);
            }
            return (h6 = this.isMenuOffScreen(l10, c6)).left && (l10.left = s9 > c6.width ? o12 + s9 - c6.width : o12, delete l10.right), h6.top && (l10.top = a4 > c6.height ? u5 + a4 - c6.height : u5, delete l10.bottom), this.menuContainerIsBody || (l10.left = l10.left ? l10.left - this.tribute.menuContainer.offsetLeft : l10.left, l10.top = l10.top ? l10.top - this.tribute.menuContainer.offsetTop : l10.top), l10;
          } }, { key: "scrollIntoView", value: function(e13) {
            var t7, n10 = this.menu;
            if (void 0 !== n10) {
              for (; void 0 === t7 || 0 === t7.height; )
                if (0 === (t7 = n10.getBoundingClientRect()).height && (void 0 === (n10 = n10.childNodes[0]) || !n10.getBoundingClientRect))
                  return;
              var i7 = t7.top, r8 = i7 + t7.height;
              if (i7 < 0)
                window.scrollTo(0, window.pageYOffset + t7.top - 20);
              else if (r8 > window.innerHeight) {
                var o12 = window.pageYOffset + t7.top - 20;
                o12 - window.pageYOffset > 100 && (o12 = window.pageYOffset + 100);
                var u5 = window.pageYOffset - (window.innerHeight - r8);
                u5 > o12 && (u5 = o12), window.scrollTo(0, u5);
              }
            }
          } }, { key: "menuContainerIsBody", get: function() {
            return this.tribute.menuContainer === document.body || !this.tribute.menuContainer;
          } }]), t6;
        }(), s8 = function() {
          function t6(n10) {
            e12(this, t6), this.tribute = n10, this.tribute.search = this;
          }
          return n9(t6, [{ key: "simpleFilter", value: function(e13, t7) {
            var n10 = this;
            return t7.filter(function(t8) {
              return n10.test(e13, t8);
            });
          } }, { key: "test", value: function(e13, t7) {
            return null !== this.match(e13, t7);
          } }, { key: "match", value: function(e13, t7, n10) {
            n10 = n10 || {};
            t7.length;
            var i7 = n10.pre || "", r8 = n10.post || "", o12 = n10.caseSensitive && t7 || t7.toLowerCase();
            if (n10.skip)
              return { rendered: t7, score: 0 };
            e13 = n10.caseSensitive && e13 || e13.toLowerCase();
            var u5 = this.traverse(o12, e13, 0, 0, []);
            return u5 ? { rendered: this.render(t7, u5.cache, i7, r8), score: u5.score } : null;
          } }, { key: "traverse", value: function(e13, t7, n10, i7, r8) {
            if (t7.length === i7)
              return { score: this.calculateScore(r8), cache: r8.slice() };
            if (!(e13.length === n10 || t7.length - i7 > e13.length - n10)) {
              for (var o12, u5, l10 = t7[i7], s9 = e13.indexOf(l10, n10); s9 > -1; ) {
                if (r8.push(s9), u5 = this.traverse(e13, t7, s9 + 1, i7 + 1, r8), r8.pop(), !u5)
                  return o12;
                (!o12 || o12.score < u5.score) && (o12 = u5), s9 = e13.indexOf(l10, s9 + 1);
              }
              return o12;
            }
          } }, { key: "calculateScore", value: function(e13) {
            var t7 = 0, n10 = 1;
            return e13.forEach(function(i7, r8) {
              r8 > 0 && (e13[r8 - 1] + 1 === i7 ? n10 += n10 + 1 : n10 = 1), t7 += n10;
            }), t7;
          } }, { key: "render", value: function(e13, t7, n10, i7) {
            var r8 = e13.substring(0, t7[0]);
            return t7.forEach(function(o12, u5) {
              r8 += n10 + e13[o12] + i7 + e13.substring(o12 + 1, t7[u5 + 1] ? t7[u5 + 1] : e13.length);
            }), r8;
          } }, { key: "filter", value: function(e13, t7, n10) {
            var i7 = this;
            return n10 = n10 || {}, t7.reduce(function(t8, r8, o12, u5) {
              var l10 = r8;
              n10.extract && ((l10 = n10.extract(r8)) || (l10 = ""));
              var s9 = i7.match(e13, l10, n10);
              return null != s9 && (t8[t8.length] = { string: s9.rendered, score: s9.score, index: o12, original: r8 }), t8;
            }, []).sort(function(e14, t8) {
              var n11 = t8.score - e14.score;
              return n11 || e14.index - t8.index;
            });
          } }]), t6;
        }();
        return function() {
          function t6(n10) {
            var i7, r8 = this, a4 = n10.values, c6 = void 0 === a4 ? null : a4, h6 = n10.iframe, d3 = void 0 === h6 ? null : h6, f3 = n10.selectClass, m3 = void 0 === f3 ? "highlight" : f3, p3 = n10.containerClass, v2 = void 0 === p3 ? "tribute-container" : p3, g2 = n10.itemClass, b2 = void 0 === g2 ? "" : g2, y2 = n10.trigger, w2 = void 0 === y2 ? "@" : y2, T2 = n10.autocompleteMode, C2 = void 0 !== T2 && T2, S3 = n10.selectTemplate, E2 = void 0 === S3 ? null : S3, k2 = n10.menuItemTemplate, x2 = void 0 === k2 ? null : k2, M2 = n10.lookup, A2 = void 0 === M2 ? "key" : M2, L2 = n10.fillAttr, I2 = void 0 === L2 ? "value" : L2, N2 = n10.collection, O = void 0 === N2 ? null : N2, D = n10.menuContainer, P2 = void 0 === D ? null : D, R2 = n10.noMatchTemplate, W = void 0 === R2 ? null : R2, H2 = n10.requireLeadingSpace, B = void 0 === H2 || H2, F = n10.allowSpaces, _2 = void 0 !== F && F, j = n10.replaceTextSuffix, Y = void 0 === j ? null : j, z2 = n10.positionMenu, K = void 0 === z2 || z2, q = n10.spaceSelectsMatch, U = void 0 !== q && q, X = n10.searchOpts, Q = void 0 === X ? {} : X, V2 = n10.menuItemLimit, G = void 0 === V2 ? null : V2, J = n10.menuShowMinLength, Z2 = void 0 === J ? 0 : J;
            if (e12(this, t6), this.autocompleteMode = C2, this.menuSelected = 0, this.current = {}, this.inputEvent = false, this.isActive = false, this.menuContainer = P2, this.allowSpaces = _2, this.replaceTextSuffix = Y, this.positionMenu = K, this.hasTrailingSpace = false, this.spaceSelectsMatch = U, this.autocompleteMode && (w2 = "", _2 = false), c6)
              this.collection = [{ trigger: w2, iframe: d3, selectClass: m3, containerClass: v2, itemClass: b2, selectTemplate: (E2 || t6.defaultSelectTemplate).bind(this), menuItemTemplate: (x2 || t6.defaultMenuItemTemplate).bind(this), noMatchTemplate: (i7 = W, "string" == typeof i7 ? "" === i7.trim() ? null : i7 : "function" == typeof i7 ? i7.bind(r8) : W || function() {
                return "<li>No Match Found!</li>";
              }.bind(r8)), lookup: A2, fillAttr: I2, values: c6, requireLeadingSpace: B, searchOpts: Q, menuItemLimit: G, menuShowMinLength: Z2 }];
            else {
              if (!O)
                throw new Error("[Tribute] No collection specified.");
              this.autocompleteMode && console.warn("Tribute in autocomplete mode does not work for collections"), this.collection = O.map(function(e13) {
                return { trigger: e13.trigger || w2, iframe: e13.iframe || d3, selectClass: e13.selectClass || m3, containerClass: e13.containerClass || v2, itemClass: e13.itemClass || b2, selectTemplate: (e13.selectTemplate || t6.defaultSelectTemplate).bind(r8), menuItemTemplate: (e13.menuItemTemplate || t6.defaultMenuItemTemplate).bind(r8), noMatchTemplate: function(e14) {
                  return "string" == typeof e14 ? "" === e14.trim() ? null : e14 : "function" == typeof e14 ? e14.bind(r8) : W || function() {
                    return "<li>No Match Found!</li>";
                  }.bind(r8);
                }(W), lookup: e13.lookup || A2, fillAttr: e13.fillAttr || I2, values: e13.values, requireLeadingSpace: e13.requireLeadingSpace, searchOpts: e13.searchOpts || Q, menuItemLimit: e13.menuItemLimit || G, menuShowMinLength: e13.menuShowMinLength || Z2 };
              });
            }
            new l9(this), new o11(this), new u4(this), new s8(this);
          }
          return n9(t6, [{ key: "triggers", value: function() {
            return this.collection.map(function(e13) {
              return e13.trigger;
            });
          } }, { key: "attach", value: function(e13) {
            if (!e13)
              throw new Error("[Tribute] Must pass in a DOM node or NodeList.");
            if ("undefined" != typeof jQuery && e13 instanceof jQuery && (e13 = e13.get()), e13.constructor === NodeList || e13.constructor === HTMLCollection || e13.constructor === Array)
              for (var t7 = e13.length, n10 = 0; n10 < t7; ++n10)
                this._attach(e13[n10]);
            else
              this._attach(e13);
          } }, { key: "_attach", value: function(e13) {
            e13.hasAttribute("data-tribute") && console.warn("Tribute was already bound to " + e13.nodeName), this.ensureEditable(e13), this.events.bind(e13), e13.setAttribute("data-tribute", true);
          } }, { key: "ensureEditable", value: function(e13) {
            if (-1 === t6.inputTypes().indexOf(e13.nodeName)) {
              if (!e13.contentEditable)
                throw new Error("[Tribute] Cannot bind to " + e13.nodeName);
              e13.contentEditable = true;
            }
          } }, { key: "createMenu", value: function(e13) {
            var t7 = this.range.getDocument().createElement("div"), n10 = this.range.getDocument().createElement("ul");
            return t7.className = e13, t7.appendChild(n10), this.menuContainer ? this.menuContainer.appendChild(t7) : this.range.getDocument().body.appendChild(t7);
          } }, { key: "showMenuFor", value: function(e13, t7) {
            var n10 = this;
            if (!this.isActive || this.current.element !== e13 || this.current.mentionText !== this.currentMentionTextSnapshot) {
              this.currentMentionTextSnapshot = this.current.mentionText, this.menu || (this.menu = this.createMenu(this.current.collection.containerClass), e13.tributeMenu = this.menu, this.menuEvents.bind(this.menu)), this.isActive = true, this.menuSelected = 0, this.current.mentionText || (this.current.mentionText = "");
              var r8 = function(e14) {
                if (n10.isActive) {
                  var r9 = n10.search.filter(n10.current.mentionText, e14, { pre: n10.current.collection.searchOpts.pre || "<span>", post: n10.current.collection.searchOpts.post || "</span>", skip: n10.current.collection.searchOpts.skip, extract: function(e15) {
                    if ("string" == typeof n10.current.collection.lookup)
                      return e15[n10.current.collection.lookup];
                    if ("function" == typeof n10.current.collection.lookup)
                      return n10.current.collection.lookup(e15, n10.current.mentionText);
                    throw new Error("Invalid lookup attribute, lookup must be string or function.");
                  } });
                  n10.current.collection.menuItemLimit && (r9 = r9.slice(0, n10.current.collection.menuItemLimit)), n10.current.filteredItems = r9;
                  var o12 = n10.menu.querySelector("ul");
                  if (n10.range.positionMenuAtCaret(t7), !r9.length) {
                    var u5 = new CustomEvent("tribute-no-match", { detail: n10.menu });
                    return n10.current.element.dispatchEvent(u5), void ("function" == typeof n10.current.collection.noMatchTemplate && !n10.current.collection.noMatchTemplate() || !n10.current.collection.noMatchTemplate ? n10.hideMenu() : "function" == typeof n10.current.collection.noMatchTemplate ? o12.innerHTML = n10.current.collection.noMatchTemplate() : o12.innerHTML = n10.current.collection.noMatchTemplate);
                  }
                  o12.innerHTML = "";
                  var l10 = n10.range.getDocument().createDocumentFragment();
                  r9.forEach(function(e15, t8) {
                    var r10 = n10.range.getDocument().createElement("li");
                    r10.setAttribute("data-index", t8), r10.className = n10.current.collection.itemClass, r10.addEventListener("mousemove", function(e16) {
                      var t9 = i6(n10._findLiTarget(e16.target), 2), r11 = (t9[0], t9[1]);
                      0 !== e16.movementY && n10.events.setActiveLi(r11);
                    }), n10.menuSelected === t8 && r10.classList.add(n10.current.collection.selectClass), r10.innerHTML = n10.current.collection.menuItemTemplate(e15), l10.appendChild(r10);
                  }), o12.appendChild(l10);
                }
              };
              "function" == typeof this.current.collection.values ? this.current.collection.values(this.current.mentionText, r8) : r8(this.current.collection.values);
            }
          } }, { key: "_findLiTarget", value: function(e13) {
            if (!e13)
              return [];
            var t7 = e13.getAttribute("data-index");
            return t7 ? [e13, t7] : this._findLiTarget(e13.parentNode);
          } }, { key: "showMenuForCollection", value: function(e13, t7) {
            e13 !== document.activeElement && this.placeCaretAtEnd(e13), this.current.collection = this.collection[t7 || 0], this.current.externalTrigger = true, this.current.element = e13, e13.isContentEditable ? this.insertTextAtCursor(this.current.collection.trigger) : this.insertAtCaret(e13, this.current.collection.trigger), this.showMenuFor(e13);
          } }, { key: "placeCaretAtEnd", value: function(e13) {
            if (e13.focus(), void 0 !== window.getSelection && void 0 !== document.createRange) {
              var t7 = document.createRange();
              t7.selectNodeContents(e13), t7.collapse(false);
              var n10 = window.getSelection();
              n10.removeAllRanges(), n10.addRange(t7);
            } else if (void 0 !== document.body.createTextRange) {
              var i7 = document.body.createTextRange();
              i7.moveToElementText(e13), i7.collapse(false), i7.select();
            }
          } }, { key: "insertTextAtCursor", value: function(e13) {
            var t7, n10;
            (n10 = (t7 = window.getSelection()).getRangeAt(0)).deleteContents();
            var i7 = document.createTextNode(e13);
            n10.insertNode(i7), n10.selectNodeContents(i7), n10.collapse(false), t7.removeAllRanges(), t7.addRange(n10);
          } }, { key: "insertAtCaret", value: function(e13, t7) {
            var n10 = e13.scrollTop, i7 = e13.selectionStart, r8 = e13.value.substring(0, i7), o12 = e13.value.substring(e13.selectionEnd, e13.value.length);
            e13.value = r8 + t7 + o12, i7 += t7.length, e13.selectionStart = i7, e13.selectionEnd = i7, e13.focus(), e13.scrollTop = n10;
          } }, { key: "hideMenu", value: function() {
            this.menu && (this.menu.style.cssText = "display: none;", this.isActive = false, this.menuSelected = 0, this.current = {});
          } }, { key: "selectItemAtIndex", value: function(e13, t7) {
            if ("number" == typeof (e13 = parseInt(e13)) && !isNaN(e13)) {
              var n10 = this.current.filteredItems[e13], i7 = this.current.collection.selectTemplate(n10);
              null !== i7 && this.replaceText(i7, t7, n10);
            }
          } }, { key: "replaceText", value: function(e13, t7, n10) {
            this.range.replaceTriggerText(e13, true, true, t7, n10);
          } }, { key: "_append", value: function(e13, t7, n10) {
            if ("function" == typeof e13.values)
              throw new Error("Unable to append to values, as it is a function.");
            e13.values = n10 ? t7 : e13.values.concat(t7);
          } }, { key: "append", value: function(e13, t7, n10) {
            var i7 = parseInt(e13);
            if ("number" != typeof i7)
              throw new Error("please provide an index for the collection to update.");
            var r8 = this.collection[i7];
            this._append(r8, t7, n10);
          } }, { key: "appendCurrent", value: function(e13, t7) {
            if (!this.isActive)
              throw new Error("No active state. Please use append instead and pass an index.");
            this._append(this.current.collection, e13, t7);
          } }, { key: "detach", value: function(e13) {
            if (!e13)
              throw new Error("[Tribute] Must pass in a DOM node or NodeList.");
            if ("undefined" != typeof jQuery && e13 instanceof jQuery && (e13 = e13.get()), e13.constructor === NodeList || e13.constructor === HTMLCollection || e13.constructor === Array)
              for (var t7 = e13.length, n10 = 0; n10 < t7; ++n10)
                this._detach(e13[n10]);
            else
              this._detach(e13);
          } }, { key: "_detach", value: function(e13) {
            var t7 = this;
            this.events.unbind(e13), e13.tributeMenu && this.menuEvents.unbind(e13.tributeMenu), setTimeout(function() {
              e13.removeAttribute("data-tribute"), t7.isActive = false, e13.tributeMenu && e13.tributeMenu.remove();
            });
          } }, { key: "isActive", get: function() {
            return this._isActive;
          }, set: function(e13) {
            if (this._isActive != e13 && (this._isActive = e13, this.current.element)) {
              var t7 = new CustomEvent("tribute-active-".concat(e13));
              this.current.element.dispatchEvent(t7);
            }
          } }], [{ key: "defaultSelectTemplate", value: function(e13) {
            return void 0 === e13 ? "".concat(this.current.collection.trigger).concat(this.current.mentionText) : this.range.isContentEditable(this.current.element) ? '<span class="tribute-mention">' + (this.current.collection.trigger + e13.original[this.current.collection.fillAttr]) + "</span>" : this.current.collection.trigger + e13.original[this.current.collection.fillAttr];
          } }, { key: "defaultMenuItemTemplate", value: function(e13) {
            return e13.string;
          } }, { key: "inputTypes", value: function() {
            return ["TEXTAREA", "INPUT"];
          } }]), t6;
        }();
      });
    }
  });

  // ../../node_modules/trix/dist/trix.js
  var require_trix = __commonJS({
    "../../node_modules/trix/dist/trix.js"(exports2, module4) {
      (function() {
      }).call(exports2), function() {
        var t5;
        null == window.Set && (window.Set = t5 = function() {
          function t6() {
            this.clear();
          }
          return t6.prototype.clear = function() {
            return this.values = [];
          }, t6.prototype.has = function(t7) {
            return -1 !== this.values.indexOf(t7);
          }, t6.prototype.add = function(t7) {
            return this.has(t7) || this.values.push(t7), this;
          }, t6.prototype["delete"] = function(t7) {
            var e12;
            return -1 === (e12 = this.values.indexOf(t7)) ? false : (this.values.splice(e12, 1), true);
          }, t6.prototype.forEach = function() {
            var t7;
            return (t7 = this.values).forEach.apply(t7, arguments);
          }, t6;
        }());
      }.call(exports2), function(t5) {
        function e12() {
        }
        function n9(t6, e13) {
          return function() {
            t6.apply(e13, arguments);
          };
        }
        function i6(t6) {
          if ("object" != typeof this)
            throw new TypeError("Promises must be constructed via new");
          if ("function" != typeof t6)
            throw new TypeError("not a function");
          this._state = 0, this._handled = false, this._value = void 0, this._deferreds = [], c6(t6, this);
        }
        function o11(t6, e13) {
          for (; 3 === t6._state; )
            t6 = t6._value;
          return 0 === t6._state ? void t6._deferreds.push(e13) : (t6._handled = true, void h6(function() {
            var n10 = 1 === t6._state ? e13.onFulfilled : e13.onRejected;
            if (null === n10)
              return void (1 === t6._state ? r7 : s8)(e13.promise, t6._value);
            var i7;
            try {
              i7 = n10(t6._value);
            } catch (o12) {
              return void s8(e13.promise, o12);
            }
            r7(e13.promise, i7);
          }));
        }
        function r7(t6, e13) {
          try {
            if (e13 === t6)
              throw new TypeError("A promise cannot be resolved with itself.");
            if (e13 && ("object" == typeof e13 || "function" == typeof e13)) {
              var o12 = e13.then;
              if (e13 instanceof i6)
                return t6._state = 3, t6._value = e13, void a4(t6);
              if ("function" == typeof o12)
                return void c6(n9(o12, e13), t6);
            }
            t6._state = 1, t6._value = e13, a4(t6);
          } catch (r8) {
            s8(t6, r8);
          }
        }
        function s8(t6, e13) {
          t6._state = 2, t6._value = e13, a4(t6);
        }
        function a4(t6) {
          2 === t6._state && 0 === t6._deferreds.length && setTimeout(function() {
            t6._handled || p3(t6._value);
          }, 1);
          for (var e13 = 0, n10 = t6._deferreds.length; n10 > e13; e13++)
            o11(t6, t6._deferreds[e13]);
          t6._deferreds = null;
        }
        function u4(t6, e13, n10) {
          this.onFulfilled = "function" == typeof t6 ? t6 : null, this.onRejected = "function" == typeof e13 ? e13 : null, this.promise = n10;
        }
        function c6(t6, e13) {
          var n10 = false;
          try {
            t6(function(t7) {
              n10 || (n10 = true, r7(e13, t7));
            }, function(t7) {
              n10 || (n10 = true, s8(e13, t7));
            });
          } catch (i7) {
            if (n10)
              return;
            n10 = true, s8(e13, i7);
          }
        }
        var l9 = setTimeout, h6 = "function" == typeof setImmediate && setImmediate || function(t6) {
          l9(t6, 1);
        }, p3 = function(t6) {
          "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", t6);
        };
        i6.prototype["catch"] = function(t6) {
          return this.then(null, t6);
        }, i6.prototype.then = function(t6, n10) {
          var r8 = new i6(e12);
          return o11(this, new u4(t6, n10, r8)), r8;
        }, i6.all = function(t6) {
          var e13 = Array.prototype.slice.call(t6);
          return new i6(function(t7, n10) {
            function i7(r9, s9) {
              try {
                if (s9 && ("object" == typeof s9 || "function" == typeof s9)) {
                  var a5 = s9.then;
                  if ("function" == typeof a5)
                    return void a5.call(s9, function(t8) {
                      i7(r9, t8);
                    }, n10);
                }
                e13[r9] = s9, 0 === --o12 && t7(e13);
              } catch (u5) {
                n10(u5);
              }
            }
            if (0 === e13.length)
              return t7([]);
            for (var o12 = e13.length, r8 = 0; r8 < e13.length; r8++)
              i7(r8, e13[r8]);
          });
        }, i6.resolve = function(t6) {
          return t6 && "object" == typeof t6 && t6.constructor === i6 ? t6 : new i6(function(e13) {
            e13(t6);
          });
        }, i6.reject = function(t6) {
          return new i6(function(e13, n10) {
            n10(t6);
          });
        }, i6.race = function(t6) {
          return new i6(function(e13, n10) {
            for (var i7 = 0, o12 = t6.length; o12 > i7; i7++)
              t6[i7].then(e13, n10);
          });
        }, i6._setImmediateFn = function(t6) {
          h6 = t6;
        }, i6._setUnhandledRejectionFn = function(t6) {
          p3 = t6;
        }, "undefined" != typeof module4 && module4.exports ? module4.exports = i6 : t5.Promise || (t5.Promise = i6);
      }(exports2), function() {
        var t5 = "object" == typeof window.customElements, e12 = "function" == typeof document.registerElement, n9 = t5 || e12;
        n9 || ("undefined" == typeof WeakMap && !function() {
          var t6 = Object.defineProperty, e13 = Date.now() % 1e9, n10 = function() {
            this.name = "__st" + (1e9 * Math.random() >>> 0) + (e13++ + "__");
          };
          n10.prototype = { set: function(e14, n11) {
            var i6 = e14[this.name];
            return i6 && i6[0] === e14 ? i6[1] = n11 : t6(e14, this.name, { value: [e14, n11], writable: true }), this;
          }, get: function(t7) {
            var e14;
            return (e14 = t7[this.name]) && e14[0] === t7 ? e14[1] : void 0;
          }, "delete": function(t7) {
            var e14 = t7[this.name];
            return e14 && e14[0] === t7 ? (e14[0] = e14[1] = void 0, true) : false;
          }, has: function(t7) {
            var e14 = t7[this.name];
            return e14 ? e14[0] === t7 : false;
          } }, window.WeakMap = n10;
        }(), function(t6) {
          function e13(t7) {
            A2.push(t7), b2 || (b2 = true, g2(i6));
          }
          function n10(t7) {
            return window.ShadowDOMPolyfill && window.ShadowDOMPolyfill.wrapIfNeeded(t7) || t7;
          }
          function i6() {
            b2 = false;
            var t7 = A2;
            A2 = [], t7.sort(function(t8, e15) {
              return t8.uid_ - e15.uid_;
            });
            var e14 = false;
            t7.forEach(function(t8) {
              var n11 = t8.takeRecords();
              o11(t8), n11.length && (t8.callback_(n11, t8), e14 = true);
            }), e14 && i6();
          }
          function o11(t7) {
            t7.nodes_.forEach(function(e14) {
              var n11 = m3.get(e14);
              n11 && n11.forEach(function(e15) {
                e15.observer === t7 && e15.removeTransientObservers();
              });
            });
          }
          function r7(t7, e14) {
            for (var n11 = t7; n11; n11 = n11.parentNode) {
              var i7 = m3.get(n11);
              if (i7)
                for (var o12 = 0; o12 < i7.length; o12++) {
                  var r8 = i7[o12], s9 = r8.options;
                  if (n11 === t7 || s9.subtree) {
                    var a5 = e14(s9);
                    a5 && r8.enqueue(a5);
                  }
                }
            }
          }
          function s8(t7) {
            this.callback_ = t7, this.nodes_ = [], this.records_ = [], this.uid_ = ++C2;
          }
          function a4(t7, e14) {
            this.type = t7, this.target = e14, this.addedNodes = [], this.removedNodes = [], this.previousSibling = null, this.nextSibling = null, this.attributeName = null, this.attributeNamespace = null, this.oldValue = null;
          }
          function u4(t7) {
            var e14 = new a4(t7.type, t7.target);
            return e14.addedNodes = t7.addedNodes.slice(), e14.removedNodes = t7.removedNodes.slice(), e14.previousSibling = t7.previousSibling, e14.nextSibling = t7.nextSibling, e14.attributeName = t7.attributeName, e14.attributeNamespace = t7.attributeNamespace, e14.oldValue = t7.oldValue, e14;
          }
          function c6(t7, e14) {
            return x2 = new a4(t7, e14);
          }
          function l9(t7) {
            return w2 ? w2 : (w2 = u4(x2), w2.oldValue = t7, w2);
          }
          function h6() {
            x2 = w2 = void 0;
          }
          function p3(t7) {
            return t7 === w2 || t7 === x2;
          }
          function d3(t7, e14) {
            return t7 === e14 ? t7 : w2 && p3(t7) ? w2 : null;
          }
          function f3(t7, e14, n11) {
            this.observer = t7, this.target = e14, this.options = n11, this.transientObservedNodes = [];
          }
          if (!t6.JsMutationObserver) {
            var g2, m3 = /* @__PURE__ */ new WeakMap();
            if (/Trident|Edge/.test(navigator.userAgent))
              g2 = setTimeout;
            else if (window.setImmediate)
              g2 = window.setImmediate;
            else {
              var v2 = [], y2 = String(Math.random());
              window.addEventListener("message", function(t7) {
                if (t7.data === y2) {
                  var e14 = v2;
                  v2 = [], e14.forEach(function(t8) {
                    t8();
                  });
                }
              }), g2 = function(t7) {
                v2.push(t7), window.postMessage(y2, "*");
              };
            }
            var b2 = false, A2 = [], C2 = 0;
            s8.prototype = { observe: function(t7, e14) {
              if (t7 = n10(t7), !e14.childList && !e14.attributes && !e14.characterData || e14.attributeOldValue && !e14.attributes || e14.attributeFilter && e14.attributeFilter.length && !e14.attributes || e14.characterDataOldValue && !e14.characterData)
                throw new SyntaxError();
              var i7 = m3.get(t7);
              i7 || m3.set(t7, i7 = []);
              for (var o12, r8 = 0; r8 < i7.length; r8++)
                if (i7[r8].observer === this) {
                  o12 = i7[r8], o12.removeListeners(), o12.options = e14;
                  break;
                }
              o12 || (o12 = new f3(this, t7, e14), i7.push(o12), this.nodes_.push(t7)), o12.addListeners();
            }, disconnect: function() {
              this.nodes_.forEach(function(t7) {
                for (var e14 = m3.get(t7), n11 = 0; n11 < e14.length; n11++) {
                  var i7 = e14[n11];
                  if (i7.observer === this) {
                    i7.removeListeners(), e14.splice(n11, 1);
                    break;
                  }
                }
              }, this), this.records_ = [];
            }, takeRecords: function() {
              var t7 = this.records_;
              return this.records_ = [], t7;
            } };
            var x2, w2;
            f3.prototype = { enqueue: function(t7) {
              var n11 = this.observer.records_, i7 = n11.length;
              if (n11.length > 0) {
                var o12 = n11[i7 - 1], r8 = d3(o12, t7);
                if (r8)
                  return void (n11[i7 - 1] = r8);
              } else
                e13(this.observer);
              n11[i7] = t7;
            }, addListeners: function() {
              this.addListeners_(this.target);
            }, addListeners_: function(t7) {
              var e14 = this.options;
              e14.attributes && t7.addEventListener("DOMAttrModified", this, true), e14.characterData && t7.addEventListener("DOMCharacterDataModified", this, true), e14.childList && t7.addEventListener("DOMNodeInserted", this, true), (e14.childList || e14.subtree) && t7.addEventListener("DOMNodeRemoved", this, true);
            }, removeListeners: function() {
              this.removeListeners_(this.target);
            }, removeListeners_: function(t7) {
              var e14 = this.options;
              e14.attributes && t7.removeEventListener("DOMAttrModified", this, true), e14.characterData && t7.removeEventListener("DOMCharacterDataModified", this, true), e14.childList && t7.removeEventListener("DOMNodeInserted", this, true), (e14.childList || e14.subtree) && t7.removeEventListener("DOMNodeRemoved", this, true);
            }, addTransientObserver: function(t7) {
              if (t7 !== this.target) {
                this.addListeners_(t7), this.transientObservedNodes.push(t7);
                var e14 = m3.get(t7);
                e14 || m3.set(t7, e14 = []), e14.push(this);
              }
            }, removeTransientObservers: function() {
              var t7 = this.transientObservedNodes;
              this.transientObservedNodes = [], t7.forEach(function(t8) {
                this.removeListeners_(t8);
                for (var e14 = m3.get(t8), n11 = 0; n11 < e14.length; n11++)
                  if (e14[n11] === this) {
                    e14.splice(n11, 1);
                    break;
                  }
              }, this);
            }, handleEvent: function(t7) {
              switch (t7.stopImmediatePropagation(), t7.type) {
                case "DOMAttrModified":
                  var e14 = t7.attrName, n11 = t7.relatedNode.namespaceURI, i7 = t7.target, o12 = new c6("attributes", i7);
                  o12.attributeName = e14, o12.attributeNamespace = n11;
                  var s9 = t7.attrChange === MutationEvent.ADDITION ? null : t7.prevValue;
                  r7(i7, function(t8) {
                    return !t8.attributes || t8.attributeFilter && t8.attributeFilter.length && -1 === t8.attributeFilter.indexOf(e14) && -1 === t8.attributeFilter.indexOf(n11) ? void 0 : t8.attributeOldValue ? l9(s9) : o12;
                  });
                  break;
                case "DOMCharacterDataModified":
                  var i7 = t7.target, o12 = c6("characterData", i7), s9 = t7.prevValue;
                  r7(i7, function(t8) {
                    return t8.characterData ? t8.characterDataOldValue ? l9(s9) : o12 : void 0;
                  });
                  break;
                case "DOMNodeRemoved":
                  this.addTransientObserver(t7.target);
                case "DOMNodeInserted":
                  var a5, u5, p4 = t7.target;
                  "DOMNodeInserted" === t7.type ? (a5 = [p4], u5 = []) : (a5 = [], u5 = [p4]);
                  var d4 = p4.previousSibling, f4 = p4.nextSibling, o12 = c6("childList", t7.target.parentNode);
                  o12.addedNodes = a5, o12.removedNodes = u5, o12.previousSibling = d4, o12.nextSibling = f4, r7(t7.relatedNode, function(t8) {
                    return t8.childList ? o12 : void 0;
                  });
              }
              h6();
            } }, t6.JsMutationObserver = s8, t6.MutationObserver || (t6.MutationObserver = s8, s8._isPolyfilled = true);
          }
        }(self), function() {
          "use strict";
          if (!window.performance || !window.performance.now) {
            var t6 = Date.now();
            window.performance = { now: function() {
              return Date.now() - t6;
            } };
          }
          window.requestAnimationFrame || (window.requestAnimationFrame = function() {
            var t7 = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
            return t7 ? function(e14) {
              return t7(function() {
                e14(performance.now());
              });
            } : function(t8) {
              return window.setTimeout(t8, 1e3 / 60);
            };
          }()), window.cancelAnimationFrame || (window.cancelAnimationFrame = function() {
            return window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function(t7) {
              clearTimeout(t7);
            };
          }());
          var e13 = function() {
            var t7 = document.createEvent("Event");
            return t7.initEvent("foo", true, true), t7.preventDefault(), t7.defaultPrevented;
          }();
          if (!e13) {
            var n10 = Event.prototype.preventDefault;
            Event.prototype.preventDefault = function() {
              this.cancelable && (n10.call(this), Object.defineProperty(this, "defaultPrevented", { get: function() {
                return true;
              }, configurable: true }));
            };
          }
          var i6 = /Trident/.test(navigator.userAgent);
          if ((!window.CustomEvent || i6 && "function" != typeof window.CustomEvent) && (window.CustomEvent = function(t7, e14) {
            e14 = e14 || {};
            var n11 = document.createEvent("CustomEvent");
            return n11.initCustomEvent(t7, Boolean(e14.bubbles), Boolean(e14.cancelable), e14.detail), n11;
          }, window.CustomEvent.prototype = window.Event.prototype), !window.Event || i6 && "function" != typeof window.Event) {
            var o11 = window.Event;
            window.Event = function(t7, e14) {
              e14 = e14 || {};
              var n11 = document.createEvent("Event");
              return n11.initEvent(t7, Boolean(e14.bubbles), Boolean(e14.cancelable)), n11;
            }, window.Event.prototype = o11.prototype;
          }
        }(window.WebComponents), window.CustomElements = window.CustomElements || { flags: {} }, function(t6) {
          var e13 = t6.flags, n10 = [], i6 = function(t7) {
            n10.push(t7);
          }, o11 = function() {
            n10.forEach(function(e14) {
              e14(t6);
            });
          };
          t6.addModule = i6, t6.initializeModules = o11, t6.hasNative = Boolean(document.registerElement), t6.isIE = /Trident/.test(navigator.userAgent), t6.useNative = !e13.register && t6.hasNative && !window.ShadowDOMPolyfill && (!window.HTMLImports || window.HTMLImports.useNative);
        }(window.CustomElements), window.CustomElements.addModule(function(t6) {
          function e13(t7, e14) {
            n10(t7, function(t8) {
              return e14(t8) ? true : void i6(t8, e14);
            }), i6(t7, e14);
          }
          function n10(t7, e14, i7) {
            var o12 = t7.firstElementChild;
            if (!o12)
              for (o12 = t7.firstChild; o12 && o12.nodeType !== Node.ELEMENT_NODE; )
                o12 = o12.nextSibling;
            for (; o12; )
              e14(o12, i7) !== true && n10(o12, e14, i7), o12 = o12.nextElementSibling;
            return null;
          }
          function i6(t7, n11) {
            for (var i7 = t7.shadowRoot; i7; )
              e13(i7, n11), i7 = i7.olderShadowRoot;
          }
          function o11(t7, e14) {
            r7(t7, e14, []);
          }
          function r7(t7, e14, n11) {
            if (t7 = window.wrap(t7), !(n11.indexOf(t7) >= 0)) {
              n11.push(t7);
              for (var i7, o12 = t7.querySelectorAll("link[rel=" + s8 + "]"), a4 = 0, u4 = o12.length; u4 > a4 && (i7 = o12[a4]); a4++)
                i7.import && r7(i7.import, e14, n11);
              e14(t7);
            }
          }
          var s8 = window.HTMLImports ? window.HTMLImports.IMPORT_LINK_TYPE : "none";
          t6.forDocumentTree = o11, t6.forSubtree = e13;
        }), window.CustomElements.addModule(function(t6) {
          function e13(t7, e14) {
            return n10(t7, e14) || i6(t7, e14);
          }
          function n10(e14, n11) {
            return t6.upgrade(e14, n11) ? true : void (n11 && s8(e14));
          }
          function i6(t7, e14) {
            b2(t7, function(t8) {
              return n10(t8, e14) ? true : void 0;
            });
          }
          function o11(t7) {
            w2.push(t7), x2 || (x2 = true, setTimeout(r7));
          }
          function r7() {
            x2 = false;
            for (var t7, e14 = w2, n11 = 0, i7 = e14.length; i7 > n11 && (t7 = e14[n11]); n11++)
              t7();
            w2 = [];
          }
          function s8(t7) {
            C2 ? o11(function() {
              a4(t7);
            }) : a4(t7);
          }
          function a4(t7) {
            t7.__upgraded__ && !t7.__attached && (t7.__attached = true, t7.attachedCallback && t7.attachedCallback());
          }
          function u4(t7) {
            c6(t7), b2(t7, function(t8) {
              c6(t8);
            });
          }
          function c6(t7) {
            C2 ? o11(function() {
              l9(t7);
            }) : l9(t7);
          }
          function l9(t7) {
            t7.__upgraded__ && t7.__attached && (t7.__attached = false, t7.detachedCallback && t7.detachedCallback());
          }
          function h6(t7) {
            for (var e14 = t7, n11 = window.wrap(document); e14; ) {
              if (e14 == n11)
                return true;
              e14 = e14.parentNode || e14.nodeType === Node.DOCUMENT_FRAGMENT_NODE && e14.host;
            }
          }
          function p3(t7) {
            if (t7.shadowRoot && !t7.shadowRoot.__watched) {
              y2.dom && console.log("watching shadow-root for: ", t7.localName);
              for (var e14 = t7.shadowRoot; e14; )
                g2(e14), e14 = e14.olderShadowRoot;
            }
          }
          function d3(t7, n11) {
            if (y2.dom) {
              var i7 = n11[0];
              if (i7 && "childList" === i7.type && i7.addedNodes && i7.addedNodes) {
                for (var o12 = i7.addedNodes[0]; o12 && o12 !== document && !o12.host; )
                  o12 = o12.parentNode;
                var r8 = o12 && (o12.URL || o12._URL || o12.host && o12.host.localName) || "";
                r8 = r8.split("/?").shift().split("/").pop();
              }
              console.group("mutations (%d) [%s]", n11.length, r8 || "");
            }
            var s9 = h6(t7);
            n11.forEach(function(t8) {
              "childList" === t8.type && (E2(t8.addedNodes, function(t9) {
                t9.localName && e13(t9, s9);
              }), E2(t8.removedNodes, function(t9) {
                t9.localName && u4(t9);
              }));
            }), y2.dom && console.groupEnd();
          }
          function f3(t7) {
            for (t7 = window.wrap(t7), t7 || (t7 = window.wrap(document)); t7.parentNode; )
              t7 = t7.parentNode;
            var e14 = t7.__observer;
            e14 && (d3(t7, e14.takeRecords()), r7());
          }
          function g2(t7) {
            if (!t7.__observer) {
              var e14 = new MutationObserver(d3.bind(this, t7));
              e14.observe(t7, { childList: true, subtree: true }), t7.__observer = e14;
            }
          }
          function m3(t7) {
            t7 = window.wrap(t7), y2.dom && console.group("upgradeDocument: ", t7.baseURI.split("/").pop());
            var n11 = t7 === window.wrap(document);
            e13(t7, n11), g2(t7), y2.dom && console.groupEnd();
          }
          function v2(t7) {
            A2(t7, m3);
          }
          var y2 = t6.flags, b2 = t6.forSubtree, A2 = t6.forDocumentTree, C2 = window.MutationObserver._isPolyfilled && y2["throttle-attached"];
          t6.hasPolyfillMutations = C2, t6.hasThrottledAttached = C2;
          var x2 = false, w2 = [], E2 = Array.prototype.forEach.call.bind(Array.prototype.forEach), S3 = Element.prototype.createShadowRoot;
          S3 && (Element.prototype.createShadowRoot = function() {
            var t7 = S3.call(this);
            return window.CustomElements.watchShadow(this), t7;
          }), t6.watchShadow = p3, t6.upgradeDocumentTree = v2, t6.upgradeDocument = m3, t6.upgradeSubtree = i6, t6.upgradeAll = e13, t6.attached = s8, t6.takeRecords = f3;
        }), window.CustomElements.addModule(function(t6) {
          function e13(e14, i7) {
            if ("template" === e14.localName && window.HTMLTemplateElement && HTMLTemplateElement.decorate && HTMLTemplateElement.decorate(e14), !e14.__upgraded__ && e14.nodeType === Node.ELEMENT_NODE) {
              var o12 = e14.getAttribute("is"), r8 = t6.getRegisteredDefinition(e14.localName) || t6.getRegisteredDefinition(o12);
              if (r8 && (o12 && r8.tag == e14.localName || !o12 && !r8.extends))
                return n10(e14, r8, i7);
            }
          }
          function n10(e14, n11, o12) {
            return s8.upgrade && console.group("upgrade:", e14.localName), n11.is && e14.setAttribute("is", n11.is), i6(e14, n11), e14.__upgraded__ = true, r7(e14), o12 && t6.attached(e14), t6.upgradeSubtree(e14, o12), s8.upgrade && console.groupEnd(), e14;
          }
          function i6(t7, e14) {
            Object.__proto__ ? t7.__proto__ = e14.prototype : (o11(t7, e14.prototype, e14.native), t7.__proto__ = e14.prototype);
          }
          function o11(t7, e14, n11) {
            for (var i7 = {}, o12 = e14; o12 !== n11 && o12 !== HTMLElement.prototype; ) {
              for (var r8, s9 = Object.getOwnPropertyNames(o12), a4 = 0; r8 = s9[a4]; a4++)
                i7[r8] || (Object.defineProperty(t7, r8, Object.getOwnPropertyDescriptor(o12, r8)), i7[r8] = 1);
              o12 = Object.getPrototypeOf(o12);
            }
          }
          function r7(t7) {
            t7.createdCallback && t7.createdCallback();
          }
          var s8 = t6.flags;
          t6.upgrade = e13, t6.upgradeWithDefinition = n10, t6.implementPrototype = i6;
        }), window.CustomElements.addModule(function(t6) {
          function e13(e14, i7) {
            var u5 = i7 || {};
            if (!e14)
              throw new Error("document.registerElement: first argument `name` must not be empty");
            if (e14.indexOf("-") < 0)
              throw new Error("document.registerElement: first argument ('name') must contain a dash ('-'). Argument provided was '" + String(e14) + "'.");
            if (o11(e14))
              throw new Error("Failed to execute 'registerElement' on 'Document': Registration failed for type '" + String(e14) + "'. The type name is invalid.");
            if (c6(e14))
              throw new Error("DuplicateDefinitionError: a type with name '" + String(e14) + "' is already registered");
            return u5.prototype || (u5.prototype = Object.create(HTMLElement.prototype)), u5.__name = e14.toLowerCase(), u5.extends && (u5.extends = u5.extends.toLowerCase()), u5.lifecycle = u5.lifecycle || {}, u5.ancestry = r7(u5.extends), s8(u5), a4(u5), n10(u5.prototype), l9(u5.__name, u5), u5.ctor = h6(u5), u5.ctor.prototype = u5.prototype, u5.prototype.constructor = u5.ctor, t6.ready && m3(document), u5.ctor;
          }
          function n10(t7) {
            if (!t7.setAttribute._polyfilled) {
              var e14 = t7.setAttribute;
              t7.setAttribute = function(t8, n12) {
                i6.call(this, t8, n12, e14);
              };
              var n11 = t7.removeAttribute;
              t7.removeAttribute = function(t8) {
                i6.call(this, t8, null, n11);
              }, t7.setAttribute._polyfilled = true;
            }
          }
          function i6(t7, e14, n11) {
            t7 = t7.toLowerCase();
            var i7 = this.getAttribute(t7);
            n11.apply(this, arguments);
            var o12 = this.getAttribute(t7);
            this.attributeChangedCallback && o12 !== i7 && this.attributeChangedCallback(t7, i7, o12);
          }
          function o11(t7) {
            for (var e14 = 0; e14 < C2.length; e14++)
              if (t7 === C2[e14])
                return true;
          }
          function r7(t7) {
            var e14 = c6(t7);
            return e14 ? r7(e14.extends).concat([e14]) : [];
          }
          function s8(t7) {
            for (var e14, n11 = t7.extends, i7 = 0; e14 = t7.ancestry[i7]; i7++)
              n11 = e14.is && e14.tag;
            t7.tag = n11 || t7.__name, n11 && (t7.is = t7.__name);
          }
          function a4(t7) {
            if (!Object.__proto__) {
              var e14 = HTMLElement.prototype;
              if (t7.is) {
                var n11 = document.createElement(t7.tag);
                e14 = Object.getPrototypeOf(n11);
              }
              for (var i7, o12 = t7.prototype, r8 = false; o12; )
                o12 == e14 && (r8 = true), i7 = Object.getPrototypeOf(o12), i7 && (o12.__proto__ = i7), o12 = i7;
              r8 || console.warn(t7.tag + " prototype not found in prototype chain for " + t7.is), t7.native = e14;
            }
          }
          function u4(t7) {
            return y2(E2(t7.tag), t7);
          }
          function c6(t7) {
            return t7 ? x2[t7.toLowerCase()] : void 0;
          }
          function l9(t7, e14) {
            x2[t7] = e14;
          }
          function h6(t7) {
            return function() {
              return u4(t7);
            };
          }
          function p3(t7, e14, n11) {
            return t7 === w2 ? d3(e14, n11) : S3(t7, e14);
          }
          function d3(t7, e14) {
            t7 && (t7 = t7.toLowerCase()), e14 && (e14 = e14.toLowerCase());
            var n11 = c6(e14 || t7);
            if (n11) {
              if (t7 == n11.tag && e14 == n11.is)
                return new n11.ctor();
              if (!e14 && !n11.is)
                return new n11.ctor();
            }
            var i7;
            return e14 ? (i7 = d3(t7), i7.setAttribute("is", e14), i7) : (i7 = E2(t7), t7.indexOf("-") >= 0 && b2(i7, HTMLElement), i7);
          }
          function f3(t7, e14) {
            var n11 = t7[e14];
            t7[e14] = function() {
              var t8 = n11.apply(this, arguments);
              return v2(t8), t8;
            };
          }
          var g2, m3 = (t6.isIE, t6.upgradeDocumentTree), v2 = t6.upgradeAll, y2 = t6.upgradeWithDefinition, b2 = t6.implementPrototype, A2 = t6.useNative, C2 = ["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"], x2 = {}, w2 = "http://www.w3.org/1999/xhtml", E2 = document.createElement.bind(document), S3 = document.createElementNS.bind(document);
          g2 = Object.__proto__ || A2 ? function(t7, e14) {
            return t7 instanceof e14;
          } : function(t7, e14) {
            if (t7 instanceof e14)
              return true;
            for (var n11 = t7; n11; ) {
              if (n11 === e14.prototype)
                return true;
              n11 = n11.__proto__;
            }
            return false;
          }, f3(Node.prototype, "cloneNode"), f3(document, "importNode"), document.registerElement = e13, document.createElement = d3, document.createElementNS = p3, t6.registry = x2, t6.instanceof = g2, t6.reservedTagList = C2, t6.getRegisteredDefinition = c6, document.register = document.registerElement;
        }), function(t6) {
          function e13() {
            r7(window.wrap(document)), window.CustomElements.ready = true;
            var t7 = window.requestAnimationFrame || function(t8) {
              setTimeout(t8, 16);
            };
            t7(function() {
              setTimeout(function() {
                window.CustomElements.readyTime = Date.now(), window.HTMLImports && (window.CustomElements.elapsed = window.CustomElements.readyTime - window.HTMLImports.readyTime), document.dispatchEvent(new CustomEvent("WebComponentsReady", { bubbles: true }));
              });
            });
          }
          var n10 = t6.useNative, i6 = t6.initializeModules;
          if (t6.isIE, n10) {
            var o11 = function() {
            };
            t6.watchShadow = o11, t6.upgrade = o11, t6.upgradeAll = o11, t6.upgradeDocumentTree = o11, t6.upgradeSubtree = o11, t6.takeRecords = o11, t6.instanceof = function(t7, e14) {
              return t7 instanceof e14;
            };
          } else
            i6();
          var r7 = t6.upgradeDocumentTree, s8 = t6.upgradeDocument;
          if (window.wrap || (window.ShadowDOMPolyfill ? (window.wrap = window.ShadowDOMPolyfill.wrapIfNeeded, window.unwrap = window.ShadowDOMPolyfill.unwrapIfNeeded) : window.wrap = window.unwrap = function(t7) {
            return t7;
          }), window.HTMLImports && (window.HTMLImports.__importsParsingHook = function(t7) {
            t7.import && s8(wrap(t7.import));
          }), "complete" === document.readyState || t6.flags.eager)
            e13();
          else if ("interactive" !== document.readyState || window.attachEvent || window.HTMLImports && !window.HTMLImports.ready) {
            var a4 = window.HTMLImports && !window.HTMLImports.ready ? "HTMLImportsLoaded" : "DOMContentLoaded";
            window.addEventListener(a4, e13);
          } else
            e13();
        }(window.CustomElements));
      }.call(exports2), function() {
      }.call(exports2), function() {
        var t5 = this;
        (function() {
          (function() {
            this.Trix = { VERSION: "1.3.1", ZERO_WIDTH_SPACE: "\uFEFF", NON_BREAKING_SPACE: "\xA0", OBJECT_REPLACEMENT_CHARACTER: "\uFFFC", browser: { composesExistingText: /Android.*Chrome/.test(navigator.userAgent), forcesObjectResizing: /Trident.*rv:11/.test(navigator.userAgent), supportsInputEvents: function() {
              var t6, e13, n9, i6;
              if ("undefined" == typeof InputEvent)
                return false;
              for (i6 = ["data", "getTargetRanges", "inputType"], t6 = 0, e13 = i6.length; e13 > t6; t6++)
                if (n9 = i6[t6], !(n9 in InputEvent.prototype))
                  return false;
              return true;
            }() }, config: {} };
          }).call(this);
        }).call(t5);
        var e12 = t5.Trix;
        (function() {
          (function() {
            e12.BasicObject = function() {
              function t6() {
              }
              var e13, n9, i6;
              return t6.proxyMethod = function(t7) {
                var i7, o11, r7, s8, a4;
                return r7 = n9(t7), i7 = r7.name, s8 = r7.toMethod, a4 = r7.toProperty, o11 = r7.optional, this.prototype[i7] = function() {
                  var t8, n10;
                  return t8 = null != s8 ? o11 ? "function" == typeof this[s8] ? this[s8]() : void 0 : this[s8]() : null != a4 ? this[a4] : void 0, o11 ? (n10 = null != t8 ? t8[i7] : void 0, null != n10 ? e13.call(n10, t8, arguments) : void 0) : (n10 = t8[i7], e13.call(n10, t8, arguments));
                };
              }, n9 = function(t7) {
                var e14, n10;
                if (!(n10 = t7.match(i6)))
                  throw new Error("can't parse @proxyMethod expression: " + t7);
                return e14 = { name: n10[4] }, null != n10[2] ? e14.toMethod = n10[1] : e14.toProperty = n10[1], null != n10[3] && (e14.optional = true), e14;
              }, e13 = Function.prototype.apply, i6 = /^(.+?)(\(\))?(\?)?\.(.+?)$/, t6;
            }();
          }).call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Object = function(n10) {
              function i6() {
                this.id = ++o11;
              }
              var o11;
              return t6(i6, n10), o11 = 0, i6.fromJSONString = function(t7) {
                return this.fromJSON(JSON.parse(t7));
              }, i6.prototype.hasSameConstructorAs = function(t7) {
                return this.constructor === (null != t7 ? t7.constructor : void 0);
              }, i6.prototype.isEqualTo = function(t7) {
                return this === t7;
              }, i6.prototype.inspect = function() {
                var t7, e13, n11;
                return t7 = function() {
                  var t8, i7, o12;
                  i7 = null != (t8 = this.contentsForInspection()) ? t8 : {}, o12 = [];
                  for (e13 in i7)
                    n11 = i7[e13], o12.push(e13 + "=" + n11);
                  return o12;
                }.call(this), "#<" + this.constructor.name + ":" + this.id + (t7.length ? " " + t7.join(", ") : "") + ">";
              }, i6.prototype.contentsForInspection = function() {
              }, i6.prototype.toJSONString = function() {
                return JSON.stringify(this);
              }, i6.prototype.toUTF16String = function() {
                return e12.UTF16String.box(this);
              }, i6.prototype.getCacheKey = function() {
                return this.id.toString();
              }, i6;
            }(e12.BasicObject);
          }.call(this), function() {
            e12.extend = function(t6) {
              var e13, n9;
              for (e13 in t6)
                n9 = t6[e13], this[e13] = n9;
              return this;
            };
          }.call(this), function() {
            e12.extend({ defer: function(t6) {
              return setTimeout(t6, 1);
            } });
          }.call(this), function() {
            var t6, n9;
            e12.extend({ normalizeSpaces: function(t7) {
              return t7.replace(RegExp("" + e12.ZERO_WIDTH_SPACE, "g"), "").replace(RegExp("" + e12.NON_BREAKING_SPACE, "g"), " ");
            }, normalizeNewlines: function(t7) {
              return t7.replace(/\r\n/g, "\n");
            }, breakableWhitespacePattern: RegExp("[^\\S" + e12.NON_BREAKING_SPACE + "]"), squishBreakableWhitespace: function(t7) {
              return t7.replace(RegExp("" + e12.breakableWhitespacePattern.source, "g"), " ").replace(/\ {2,}/g, " ");
            }, summarizeStringChange: function(t7, i6) {
              var o11, r7, s8, a4;
              return t7 = e12.UTF16String.box(t7), i6 = e12.UTF16String.box(i6), i6.length < t7.length ? (r7 = n9(t7, i6), a4 = r7[0], o11 = r7[1]) : (s8 = n9(i6, t7), o11 = s8[0], a4 = s8[1]), { added: o11, removed: a4 };
            } }), n9 = function(n10, i6) {
              var o11, r7, s8, a4, u4;
              return n10.isEqualTo(i6) ? ["", ""] : (r7 = t6(n10, i6), a4 = r7.utf16String.length, s8 = a4 ? (u4 = r7.offset, r7, o11 = n10.codepoints.slice(0, u4).concat(n10.codepoints.slice(u4 + a4)), t6(i6, e12.UTF16String.fromCodepoints(o11))) : t6(i6, n10), [r7.utf16String.toString(), s8.utf16String.toString()]);
            }, t6 = function(t7, e13) {
              var n10, i6, o11;
              for (n10 = 0, i6 = t7.length, o11 = e13.length; i6 > n10 && t7.charAt(n10).isEqualTo(e13.charAt(n10)); )
                n10++;
              for (; i6 > n10 + 1 && t7.charAt(i6 - 1).isEqualTo(e13.charAt(o11 - 1)); )
                i6--, o11--;
              return { utf16String: t7.slice(n10, i6), offset: n10 };
            };
          }.call(this), function() {
            e12.extend({ copyObject: function(t6) {
              var e13, n9, i6;
              null == t6 && (t6 = {}), n9 = {};
              for (e13 in t6)
                i6 = t6[e13], n9[e13] = i6;
              return n9;
            }, objectsAreEqual: function(t6, e13) {
              var n9, i6;
              if (null == t6 && (t6 = {}), null == e13 && (e13 = {}), Object.keys(t6).length !== Object.keys(e13).length)
                return false;
              for (n9 in t6)
                if (i6 = t6[n9], i6 !== e13[n9])
                  return false;
              return true;
            } });
          }.call(this), function() {
            var t6 = [].slice;
            e12.extend({ arraysAreEqual: function(t7, e13) {
              var n9, i6, o11, r7;
              if (null == t7 && (t7 = []), null == e13 && (e13 = []), t7.length !== e13.length)
                return false;
              for (i6 = n9 = 0, o11 = t7.length; o11 > n9; i6 = ++n9)
                if (r7 = t7[i6], r7 !== e13[i6])
                  return false;
              return true;
            }, arrayStartsWith: function(t7, n9) {
              return null == t7 && (t7 = []), null == n9 && (n9 = []), e12.arraysAreEqual(t7.slice(0, n9.length), n9);
            }, spliceArray: function() {
              var e13, n9, i6;
              return n9 = arguments[0], e13 = 2 <= arguments.length ? t6.call(arguments, 1) : [], i6 = n9.slice(0), i6.splice.apply(i6, e13), i6;
            }, summarizeArrayChange: function(t7, e13) {
              var n9, i6, o11, r7, s8, a4, u4, c6, l9, h6, p3;
              for (null == t7 && (t7 = []), null == e13 && (e13 = []), n9 = [], h6 = [], o11 = /* @__PURE__ */ new Set(), r7 = 0, u4 = t7.length; u4 > r7; r7++)
                p3 = t7[r7], o11.add(p3);
              for (i6 = /* @__PURE__ */ new Set(), s8 = 0, c6 = e13.length; c6 > s8; s8++)
                p3 = e13[s8], i6.add(p3), o11.has(p3) || n9.push(p3);
              for (a4 = 0, l9 = t7.length; l9 > a4; a4++)
                p3 = t7[a4], i6.has(p3) || h6.push(p3);
              return { added: n9, removed: h6 };
            } });
          }.call(this), function() {
            var t6, n9, i6, o11;
            t6 = null, n9 = null, o11 = null, i6 = null, e12.extend({ getAllAttributeNames: function() {
              return null != t6 ? t6 : t6 = e12.getTextAttributeNames().concat(e12.getBlockAttributeNames());
            }, getBlockConfig: function(t7) {
              return e12.config.blockAttributes[t7];
            }, getBlockAttributeNames: function() {
              return null != n9 ? n9 : n9 = Object.keys(e12.config.blockAttributes);
            }, getTextConfig: function(t7) {
              return e12.config.textAttributes[t7];
            }, getTextAttributeNames: function() {
              return null != o11 ? o11 : o11 = Object.keys(e12.config.textAttributes);
            }, getListAttributeNames: function() {
              var t7, n10;
              return null != i6 ? i6 : i6 = function() {
                var i7, o12;
                i7 = e12.config.blockAttributes, o12 = [];
                for (t7 in i7)
                  n10 = i7[t7].listAttribute, null != n10 && o12.push(n10);
                return o12;
              }();
            } });
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = document.documentElement, n9 = null != (i6 = null != (o11 = null != (r7 = t6.matchesSelector) ? r7 : t6.webkitMatchesSelector) ? o11 : t6.msMatchesSelector) ? i6 : t6.mozMatchesSelector, e12.extend({ handleEvent: function(n10, i7) {
              var o12, r8, s9, a4, u4, c6, l9, h6, p3, d3, f3, g2;
              return h6 = null != i7 ? i7 : {}, c6 = h6.onElement, u4 = h6.matchingSelector, g2 = h6.withCallback, a4 = h6.inPhase, l9 = h6.preventDefault, d3 = h6.times, r8 = null != c6 ? c6 : t6, p3 = u4, o12 = g2, f3 = "capturing" === a4, s9 = function(t7) {
                var n11;
                return null != d3 && 0 === --d3 && s9.destroy(), n11 = e12.findClosestElementFromNode(t7.target, { matchingSelector: p3 }), null != n11 && (null != g2 && g2.call(n11, t7, n11), l9) ? t7.preventDefault() : void 0;
              }, s9.destroy = function() {
                return r8.removeEventListener(n10, s9, f3);
              }, r8.addEventListener(n10, s9, f3), s9;
            }, handleEventOnce: function(t7, n10) {
              return null == n10 && (n10 = {}), n10.times = 1, e12.handleEvent(t7, n10);
            }, triggerEvent: function(n10, i7) {
              var o12, r8, s9, a4, u4, c6, l9;
              return l9 = null != i7 ? i7 : {}, c6 = l9.onElement, r8 = l9.bubbles, s9 = l9.cancelable, o12 = l9.attributes, a4 = null != c6 ? c6 : t6, r8 = r8 !== false, s9 = s9 !== false, u4 = document.createEvent("Events"), u4.initEvent(n10, r8, s9), null != o12 && e12.extend.call(u4, o12), a4.dispatchEvent(u4);
            }, elementMatchesSelector: function(t7, e13) {
              return 1 === (null != t7 ? t7.nodeType : void 0) ? n9.call(t7, e13) : void 0;
            }, findClosestElementFromNode: function(t7, n10) {
              var i7, o12, r8;
              for (o12 = null != n10 ? n10 : {}, i7 = o12.matchingSelector, r8 = o12.untilNode; null != t7 && t7.nodeType !== Node.ELEMENT_NODE; )
                t7 = t7.parentNode;
              if (null != t7) {
                if (null == i7)
                  return t7;
                if (t7.closest && null == r8)
                  return t7.closest(i7);
                for (; t7 && t7 !== r8; ) {
                  if (e12.elementMatchesSelector(t7, i7))
                    return t7;
                  t7 = t7.parentNode;
                }
              }
            }, findInnerElement: function(t7) {
              for (; null != t7 ? t7.firstElementChild : void 0; )
                t7 = t7.firstElementChild;
              return t7;
            }, innerElementIsActive: function(t7) {
              return document.activeElement !== t7 && e12.elementContainsNode(t7, document.activeElement);
            }, elementContainsNode: function(t7, e13) {
              if (t7 && e13)
                for (; e13; ) {
                  if (e13 === t7)
                    return true;
                  e13 = e13.parentNode;
                }
            }, findNodeFromContainerAndOffset: function(t7, e13) {
              var n10;
              if (t7)
                return t7.nodeType === Node.TEXT_NODE ? t7 : 0 === e13 ? null != (n10 = t7.firstChild) ? n10 : t7 : t7.childNodes.item(e13 - 1);
            }, findElementFromContainerAndOffset: function(t7, n10) {
              var i7;
              return i7 = e12.findNodeFromContainerAndOffset(t7, n10), e12.findClosestElementFromNode(i7);
            }, findChildIndexOfNode: function(t7) {
              var e13;
              if (null != t7 ? t7.parentNode : void 0) {
                for (e13 = 0; t7 = t7.previousSibling; )
                  e13++;
                return e13;
              }
            }, removeNode: function(t7) {
              var e13;
              return null != t7 && null != (e13 = t7.parentNode) ? e13.removeChild(t7) : void 0;
            }, walkTree: function(t7, e13) {
              var n10, i7, o12, r8, s9;
              return o12 = null != e13 ? e13 : {}, i7 = o12.onlyNodesOfType, r8 = o12.usingFilter, n10 = o12.expandEntityReferences, s9 = function() {
                switch (i7) {
                  case "element":
                    return NodeFilter.SHOW_ELEMENT;
                  case "text":
                    return NodeFilter.SHOW_TEXT;
                  case "comment":
                    return NodeFilter.SHOW_COMMENT;
                  default:
                    return NodeFilter.SHOW_ALL;
                }
              }(), document.createTreeWalker(t7, s9, null != r8 ? r8 : null, n10 === true);
            }, tagName: function(t7) {
              var e13;
              return null != t7 && null != (e13 = t7.tagName) ? e13.toLowerCase() : void 0;
            }, makeElement: function(t7, e13) {
              var n10, i7, o12, r8, s9, a4, u4, c6, l9, h6, p3, d3, f3, g2;
              if (null == e13 && (e13 = {}), "object" == typeof t7 ? (e13 = t7, t7 = e13.tagName) : e13 = { attributes: e13 }, o12 = document.createElement(t7), null != e13.editable && (null == e13.attributes && (e13.attributes = {}), e13.attributes.contenteditable = e13.editable), e13.attributes) {
                l9 = e13.attributes;
                for (a4 in l9)
                  g2 = l9[a4], o12.setAttribute(a4, g2);
              }
              if (e13.style) {
                h6 = e13.style;
                for (a4 in h6)
                  g2 = h6[a4], o12.style[a4] = g2;
              }
              if (e13.data) {
                p3 = e13.data;
                for (a4 in p3)
                  g2 = p3[a4], o12.dataset[a4] = g2;
              }
              if (e13.className)
                for (d3 = e13.className.split(" "), r8 = 0, u4 = d3.length; u4 > r8; r8++)
                  i7 = d3[r8], o12.classList.add(i7);
              if (e13.textContent && (o12.textContent = e13.textContent), e13.childNodes)
                for (f3 = [].concat(e13.childNodes), s9 = 0, c6 = f3.length; c6 > s9; s9++)
                  n10 = f3[s9], o12.appendChild(n10);
              return o12;
            }, getBlockTagNames: function() {
              var t7, n10;
              return null != e12.blockTagNames ? e12.blockTagNames : e12.blockTagNames = function() {
                var i7, o12;
                i7 = e12.config.blockAttributes, o12 = [];
                for (t7 in i7)
                  n10 = i7[t7].tagName, n10 && o12.push(n10);
                return o12;
              }();
            }, nodeIsBlockContainer: function(t7) {
              return e12.nodeIsBlockStartComment(null != t7 ? t7.firstChild : void 0);
            }, nodeProbablyIsBlockContainer: function(t7) {
              var n10, i7;
              return n10 = e12.tagName(t7), s8.call(e12.getBlockTagNames(), n10) >= 0 && (i7 = e12.tagName(t7.firstChild), s8.call(e12.getBlockTagNames(), i7) < 0);
            }, nodeIsBlockStart: function(t7, n10) {
              var i7;
              return i7 = (null != n10 ? n10 : { strict: true }).strict, i7 ? e12.nodeIsBlockStartComment(t7) : e12.nodeIsBlockStartComment(t7) || !e12.nodeIsBlockStartComment(t7.firstChild) && e12.nodeProbablyIsBlockContainer(t7);
            }, nodeIsBlockStartComment: function(t7) {
              return e12.nodeIsCommentNode(t7) && "block" === (null != t7 ? t7.data : void 0);
            }, nodeIsCommentNode: function(t7) {
              return (null != t7 ? t7.nodeType : void 0) === Node.COMMENT_NODE;
            }, nodeIsCursorTarget: function(t7, n10) {
              var i7;
              return i7 = (null != n10 ? n10 : {}).name, t7 ? e12.nodeIsTextNode(t7) ? t7.data === e12.ZERO_WIDTH_SPACE ? i7 ? t7.parentNode.dataset.trixCursorTarget === i7 : true : void 0 : e12.nodeIsCursorTarget(t7.firstChild) : void 0;
            }, nodeIsAttachmentElement: function(t7) {
              return e12.elementMatchesSelector(t7, e12.AttachmentView.attachmentSelector);
            }, nodeIsEmptyTextNode: function(t7) {
              return e12.nodeIsTextNode(t7) && "" === (null != t7 ? t7.data : void 0);
            }, nodeIsTextNode: function(t7) {
              return (null != t7 ? t7.nodeType : void 0) === Node.TEXT_NODE;
            } });
          }.call(this), function() {
            var t6, n9, i6, o11, r7;
            t6 = e12.copyObject, o11 = e12.objectsAreEqual, e12.extend({ normalizeRange: i6 = function(t7) {
              var e13;
              if (null != t7)
                return Array.isArray(t7) || (t7 = [t7, t7]), [n9(t7[0]), n9(null != (e13 = t7[1]) ? e13 : t7[0])];
            }, rangeIsCollapsed: function(t7) {
              var e13, n10, o12;
              if (null != t7)
                return n10 = i6(t7), o12 = n10[0], e13 = n10[1], r7(o12, e13);
            }, rangesAreEqual: function(t7, e13) {
              var n10, o12, s8, a4, u4, c6;
              if (null != t7 && null != e13)
                return s8 = i6(t7), o12 = s8[0], n10 = s8[1], a4 = i6(e13), c6 = a4[0], u4 = a4[1], r7(o12, c6) && r7(n10, u4);
            } }), n9 = function(e13) {
              return "number" == typeof e13 ? e13 : t6(e13);
            }, r7 = function(t7, e13) {
              return "number" == typeof t7 ? t7 === e13 : o11(t7, e13);
            };
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4;
            e12.registerElement = function(t7, e13) {
              var n10, i7;
              return null == e13 && (e13 = {}), t7 = t7.toLowerCase(), e13 = a4(e13), i7 = s8(e13), (n10 = i7.defaultCSS) && (delete i7.defaultCSS, o11(n10, t7)), r7(t7, i7);
            }, o11 = function(t7, e13) {
              var n10;
              return n10 = i6(e13), n10.textContent = t7.replace(/%t/g, e13);
            }, i6 = function(e13) {
              var n10, i7;
              return n10 = document.createElement("style"), n10.setAttribute("type", "text/css"), n10.setAttribute("data-tag-name", e13.toLowerCase()), (i7 = t6()) && n10.setAttribute("nonce", i7), document.head.insertBefore(n10, document.head.firstChild), n10;
            }, t6 = function() {
              var t7;
              return (t7 = n9("trix-csp-nonce") || n9("csp-nonce")) ? t7.getAttribute("content") : void 0;
            }, n9 = function(t7) {
              return document.head.querySelector("meta[name=" + t7 + "]");
            }, s8 = function(t7) {
              var e13, n10, i7;
              n10 = {};
              for (e13 in t7)
                i7 = t7[e13], n10[e13] = "function" == typeof i7 ? { value: i7 } : i7;
              return n10;
            }, a4 = function() {
              var t7;
              return t7 = function(t8) {
                var e13, n10, i7, o12, r8;
                for (e13 = {}, r8 = ["initialize", "connect", "disconnect"], n10 = 0, o12 = r8.length; o12 > n10; n10++)
                  i7 = r8[n10], e13[i7] = t8[i7], delete t8[i7];
                return e13;
              }, window.customElements ? function(e13) {
                var n10, i7, o12, r8, s9;
                return s9 = t7(e13), o12 = s9.initialize, n10 = s9.connect, i7 = s9.disconnect, o12 && (r8 = n10, n10 = function() {
                  return this.initialized || (this.initialized = true, o12.call(this)), null != r8 ? r8.call(this) : void 0;
                }), n10 && (e13.connectedCallback = n10), i7 && (e13.disconnectedCallback = i7), e13;
              } : function(e13) {
                var n10, i7, o12, r8;
                return r8 = t7(e13), o12 = r8.initialize, n10 = r8.connect, i7 = r8.disconnect, o12 && (e13.createdCallback = o12), n10 && (e13.attachedCallback = n10), i7 && (e13.detachedCallback = i7), e13;
              };
            }(), r7 = function() {
              return window.customElements ? function(t7, e13) {
                var n10;
                return n10 = function() {
                  return "object" == typeof Reflect ? Reflect.construct(HTMLElement, [], n10) : HTMLElement.apply(this);
                }, Object.setPrototypeOf(n10.prototype, HTMLElement.prototype), Object.setPrototypeOf(n10, HTMLElement), Object.defineProperties(n10.prototype, e13), window.customElements.define(t7, n10), n10;
              } : function(t7, e13) {
                var n10, i7;
                return i7 = Object.create(HTMLElement.prototype, e13), n10 = document.registerElement(t7, { prototype: i7 }), Object.defineProperty(i7, "constructor", { value: n10 }), n10;
              };
            }();
          }.call(this), function() {
            var t6, n9;
            e12.extend({ getDOMSelection: function() {
              var t7;
              return t7 = window.getSelection(), t7.rangeCount > 0 ? t7 : void 0;
            }, getDOMRange: function() {
              var n10, i6;
              return (n10 = null != (i6 = e12.getDOMSelection()) ? i6.getRangeAt(0) : void 0) && !t6(n10) ? n10 : void 0;
            }, setDOMRange: function(t7) {
              var n10;
              return n10 = window.getSelection(), n10.removeAllRanges(), n10.addRange(t7), e12.selectionChangeObserver.update();
            } }), t6 = function(t7) {
              return n9(t7.startContainer) || n9(t7.endContainer);
            }, n9 = function(t7) {
              return !Object.getPrototypeOf(t7);
            };
          }.call(this), function() {
            var t6;
            t6 = { "application/x-trix-feature-detection": "test" }, e12.extend({ dataTransferIsPlainText: function(t7) {
              var e13, n9, i6;
              return i6 = t7.getData("text/plain"), n9 = t7.getData("text/html"), i6 && n9 ? (e13 = new DOMParser().parseFromString(n9, "text/html").body, e13.textContent === i6 ? !e13.querySelector("*") : void 0) : null != i6 ? i6.length : void 0;
            }, dataTransferIsWritable: function(e13) {
              var n9, i6;
              if (null != (null != e13 ? e13.setData : void 0)) {
                for (n9 in t6)
                  if (i6 = t6[n9], !function() {
                    try {
                      return e13.setData(n9, i6), e13.getData(n9) === i6;
                    } catch (t7) {
                    }
                  }())
                    return;
                return true;
              }
            }, keyEventIsKeyboardCommand: function() {
              return /Mac|^iP/.test(navigator.platform) ? function(t7) {
                return t7.metaKey;
              } : function(t7) {
                return t7.ctrlKey;
              };
            }() });
          }.call(this), function() {
            e12.extend({ RTL_PATTERN: /[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/, getDirection: function() {
              var t6, n9, i6, o11;
              return n9 = e12.makeElement("input", { dir: "auto", name: "x", dirName: "x.dir" }), t6 = e12.makeElement("form"), t6.appendChild(n9), i6 = function() {
                try {
                  return new FormData(t6).has(n9.dirName);
                } catch (e13) {
                }
              }(), o11 = function() {
                try {
                  return n9.matches(":dir(ltr),:dir(rtl)");
                } catch (t7) {
                }
              }(), i6 ? function(e13) {
                return n9.value = e13, new FormData(t6).get(n9.dirName);
              } : o11 ? function(t7) {
                return n9.value = t7, n9.matches(":dir(rtl)") ? "rtl" : "ltr";
              } : function(t7) {
                var n10;
                return n10 = t7.trim().charAt(0), e12.RTL_PATTERN.test(n10) ? "rtl" : "ltr";
              };
            }() });
          }.call(this), function() {
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                i6.call(e13, o11) && (t7[o11] = e13[o11]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, i6 = {}.hasOwnProperty;
            t6 = e12.arraysAreEqual, e12.Hash = function(i7) {
              function o11(t7) {
                null == t7 && (t7 = {}), this.values = s8(t7), o11.__super__.constructor.apply(this, arguments);
              }
              var r7, s8, a4, u4, c6;
              return n9(o11, i7), o11.fromCommonAttributesOfObjects = function(t7) {
                var e13, n10, i8, o12, s9, a5;
                if (null == t7 && (t7 = []), !t7.length)
                  return new this();
                for (e13 = r7(t7[0]), i8 = e13.getKeys(), a5 = t7.slice(1), n10 = 0, o12 = a5.length; o12 > n10; n10++)
                  s9 = a5[n10], i8 = e13.getKeysCommonToHash(r7(s9)), e13 = e13.slice(i8);
                return e13;
              }, o11.box = function(t7) {
                return r7(t7);
              }, o11.prototype.add = function(t7, e13) {
                return this.merge(u4(t7, e13));
              }, o11.prototype.remove = function(t7) {
                return new e12.Hash(s8(this.values, t7));
              }, o11.prototype.get = function(t7) {
                return this.values[t7];
              }, o11.prototype.has = function(t7) {
                return t7 in this.values;
              }, o11.prototype.merge = function(t7) {
                return new e12.Hash(a4(this.values, c6(t7)));
              }, o11.prototype.slice = function(t7) {
                var n10, i8, o12, r8;
                for (r8 = {}, n10 = 0, o12 = t7.length; o12 > n10; n10++)
                  i8 = t7[n10], this.has(i8) && (r8[i8] = this.values[i8]);
                return new e12.Hash(r8);
              }, o11.prototype.getKeys = function() {
                return Object.keys(this.values);
              }, o11.prototype.getKeysCommonToHash = function(t7) {
                var e13, n10, i8, o12, s9;
                for (t7 = r7(t7), o12 = this.getKeys(), s9 = [], e13 = 0, i8 = o12.length; i8 > e13; e13++)
                  n10 = o12[e13], this.values[n10] === t7.values[n10] && s9.push(n10);
                return s9;
              }, o11.prototype.isEqualTo = function(e13) {
                return t6(this.toArray(), r7(e13).toArray());
              }, o11.prototype.isEmpty = function() {
                return 0 === this.getKeys().length;
              }, o11.prototype.toArray = function() {
                var t7, e13, n10;
                return (null != this.array ? this.array : this.array = function() {
                  var i8;
                  e13 = [], i8 = this.values;
                  for (t7 in i8)
                    n10 = i8[t7], e13.push(t7, n10);
                  return e13;
                }.call(this)).slice(0);
              }, o11.prototype.toObject = function() {
                return s8(this.values);
              }, o11.prototype.toJSON = function() {
                return this.toObject();
              }, o11.prototype.contentsForInspection = function() {
                return { values: JSON.stringify(this.values) };
              }, u4 = function(t7, e13) {
                var n10;
                return n10 = {}, n10[t7] = e13, n10;
              }, a4 = function(t7, e13) {
                var n10, i8, o12;
                i8 = s8(t7);
                for (n10 in e13)
                  o12 = e13[n10], i8[n10] = o12;
                return i8;
              }, s8 = function(t7, e13) {
                var n10, i8, o12, r8, s9;
                for (r8 = {}, s9 = Object.keys(t7).sort(), n10 = 0, o12 = s9.length; o12 > n10; n10++)
                  i8 = s9[n10], i8 !== e13 && (r8[i8] = t7[i8]);
                return r8;
              }, r7 = function(t7) {
                return t7 instanceof e12.Hash ? t7 : new e12.Hash(t7);
              }, c6 = function(t7) {
                return t7 instanceof e12.Hash ? t7.values : t7;
              }, o11;
            }(e12.Object);
          }.call(this), function() {
            e12.ObjectGroup = function() {
              function t6(t7, e13) {
                var n9, i6;
                this.objects = null != t7 ? t7 : [], i6 = e13.depth, n9 = e13.asTree, n9 && (this.depth = i6, this.objects = this.constructor.groupObjects(this.objects, { asTree: n9, depth: this.depth + 1 }));
              }
              return t6.groupObjects = function(t7, e13) {
                var n9, i6, o11, r7, s8, a4, u4, c6, l9;
                for (null == t7 && (t7 = []), l9 = null != e13 ? e13 : {}, o11 = l9.depth, n9 = l9.asTree, n9 && null == o11 && (o11 = 0), c6 = [], s8 = 0, a4 = t7.length; a4 > s8; s8++) {
                  if (u4 = t7[s8], r7) {
                    if (("function" == typeof u4.canBeGrouped ? u4.canBeGrouped(o11) : void 0) && ("function" == typeof (i6 = r7[r7.length - 1]).canBeGroupedWith ? i6.canBeGroupedWith(u4, o11) : void 0)) {
                      r7.push(u4);
                      continue;
                    }
                    c6.push(new this(r7, { depth: o11, asTree: n9 })), r7 = null;
                  }
                  ("function" == typeof u4.canBeGrouped ? u4.canBeGrouped(o11) : void 0) ? r7 = [u4] : c6.push(u4);
                }
                return r7 && c6.push(new this(r7, { depth: o11, asTree: n9 })), c6;
              }, t6.prototype.getObjects = function() {
                return this.objects;
              }, t6.prototype.getDepth = function() {
                return this.depth;
              }, t6.prototype.getCacheKey = function() {
                var t7, e13, n9, i6, o11;
                for (e13 = ["objectGroup"], o11 = this.getObjects(), t7 = 0, n9 = o11.length; n9 > t7; t7++)
                  i6 = o11[t7], e13.push(i6.getCacheKey());
                return e13.join("/");
              }, t6;
            }();
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.ObjectMap = function(e13) {
              function n10(t7) {
                var e14, n11, i6, o11, r7;
                for (null == t7 && (t7 = []), this.objects = {}, i6 = 0, o11 = t7.length; o11 > i6; i6++)
                  r7 = t7[i6], n11 = JSON.stringify(r7), null == (e14 = this.objects)[n11] && (e14[n11] = r7);
              }
              return t6(n10, e13), n10.prototype.find = function(t7) {
                var e14;
                return e14 = JSON.stringify(t7), this.objects[e14];
              }, n10;
            }(e12.BasicObject);
          }.call(this), function() {
            e12.ElementStore = function() {
              function t6(t7) {
                this.reset(t7);
              }
              var e13;
              return t6.prototype.add = function(t7) {
                var n9;
                return n9 = e13(t7), this.elements[n9] = t7;
              }, t6.prototype.remove = function(t7) {
                var n9, i6;
                return n9 = e13(t7), (i6 = this.elements[n9]) ? (delete this.elements[n9], i6) : void 0;
              }, t6.prototype.reset = function(t7) {
                var e14, n9, i6;
                for (null == t7 && (t7 = []), this.elements = {}, n9 = 0, i6 = t7.length; i6 > n9; n9++)
                  e14 = t7[n9], this.add(e14);
                return t7;
              }, e13 = function(t7) {
                return t7.dataset.trixStoreKey;
              }, t6;
            }();
          }.call(this), function() {
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Operation = function(e13) {
              function n10() {
                return n10.__super__.constructor.apply(this, arguments);
              }
              return t6(n10, e13), n10.prototype.isPerforming = function() {
                return this.performing === true;
              }, n10.prototype.hasPerformed = function() {
                return this.performed === true;
              }, n10.prototype.hasSucceeded = function() {
                return this.performed && this.succeeded;
              }, n10.prototype.hasFailed = function() {
                return this.performed && !this.succeeded;
              }, n10.prototype.getPromise = function() {
                return null != this.promise ? this.promise : this.promise = new Promise(function(t7) {
                  return function(e14, n11) {
                    return t7.performing = true, t7.perform(function(i6, o11) {
                      return t7.succeeded = i6, t7.performing = false, t7.performed = true, t7.succeeded ? e14(o11) : n11(o11);
                    });
                  };
                }(this));
              }, n10.prototype.perform = function(t7) {
                return t7(false);
              }, n10.prototype.release = function() {
                var t7;
                return null != (t7 = this.promise) && "function" == typeof t7.cancel && t7.cancel(), this.promise = null, this.performing = null, this.performed = null, this.succeeded = null;
              }, n10.proxyMethod("getPromise().then"), n10.proxyMethod("getPromise().catch"), n10;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                a4.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, a4 = {}.hasOwnProperty;
            e12.UTF16String = function(t7) {
              function e13(t8, e14) {
                this.ucs2String = t8, this.codepoints = e14, this.length = this.codepoints.length, this.ucs2Length = this.ucs2String.length;
              }
              return s8(e13, t7), e13.box = function(t8) {
                return null == t8 && (t8 = ""), t8 instanceof this ? t8 : this.fromUCS2String(null != t8 ? t8.toString() : void 0);
              }, e13.fromUCS2String = function(t8) {
                return new this(t8, o11(t8));
              }, e13.fromCodepoints = function(t8) {
                return new this(r7(t8), t8);
              }, e13.prototype.offsetToUCS2Offset = function(t8) {
                return r7(this.codepoints.slice(0, Math.max(0, t8))).length;
              }, e13.prototype.offsetFromUCS2Offset = function(t8) {
                return o11(this.ucs2String.slice(0, Math.max(0, t8))).length;
              }, e13.prototype.slice = function() {
                var t8;
                return this.constructor.fromCodepoints((t8 = this.codepoints).slice.apply(t8, arguments));
              }, e13.prototype.charAt = function(t8) {
                return this.slice(t8, t8 + 1);
              }, e13.prototype.isEqualTo = function(t8) {
                return this.constructor.box(t8).ucs2String === this.ucs2String;
              }, e13.prototype.toJSON = function() {
                return this.ucs2String;
              }, e13.prototype.getCacheKey = function() {
                return this.ucs2String;
              }, e13.prototype.toString = function() {
                return this.ucs2String;
              }, e13;
            }(e12.BasicObject), t6 = 1 === ("function" == typeof Array.from ? Array.from("\u{1F47C}").length : void 0), n9 = null != ("function" == typeof " ".codePointAt ? " ".codePointAt(0) : void 0), i6 = " \u{1F47C}" === ("function" == typeof String.fromCodePoint ? String.fromCodePoint(32, 128124) : void 0), o11 = t6 && n9 ? function(t7) {
              return Array.from(t7).map(function(t8) {
                return t8.codePointAt(0);
              });
            } : function(t7) {
              var e13, n10, i7, o12, r8;
              for (o12 = [], e13 = 0, i7 = t7.length; i7 > e13; )
                r8 = t7.charCodeAt(e13++), r8 >= 55296 && 56319 >= r8 && i7 > e13 && (n10 = t7.charCodeAt(e13++), 56320 === (64512 & n10) ? r8 = ((1023 & r8) << 10) + (1023 & n10) + 65536 : e13--), o12.push(r8);
              return o12;
            }, r7 = i6 ? function(t7) {
              return String.fromCodePoint.apply(String, t7);
            } : function(t7) {
              var e13, n10, i7;
              return e13 = function() {
                var e14, o12, r8;
                for (r8 = [], e14 = 0, o12 = t7.length; o12 > e14; e14++)
                  i7 = t7[e14], n10 = "", i7 > 65535 && (i7 -= 65536, n10 += String.fromCharCode(i7 >>> 10 & 1023 | 55296), i7 = 56320 | 1023 & i7), r8.push(n10 + String.fromCharCode(i7));
                return r8;
              }(), e13.join("");
            };
          }.call(this), function() {
          }.call(this), function() {
          }.call(this), function() {
            e12.config.lang = { attachFiles: "Attach Files", bold: "Bold", bullets: "Bullets", "byte": "Byte", bytes: "Bytes", captionPlaceholder: "Add a caption\u2026", code: "Code", heading1: "Heading", indent: "Increase Level", italic: "Italic", link: "Link", numbers: "Numbers", outdent: "Decrease Level", quote: "Quote", redo: "Redo", remove: "Remove", strike: "Strikethrough", undo: "Undo", unlink: "Unlink", url: "URL", urlPlaceholder: "Enter a URL\u2026", GB: "GB", KB: "KB", MB: "MB", PB: "PB", TB: "TB" };
          }.call(this), function() {
            e12.config.css = { attachment: "attachment", attachmentCaption: "attachment__caption", attachmentCaptionEditor: "attachment__caption-editor", attachmentMetadata: "attachment__metadata", attachmentMetadataContainer: "attachment__metadata-container", attachmentName: "attachment__name", attachmentProgress: "attachment__progress", attachmentSize: "attachment__size", attachmentToolbar: "attachment__toolbar", attachmentGallery: "attachment-gallery" };
          }.call(this), function() {
            var t6;
            e12.config.blockAttributes = t6 = { "default": { tagName: "div", parse: false }, quote: { tagName: "blockquote", nestable: true }, heading1: { tagName: "h1", terminal: true, breakOnReturn: true, group: false }, code: { tagName: "pre", terminal: true, text: { plaintext: true } }, bulletList: { tagName: "ul", parse: false }, bullet: { tagName: "li", listAttribute: "bulletList", group: false, nestable: true, test: function(n9) {
              return e12.tagName(n9.parentNode) === t6[this.listAttribute].tagName;
            } }, numberList: { tagName: "ol", parse: false }, number: { tagName: "li", listAttribute: "numberList", group: false, nestable: true, test: function(n9) {
              return e12.tagName(n9.parentNode) === t6[this.listAttribute].tagName;
            } }, attachmentGallery: { tagName: "div", exclusive: true, terminal: true, parse: false, group: false } };
          }.call(this), function() {
            var t6, n9;
            t6 = e12.config.lang, n9 = [t6.bytes, t6.KB, t6.MB, t6.GB, t6.TB, t6.PB], e12.config.fileSize = { prefix: "IEC", precision: 2, formatter: function(e13) {
              var i6, o11, r7, s8, a4;
              switch (e13) {
                case 0:
                  return "0 " + t6.bytes;
                case 1:
                  return "1 " + t6.byte;
                default:
                  return i6 = function() {
                    switch (this.prefix) {
                      case "SI":
                        return 1e3;
                      case "IEC":
                        return 1024;
                    }
                  }.call(this), o11 = Math.floor(Math.log(e13) / Math.log(i6)), r7 = e13 / Math.pow(i6, o11), s8 = r7.toFixed(this.precision), a4 = s8.replace(/0*$/, "").replace(/\.$/, ""), a4 + " " + n9[o11];
              }
            } };
          }.call(this), function() {
            e12.config.textAttributes = { bold: { tagName: "strong", inheritable: true, parser: function(t6) {
              var e13;
              return e13 = window.getComputedStyle(t6), "bold" === e13.fontWeight || e13.fontWeight >= 600;
            } }, italic: { tagName: "em", inheritable: true, parser: function(t6) {
              var e13;
              return e13 = window.getComputedStyle(t6), "italic" === e13.fontStyle;
            } }, href: { groupTagName: "a", parser: function(t6) {
              var n9, i6, o11;
              return n9 = e12.AttachmentView.attachmentSelector, o11 = "a:not(" + n9 + ")", (i6 = e12.findClosestElementFromNode(t6, { matchingSelector: o11 })) ? i6.getAttribute("href") : void 0;
            } }, strike: { tagName: "del", inheritable: true }, frozen: { style: { backgroundColor: "highlight" } } };
          }.call(this), function() {
            var t6, n9, i6, o11, r7;
            r7 = "[data-trix-serialize=false]", o11 = ["contenteditable", "data-trix-id", "data-trix-store-key", "data-trix-mutable", "data-trix-placeholder", "tabindex"], n9 = "data-trix-serialized-attributes", i6 = "[" + n9 + "]", t6 = new RegExp("<!--block-->", "g"), e12.extend({ serializers: { "application/json": function(t7) {
              var n10;
              if (t7 instanceof e12.Document)
                n10 = t7;
              else {
                if (!(t7 instanceof HTMLElement))
                  throw new Error("unserializable object");
                n10 = e12.Document.fromHTML(t7.innerHTML);
              }
              return n10.toSerializableDocument().toJSONString();
            }, "text/html": function(s8) {
              var a4, u4, c6, l9, h6, p3, d3, f3, g2, m3, v2, y2, b2, A2, C2, x2, w2;
              if (s8 instanceof e12.Document)
                l9 = e12.DocumentView.render(s8);
              else {
                if (!(s8 instanceof HTMLElement))
                  throw new Error("unserializable object");
                l9 = s8.cloneNode(true);
              }
              for (A2 = l9.querySelectorAll(r7), h6 = 0, g2 = A2.length; g2 > h6; h6++)
                c6 = A2[h6], e12.removeNode(c6);
              for (p3 = 0, m3 = o11.length; m3 > p3; p3++)
                for (a4 = o11[p3], C2 = l9.querySelectorAll("[" + a4 + "]"), d3 = 0, v2 = C2.length; v2 > d3; d3++)
                  c6 = C2[d3], c6.removeAttribute(a4);
              for (x2 = l9.querySelectorAll(i6), f3 = 0, y2 = x2.length; y2 > f3; f3++) {
                c6 = x2[f3];
                try {
                  u4 = JSON.parse(c6.getAttribute(n9)), c6.removeAttribute(n9);
                  for (b2 in u4)
                    w2 = u4[b2], c6.setAttribute(b2, w2);
                } catch (E2) {
                }
              }
              return l9.innerHTML.replace(t6, "");
            } }, deserializers: { "application/json": function(t7) {
              return e12.Document.fromJSONString(t7);
            }, "text/html": function(t7) {
              return e12.Document.fromHTML(t7);
            } }, serializeToContentType: function(t7, n10) {
              var i7;
              if (i7 = e12.serializers[n10])
                return i7(t7);
              throw new Error("unknown content type: " + n10);
            }, deserializeFromContentType: function(t7, n10) {
              var i7;
              if (i7 = e12.deserializers[n10])
                return i7(t7);
              throw new Error("unknown content type: " + n10);
            } });
          }.call(this), function() {
            var t6;
            t6 = e12.config.lang, e12.config.toolbar = { getDefaultHTML: function() {
              return '<div class="trix-button-row">\n  <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="' + t6.bold + '" tabindex="-1">' + t6.bold + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="' + t6.italic + '" tabindex="-1">' + t6.italic + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="' + t6.strike + '" tabindex="-1">' + t6.strike + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="' + t6.link + '" tabindex="-1">' + t6.link + '</button>\n  </span>\n\n  <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="' + t6.heading1 + '" tabindex="-1">' + t6.heading1 + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="' + t6.quote + '" tabindex="-1">' + t6.quote + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="' + t6.code + '" tabindex="-1">' + t6.code + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="' + t6.bullets + '" tabindex="-1">' + t6.bullets + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="' + t6.numbers + '" tabindex="-1">' + t6.numbers + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="' + t6.outdent + '" tabindex="-1">' + t6.outdent + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="' + t6.indent + '" tabindex="-1">' + t6.indent + '</button>\n  </span>\n\n  <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="' + t6.attachFiles + '" tabindex="-1">' + t6.attachFiles + '</button>\n  </span>\n\n  <span class="trix-button-group-spacer"></span>\n\n  <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="' + t6.undo + '" tabindex="-1">' + t6.undo + '</button>\n    <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="' + t6.redo + '" tabindex="-1">' + t6.redo + '</button>\n  </span>\n</div>\n\n<div class="trix-dialogs" data-trix-dialogs>\n  <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">\n    <div class="trix-dialog__link-fields">\n      <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="' + t6.urlPlaceholder + '" aria-label="' + t6.url + '" required data-trix-input>\n      <div class="trix-button-group">\n        <input type="button" class="trix-button trix-button--dialog" value="' + t6.link + '" data-trix-method="setAttribute">\n        <input type="button" class="trix-button trix-button--dialog" value="' + t6.unlink + '" data-trix-method="removeAttribute">\n      </div>\n    </div>\n  </div>\n</div>';
            } };
          }.call(this), function() {
            e12.config.undoInterval = 5e3;
          }.call(this), function() {
            e12.config.attachments = { preview: { presentation: "gallery", caption: { name: true, size: true } }, file: { caption: { size: true } } };
          }.call(this), function() {
            e12.config.keyNames = { 8: "backspace", 9: "tab", 13: "return", 27: "escape", 37: "left", 39: "right", 46: "delete", 68: "d", 72: "h", 79: "o" };
          }.call(this), function() {
            e12.config.input = { level2Enabled: true, getLevel: function() {
              return this.level2Enabled && e12.browser.supportsInputEvents ? 2 : 0;
            }, pickFiles: function(t6) {
              var n9;
              return n9 = e12.makeElement("input", { type: "file", multiple: true, hidden: true, id: this.fileInputId }), n9.addEventListener("change", function() {
                return t6(n9.files), e12.removeNode(n9);
              }), e12.removeNode(document.getElementById(this.fileInputId)), document.body.appendChild(n9), n9.click();
            }, fileInputId: "trix-file-input-" + Date.now().toString(16) };
          }.call(this), function() {
          }.call(this), function() {
            e12.registerElement("trix-toolbar", { defaultCSS: "%t {\n  display: block;\n}\n\n%t {\n  white-space: nowrap;\n}\n\n%t [data-trix-dialog] {\n  display: none;\n}\n\n%t [data-trix-dialog][data-trix-active] {\n  display: block;\n}\n\n%t [data-trix-dialog] [data-trix-validate]:invalid {\n  background-color: #ffdddd;\n}", initialize: function() {
              return "" === this.innerHTML ? this.innerHTML = e12.config.toolbar.getDefaultHTML() : void 0;
            } });
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i7() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i7.prototype = e13.prototype, t7.prototype = new i7(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty, i6 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            e12.ObjectView = function(n10) {
              function o11(t7, e13) {
                this.object = t7, this.options = null != e13 ? e13 : {}, this.childViews = [], this.rootView = this;
              }
              return t6(o11, n10), o11.prototype.getNodes = function() {
                var t7, e13, n11, i7, o12;
                for (null == this.nodes && (this.nodes = this.createNodes()), i7 = this.nodes, o12 = [], t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  n11 = i7[t7], o12.push(n11.cloneNode(true));
                return o12;
              }, o11.prototype.invalidate = function() {
                var t7;
                return this.nodes = null, this.childViews = [], null != (t7 = this.parentView) ? t7.invalidate() : void 0;
              }, o11.prototype.invalidateViewForObject = function(t7) {
                var e13;
                return null != (e13 = this.findViewForObject(t7)) ? e13.invalidate() : void 0;
              }, o11.prototype.findOrCreateCachedChildView = function(t7, e13) {
                var n11;
                return (n11 = this.getCachedViewForObject(e13)) ? this.recordChildView(n11) : (n11 = this.createChildView.apply(this, arguments), this.cacheViewForObject(n11, e13)), n11;
              }, o11.prototype.createChildView = function(t7, n11, i7) {
                var o12;
                return null == i7 && (i7 = {}), n11 instanceof e12.ObjectGroup && (i7.viewClass = t7, t7 = e12.ObjectGroupView), o12 = new t7(n11, i7), this.recordChildView(o12);
              }, o11.prototype.recordChildView = function(t7) {
                return t7.parentView = this, t7.rootView = this.rootView, this.childViews.push(t7), t7;
              }, o11.prototype.getAllChildViews = function() {
                var t7, e13, n11, i7, o12;
                for (o12 = [], i7 = this.childViews, e13 = 0, n11 = i7.length; n11 > e13; e13++)
                  t7 = i7[e13], o12.push(t7), o12 = o12.concat(t7.getAllChildViews());
                return o12;
              }, o11.prototype.findElement = function() {
                return this.findElementForObject(this.object);
              }, o11.prototype.findElementForObject = function(t7) {
                var e13;
                return (e13 = null != t7 ? t7.id : void 0) ? this.rootView.element.querySelector("[data-trix-id='" + e13 + "']") : void 0;
              }, o11.prototype.findViewForObject = function(t7) {
                var e13, n11, i7, o12;
                for (i7 = this.getAllChildViews(), e13 = 0, n11 = i7.length; n11 > e13; e13++)
                  if (o12 = i7[e13], o12.object === t7)
                    return o12;
              }, o11.prototype.getViewCache = function() {
                return this.rootView !== this ? this.rootView.getViewCache() : this.isViewCachingEnabled() ? null != this.viewCache ? this.viewCache : this.viewCache = {} : void 0;
              }, o11.prototype.isViewCachingEnabled = function() {
                return this.shouldCacheViews !== false;
              }, o11.prototype.enableViewCaching = function() {
                return this.shouldCacheViews = true;
              }, o11.prototype.disableViewCaching = function() {
                return this.shouldCacheViews = false;
              }, o11.prototype.getCachedViewForObject = function(t7) {
                var e13;
                return null != (e13 = this.getViewCache()) ? e13[t7.getCacheKey()] : void 0;
              }, o11.prototype.cacheViewForObject = function(t7, e13) {
                var n11;
                return null != (n11 = this.getViewCache()) ? n11[e13.getCacheKey()] = t7 : void 0;
              }, o11.prototype.garbageCollectCachedViews = function() {
                var t7, e13, n11, o12, r7, s8;
                if (t7 = this.getViewCache()) {
                  s8 = this.getAllChildViews().concat(this), n11 = function() {
                    var t8, e14, n12;
                    for (n12 = [], t8 = 0, e14 = s8.length; e14 > t8; t8++)
                      r7 = s8[t8], n12.push(r7.object.getCacheKey());
                    return n12;
                  }(), o12 = [];
                  for (e13 in t7)
                    i6.call(n11, e13) < 0 && o12.push(delete t7[e13]);
                  return o12;
                }
              }, o11;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.ObjectGroupView = function(e13) {
              function n10() {
                n10.__super__.constructor.apply(this, arguments), this.objectGroup = this.object, this.viewClass = this.options.viewClass, delete this.options.viewClass;
              }
              return t6(n10, e13), n10.prototype.getChildViews = function() {
                var t7, e14, n11, i6;
                if (!this.childViews.length)
                  for (i6 = this.objectGroup.getObjects(), t7 = 0, e14 = i6.length; e14 > t7; t7++)
                    n11 = i6[t7], this.findOrCreateCachedChildView(this.viewClass, n11, this.options);
                return this.childViews;
              }, n10.prototype.createNodes = function() {
                var t7, e14, n11, i6, o11, r7, s8, a4, u4;
                for (t7 = this.createContainerElement(), s8 = this.getChildViews(), e14 = 0, i6 = s8.length; i6 > e14; e14++)
                  for (u4 = s8[e14], a4 = u4.getNodes(), n11 = 0, o11 = a4.length; o11 > n11; n11++)
                    r7 = a4[n11], t7.appendChild(r7);
                return [t7];
              }, n10.prototype.createContainerElement = function(t7) {
                return null == t7 && (t7 = this.objectGroup.getDepth()), this.getChildViews()[0].createContainerElement(t7);
              }, n10;
            }(e12.ObjectView);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Controller = function(e13) {
              function n10() {
                return n10.__super__.constructor.apply(this, arguments);
              }
              return t6(n10, e13), n10;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, u4 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                c6.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, c6 = {}.hasOwnProperty, l9 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = e12.findClosestElementFromNode, i6 = e12.nodeIsEmptyTextNode, n9 = e12.nodeIsBlockStartComment, o11 = e12.normalizeSpaces, r7 = e12.summarizeStringChange, s8 = e12.tagName, e12.MutationObserver = function(e13) {
              function c7(t7) {
                this.element = t7, this.didMutate = a4(this.didMutate, this), this.observer = new window.MutationObserver(this.didMutate), this.start();
              }
              var h6, p3, d3, f3;
              return u4(c7, e13), p3 = "data-trix-mutable", d3 = "[" + p3 + "]", f3 = { attributes: true, childList: true, characterData: true, characterDataOldValue: true, subtree: true }, c7.prototype.start = function() {
                return this.reset(), this.observer.observe(this.element, f3);
              }, c7.prototype.stop = function() {
                return this.observer.disconnect();
              }, c7.prototype.didMutate = function(t7) {
                var e14, n10;
                return (e14 = this.mutations).push.apply(e14, this.findSignificantMutations(t7)), this.mutations.length ? (null != (n10 = this.delegate) && "function" == typeof n10.elementDidMutate && n10.elementDidMutate(this.getMutationSummary()), this.reset()) : void 0;
              }, c7.prototype.reset = function() {
                return this.mutations = [];
              }, c7.prototype.findSignificantMutations = function(t7) {
                var e14, n10, i7, o12;
                for (o12 = [], e14 = 0, n10 = t7.length; n10 > e14; e14++)
                  i7 = t7[e14], this.mutationIsSignificant(i7) && o12.push(i7);
                return o12;
              }, c7.prototype.mutationIsSignificant = function(t7) {
                var e14, n10, i7, o12;
                if (this.nodeIsMutable(t7.target))
                  return false;
                for (o12 = this.nodesModifiedByMutation(t7), e14 = 0, n10 = o12.length; n10 > e14; e14++)
                  if (i7 = o12[e14], this.nodeIsSignificant(i7))
                    return true;
                return false;
              }, c7.prototype.nodeIsSignificant = function(t7) {
                return t7 !== this.element && !this.nodeIsMutable(t7) && !i6(t7);
              }, c7.prototype.nodeIsMutable = function(e14) {
                return t6(e14, { matchingSelector: d3 });
              }, c7.prototype.nodesModifiedByMutation = function(t7) {
                var e14;
                switch (e14 = [], t7.type) {
                  case "attributes":
                    t7.attributeName !== p3 && e14.push(t7.target);
                    break;
                  case "characterData":
                    e14.push(t7.target.parentNode), e14.push(t7.target);
                    break;
                  case "childList":
                    e14.push.apply(e14, t7.addedNodes), e14.push.apply(e14, t7.removedNodes);
                }
                return e14;
              }, c7.prototype.getMutationSummary = function() {
                return this.getTextMutationSummary();
              }, c7.prototype.getTextMutationSummary = function() {
                var t7, e14, n10, i7, o12, r8, s9, a5, u5, c8, h7;
                for (a5 = this.getTextChangesFromCharacterData(), n10 = a5.additions, o12 = a5.deletions, h7 = this.getTextChangesFromChildList(), u5 = h7.additions, r8 = 0, s9 = u5.length; s9 > r8; r8++)
                  e14 = u5[r8], l9.call(n10, e14) < 0 && n10.push(e14);
                return o12.push.apply(o12, h7.deletions), c8 = {}, (t7 = n10.join("")) && (c8.textAdded = t7), (i7 = o12.join("")) && (c8.textDeleted = i7), c8;
              }, c7.prototype.getMutationsByType = function(t7) {
                var e14, n10, i7, o12, r8;
                for (o12 = this.mutations, r8 = [], e14 = 0, n10 = o12.length; n10 > e14; e14++)
                  i7 = o12[e14], i7.type === t7 && r8.push(i7);
                return r8;
              }, c7.prototype.getTextChangesFromChildList = function() {
                var t7, e14, i7, r8, s9, a5, u5, c8, l10, p4, d4;
                for (t7 = [], u5 = [], a5 = this.getMutationsByType("childList"), e14 = 0, r8 = a5.length; r8 > e14; e14++)
                  s9 = a5[e14], t7.push.apply(t7, s9.addedNodes), u5.push.apply(u5, s9.removedNodes);
                return c8 = 0 === t7.length && 1 === u5.length && n9(u5[0]), c8 ? (p4 = [], d4 = ["\n"]) : (p4 = h6(t7), d4 = h6(u5)), { additions: function() {
                  var t8, e15, n10;
                  for (n10 = [], i7 = t8 = 0, e15 = p4.length; e15 > t8; i7 = ++t8)
                    l10 = p4[i7], l10 !== d4[i7] && n10.push(o11(l10));
                  return n10;
                }(), deletions: function() {
                  var t8, e15, n10;
                  for (n10 = [], i7 = t8 = 0, e15 = d4.length; e15 > t8; i7 = ++t8)
                    l10 = d4[i7], l10 !== p4[i7] && n10.push(o11(l10));
                  return n10;
                }() };
              }, c7.prototype.getTextChangesFromCharacterData = function() {
                var t7, e14, n10, i7, s9, a5, u5, c8;
                return e14 = this.getMutationsByType("characterData"), e14.length && (c8 = e14[0], n10 = e14[e14.length - 1], s9 = o11(c8.oldValue), i7 = o11(n10.target.data), a5 = r7(s9, i7), t7 = a5.added, u5 = a5.removed), { additions: t7 ? [t7] : [], deletions: u5 ? [u5] : [] };
              }, h6 = function(t7) {
                var e14, n10, i7, o12;
                for (null == t7 && (t7 = []), o12 = [], e14 = 0, n10 = t7.length; n10 > e14; e14++)
                  switch (i7 = t7[e14], i7.nodeType) {
                    case Node.TEXT_NODE:
                      o12.push(i7.data);
                      break;
                    case Node.ELEMENT_NODE:
                      "br" === s8(i7) ? o12.push("\n") : o12.push.apply(o12, h6(i7.childNodes));
                  }
                return o12;
              }, c7;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.FileVerificationOperation = function(e13) {
              function n10(t7) {
                this.file = t7;
              }
              return t6(n10, e13), n10.prototype.perform = function(t7) {
                var e14;
                return e14 = new FileReader(), e14.onerror = function() {
                  return t7(false);
                }, e14.onload = function(n11) {
                  return function() {
                    e14.onerror = null;
                    try {
                      e14.abort();
                    } catch (i6) {
                    }
                    return t7(true, n11.file);
                  };
                }(this), e14.readAsArrayBuffer(this.file);
              }, n10;
            }(e12.Operation);
          }.call(this), function() {
            var t6, n9, i6 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                o11.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, o11 = {}.hasOwnProperty;
            t6 = e12.handleEvent, n9 = e12.innerElementIsActive, e12.InputController = function(o12) {
              function r7(n10) {
                var i7;
                this.element = n10, this.mutationObserver = new e12.MutationObserver(this.element), this.mutationObserver.delegate = this;
                for (i7 in this.events)
                  t6(i7, { onElement: this.element, withCallback: this.handlerFor(i7) });
              }
              return i6(r7, o12), r7.prototype.events = {}, r7.prototype.elementDidMutate = function() {
              }, r7.prototype.editorWillSyncDocumentView = function() {
                return this.mutationObserver.stop();
              }, r7.prototype.editorDidSyncDocumentView = function() {
                return this.mutationObserver.start();
              }, r7.prototype.requestRender = function() {
                var t7;
                return null != (t7 = this.delegate) && "function" == typeof t7.inputControllerDidRequestRender ? t7.inputControllerDidRequestRender() : void 0;
              }, r7.prototype.requestReparse = function() {
                var t7;
                return null != (t7 = this.delegate) && "function" == typeof t7.inputControllerDidRequestReparse && t7.inputControllerDidRequestReparse(), this.requestRender();
              }, r7.prototype.attachFiles = function(t7) {
                var n10, i7;
                return i7 = function() {
                  var i8, o13, r8;
                  for (r8 = [], i8 = 0, o13 = t7.length; o13 > i8; i8++)
                    n10 = t7[i8], r8.push(new e12.FileVerificationOperation(n10));
                  return r8;
                }(), Promise.all(i7).then(function(t8) {
                  return function(e13) {
                    return t8.handleInput(function() {
                      var t9, n11;
                      return null != (t9 = this.delegate) && t9.inputControllerWillAttachFiles(), null != (n11 = this.responder) && n11.insertFiles(e13), this.requestRender();
                    });
                  };
                }(this));
              }, r7.prototype.handlerFor = function(t7) {
                return function(e13) {
                  return function(i7) {
                    return i7.defaultPrevented ? void 0 : e13.handleInput(function() {
                      return n9(this.element) ? void 0 : (this.eventName = t7, this.events[t7].call(this, i7));
                    });
                  };
                }(this);
              }, r7.prototype.handleInput = function(t7) {
                var e13, n10;
                try {
                  return null != (e13 = this.delegate) && e13.inputControllerWillHandleInput(), t7.call(this);
                } finally {
                  null != (n10 = this.delegate) && n10.inputControllerDidHandleInput();
                }
              }, r7.prototype.createLinkHTML = function(t7, e13) {
                var n10;
                return n10 = document.createElement("a"), n10.href = t7, n10.textContent = null != e13 ? e13 : t7, n10.outerHTML;
              }, r7;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6, l9, h6, p3, d3, f3 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                g2.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, g2 = {}.hasOwnProperty, m3 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            c6 = e12.makeElement, l9 = e12.objectsAreEqual, d3 = e12.tagName, n9 = e12.browser, a4 = e12.keyEventIsKeyboardCommand, o11 = e12.dataTransferIsWritable, i6 = e12.dataTransferIsPlainText, u4 = e12.config.keyNames, e12.Level0InputController = function(n10) {
              function s9() {
                s9.__super__.constructor.apply(this, arguments), this.resetInputSummary();
              }
              var d4;
              return f3(s9, n10), d4 = 0, s9.prototype.setInputSummary = function(t7) {
                var e13, n11;
                null == t7 && (t7 = {}), this.inputSummary.eventName = this.eventName;
                for (e13 in t7)
                  n11 = t7[e13], this.inputSummary[e13] = n11;
                return this.inputSummary;
              }, s9.prototype.resetInputSummary = function() {
                return this.inputSummary = {};
              }, s9.prototype.reset = function() {
                return this.resetInputSummary(), e12.selectionChangeObserver.reset();
              }, s9.prototype.elementDidMutate = function(t7) {
                var e13;
                return this.isComposing() ? null != (e13 = this.delegate) && "function" == typeof e13.inputControllerDidAllowUnhandledInput ? e13.inputControllerDidAllowUnhandledInput() : void 0 : this.handleInput(function() {
                  return this.mutationIsSignificant(t7) && (this.mutationIsExpected(t7) ? this.requestRender() : this.requestReparse()), this.reset();
                });
              }, s9.prototype.mutationIsExpected = function(t7) {
                var e13, n11, i7, o12, r8, s10, a5, u5, c7, l10;
                return a5 = t7.textAdded, u5 = t7.textDeleted, this.inputSummary.preferDocument ? true : (e13 = null != a5 ? a5 === this.inputSummary.textAdded : !this.inputSummary.textAdded, n11 = null != u5 ? this.inputSummary.didDelete : !this.inputSummary.didDelete, c7 = ("\n" === a5 || " \n" === a5) && !e13, l10 = "\n" === u5 && !n11, s10 = c7 && !l10 || l10 && !c7, s10 && (o12 = this.getSelectedRange()) && (i7 = c7 ? a5.replace(/\n$/, "").length || -1 : (null != a5 ? a5.length : void 0) || 1, null != (r8 = this.responder) ? r8.positionIsBlockBreak(o12[1] + i7) : void 0) ? true : e13 && n11);
              }, s9.prototype.mutationIsSignificant = function(t7) {
                var e13, n11, i7;
                return i7 = Object.keys(t7).length > 0, e13 = "" === (null != (n11 = this.compositionInput) ? n11.getEndData() : void 0), i7 || !e13;
              }, s9.prototype.events = { keydown: function(t7) {
                var n11, i7, o12, r8, s10, c7, l10, h7, p4;
                if (this.isComposing() || this.resetInputSummary(), this.inputSummary.didInput = true, r8 = u4[t7.keyCode]) {
                  for (i7 = this.keys, h7 = ["ctrl", "alt", "shift", "meta"], o12 = 0, c7 = h7.length; c7 > o12; o12++)
                    l10 = h7[o12], t7[l10 + "Key"] && ("ctrl" === l10 && (l10 = "control"), i7 = null != i7 ? i7[l10] : void 0);
                  null != (null != i7 ? i7[r8] : void 0) && (this.setInputSummary({ keyName: r8 }), e12.selectionChangeObserver.reset(), i7[r8].call(this, t7));
                }
                return a4(t7) && (n11 = String.fromCharCode(t7.keyCode).toLowerCase()) && (s10 = function() {
                  var e13, n12, i8, o13;
                  for (i8 = ["alt", "shift"], o13 = [], e13 = 0, n12 = i8.length; n12 > e13; e13++)
                    l10 = i8[e13], t7[l10 + "Key"] && o13.push(l10);
                  return o13;
                }(), s10.push(n11), null != (p4 = this.delegate) ? p4.inputControllerDidReceiveKeyboardCommand(s10) : void 0) ? t7.preventDefault() : void 0;
              }, keypress: function(t7) {
                var e13, n11, i7;
                if (null == this.inputSummary.eventName && !t7.metaKey && (!t7.ctrlKey || t7.altKey))
                  return (i7 = p3(t7)) ? (null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), null != (n11 = this.responder) && n11.insertString(i7), this.setInputSummary({ textAdded: i7, didDelete: this.selectionIsExpanded() })) : void 0;
              }, textInput: function(t7) {
                var e13, n11, i7, o12;
                return e13 = t7.data, o12 = this.inputSummary.textAdded, o12 && o12 !== e13 && o12.toUpperCase() === e13 ? (n11 = this.getSelectedRange(), this.setSelectedRange([n11[0], n11[1] + o12.length]), null != (i7 = this.responder) && i7.insertString(e13), this.setInputSummary({ textAdded: e13 }), this.setSelectedRange(n11)) : void 0;
              }, dragenter: function(t7) {
                return t7.preventDefault();
              }, dragstart: function(t7) {
                var e13, n11;
                return n11 = t7.target, this.serializeSelectionToDataTransfer(t7.dataTransfer), this.draggedRange = this.getSelectedRange(), null != (e13 = this.delegate) && "function" == typeof e13.inputControllerDidStartDrag ? e13.inputControllerDidStartDrag() : void 0;
              }, dragover: function(t7) {
                var e13, n11;
                return !this.draggedRange && !this.canAcceptDataTransfer(t7.dataTransfer) || (t7.preventDefault(), e13 = { x: t7.clientX, y: t7.clientY }, l9(e13, this.draggingPoint)) ? void 0 : (this.draggingPoint = e13, null != (n11 = this.delegate) && "function" == typeof n11.inputControllerDidReceiveDragOverPoint ? n11.inputControllerDidReceiveDragOverPoint(this.draggingPoint) : void 0);
              }, dragend: function() {
                var t7;
                return null != (t7 = this.delegate) && "function" == typeof t7.inputControllerDidCancelDrag && t7.inputControllerDidCancelDrag(), this.draggedRange = null, this.draggingPoint = null;
              }, drop: function(t7) {
                var n11, i7, o12, r8, s10, a5, u5, c7, l10;
                return t7.preventDefault(), o12 = null != (s10 = t7.dataTransfer) ? s10.files : void 0, r8 = { x: t7.clientX, y: t7.clientY }, null != (a5 = this.responder) && a5.setLocationRangeFromPointRange(r8), (null != o12 ? o12.length : void 0) ? this.attachFiles(o12) : this.draggedRange ? (null != (u5 = this.delegate) && u5.inputControllerWillMoveText(), null != (c7 = this.responder) && c7.moveTextFromRange(this.draggedRange), this.draggedRange = null, this.requestRender()) : (i7 = t7.dataTransfer.getData("application/x-trix-document")) && (n11 = e12.Document.fromJSONString(i7), null != (l10 = this.responder) && l10.insertDocument(n11), this.requestRender()), this.draggedRange = null, this.draggingPoint = null;
              }, cut: function(t7) {
                var e13, n11;
                return (null != (e13 = this.responder) ? e13.selectionIsExpanded() : void 0) && (this.serializeSelectionToDataTransfer(t7.clipboardData) && t7.preventDefault(), null != (n11 = this.delegate) && n11.inputControllerWillCutText(), this.deleteInDirection("backward"), t7.defaultPrevented) ? this.requestRender() : void 0;
              }, copy: function(t7) {
                var e13;
                return (null != (e13 = this.responder) ? e13.selectionIsExpanded() : void 0) && this.serializeSelectionToDataTransfer(t7.clipboardData) ? t7.preventDefault() : void 0;
              }, paste: function(t7) {
                var n11, o12, s10, a5, u5, c7, l10, p4, f4, g3, v2, y2, b2, A2, C2, x2, w2, E2, S3, R2, k2, D, L2;
                return n11 = null != (p4 = t7.clipboardData) ? p4 : t7.testClipboardData, l10 = { clipboard: n11 }, null == n11 || h6(t7) ? void this.getPastedHTMLUsingHiddenElement(function(t8) {
                  return function(e13) {
                    var n12, i7, o13;
                    return l10.type = "text/html", l10.html = e13, null != (n12 = t8.delegate) && n12.inputControllerWillPaste(l10), null != (i7 = t8.responder) && i7.insertHTML(l10.html), t8.requestRender(), null != (o13 = t8.delegate) ? o13.inputControllerDidPaste(l10) : void 0;
                  };
                }(this)) : ((a5 = n11.getData("URL")) ? (l10.type = "text/html", L2 = (c7 = n11.getData("public.url-name")) ? e12.squishBreakableWhitespace(c7).trim() : a5, l10.html = this.createLinkHTML(a5, L2), null != (f4 = this.delegate) && f4.inputControllerWillPaste(l10), this.setInputSummary({ textAdded: L2, didDelete: this.selectionIsExpanded() }), null != (C2 = this.responder) && C2.insertHTML(l10.html), this.requestRender(), null != (x2 = this.delegate) && x2.inputControllerDidPaste(l10)) : i6(n11) ? (l10.type = "text/plain", l10.string = n11.getData("text/plain"), null != (w2 = this.delegate) && w2.inputControllerWillPaste(l10), this.setInputSummary({ textAdded: l10.string, didDelete: this.selectionIsExpanded() }), null != (E2 = this.responder) && E2.insertString(l10.string), this.requestRender(), null != (S3 = this.delegate) && S3.inputControllerDidPaste(l10)) : (u5 = n11.getData("text/html")) ? (l10.type = "text/html", l10.html = u5, null != (R2 = this.delegate) && R2.inputControllerWillPaste(l10), null != (k2 = this.responder) && k2.insertHTML(l10.html), this.requestRender(), null != (D = this.delegate) && D.inputControllerDidPaste(l10)) : m3.call(n11.types, "Files") >= 0 && (s10 = null != (g3 = n11.items) && null != (v2 = g3[0]) && "function" == typeof v2.getAsFile ? v2.getAsFile() : void 0) && (!s10.name && (o12 = r7(s10)) && (s10.name = "pasted-file-" + ++d4 + "." + o12), l10.type = "File", l10.file = s10, null != (y2 = this.delegate) && y2.inputControllerWillAttachFiles(), null != (b2 = this.responder) && b2.insertFile(l10.file), this.requestRender(), null != (A2 = this.delegate) && A2.inputControllerDidPaste(l10)), t7.preventDefault());
              }, compositionstart: function(t7) {
                return this.getCompositionInput().start(t7.data);
              }, compositionupdate: function(t7) {
                return this.getCompositionInput().update(t7.data);
              }, compositionend: function(t7) {
                return this.getCompositionInput().end(t7.data);
              }, beforeinput: function() {
                return this.inputSummary.didInput = true;
              }, input: function(t7) {
                return this.inputSummary.didInput = true, t7.stopPropagation();
              } }, s9.prototype.keys = { backspace: function(t7) {
                var e13;
                return null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t7);
              }, "delete": function(t7) {
                var e13;
                return null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t7);
              }, "return": function() {
                var t7, e13;
                return this.setInputSummary({ preferDocument: true }), null != (t7 = this.delegate) && t7.inputControllerWillPerformTyping(), null != (e13 = this.responder) ? e13.insertLineBreak() : void 0;
              }, tab: function(t7) {
                var e13, n11;
                return (null != (e13 = this.responder) ? e13.canIncreaseNestingLevel() : void 0) ? (null != (n11 = this.responder) && n11.increaseNestingLevel(), this.requestRender(), t7.preventDefault()) : void 0;
              }, left: function(t7) {
                var e13;
                return this.selectionIsInCursorTarget() ? (t7.preventDefault(), null != (e13 = this.responder) ? e13.moveCursorInDirection("backward") : void 0) : void 0;
              }, right: function(t7) {
                var e13;
                return this.selectionIsInCursorTarget() ? (t7.preventDefault(), null != (e13 = this.responder) ? e13.moveCursorInDirection("forward") : void 0) : void 0;
              }, control: { d: function(t7) {
                var e13;
                return null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t7);
              }, h: function(t7) {
                var e13;
                return null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t7);
              }, o: function(t7) {
                var e13, n11;
                return t7.preventDefault(), null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), null != (n11 = this.responder) && n11.insertString("\n", { updatePosition: false }), this.requestRender();
              } }, shift: { "return": function(t7) {
                var e13, n11;
                return null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), null != (n11 = this.responder) && n11.insertString("\n"), this.requestRender(), t7.preventDefault();
              }, tab: function(t7) {
                var e13, n11;
                return (null != (e13 = this.responder) ? e13.canDecreaseNestingLevel() : void 0) ? (null != (n11 = this.responder) && n11.decreaseNestingLevel(), this.requestRender(), t7.preventDefault()) : void 0;
              }, left: function(t7) {
                return this.selectionIsInCursorTarget() ? (t7.preventDefault(), this.expandSelectionInDirection("backward")) : void 0;
              }, right: function(t7) {
                return this.selectionIsInCursorTarget() ? (t7.preventDefault(), this.expandSelectionInDirection("forward")) : void 0;
              } }, alt: { backspace: function() {
                var t7;
                return this.setInputSummary({ preferDocument: false }), null != (t7 = this.delegate) ? t7.inputControllerWillPerformTyping() : void 0;
              } }, meta: { backspace: function() {
                var t7;
                return this.setInputSummary({ preferDocument: false }), null != (t7 = this.delegate) ? t7.inputControllerWillPerformTyping() : void 0;
              } } }, s9.prototype.getCompositionInput = function() {
                return this.isComposing() ? this.compositionInput : this.compositionInput = new t6(this);
              }, s9.prototype.isComposing = function() {
                return null != this.compositionInput && !this.compositionInput.isEnded();
              }, s9.prototype.deleteInDirection = function(t7, e13) {
                var n11;
                return (null != (n11 = this.responder) ? n11.deleteInDirection(t7) : void 0) !== false ? this.setInputSummary({ didDelete: true }) : e13 ? (e13.preventDefault(), this.requestRender()) : void 0;
              }, s9.prototype.serializeSelectionToDataTransfer = function(t7) {
                var n11, i7;
                if (o11(t7))
                  return n11 = null != (i7 = this.responder) ? i7.getSelectedDocument().toSerializableDocument() : void 0, t7.setData("application/x-trix-document", JSON.stringify(n11)), t7.setData("text/html", e12.DocumentView.render(n11).innerHTML), t7.setData("text/plain", n11.toString().replace(/\n$/, "")), true;
              }, s9.prototype.canAcceptDataTransfer = function(t7) {
                var e13, n11, i7, o12, r8, s10;
                for (s10 = {}, o12 = null != (i7 = null != t7 ? t7.types : void 0) ? i7 : [], e13 = 0, n11 = o12.length; n11 > e13; e13++)
                  r8 = o12[e13], s10[r8] = true;
                return s10.Files || s10["application/x-trix-document"] || s10["text/html"] || s10["text/plain"];
              }, s9.prototype.getPastedHTMLUsingHiddenElement = function(t7) {
                var n11, i7, o12;
                return i7 = this.getSelectedRange(), o12 = { position: "absolute", left: window.pageXOffset + "px", top: window.pageYOffset + "px", opacity: 0 }, n11 = c6({ style: o12, tagName: "div", editable: true }), document.body.appendChild(n11), n11.focus(), requestAnimationFrame(function(o13) {
                  return function() {
                    var r8;
                    return r8 = n11.innerHTML, e12.removeNode(n11), o13.setSelectedRange(i7), t7(r8);
                  };
                }(this));
              }, s9.proxyMethod("responder?.getSelectedRange"), s9.proxyMethod("responder?.setSelectedRange"), s9.proxyMethod("responder?.expandSelectionInDirection"), s9.proxyMethod("responder?.selectionIsInCursorTarget"), s9.proxyMethod("responder?.selectionIsExpanded"), s9;
            }(e12.InputController), r7 = function(t7) {
              var e13, n10;
              return null != (e13 = t7.type) && null != (n10 = e13.match(/\/(\w+)$/)) ? n10[1] : void 0;
            }, s8 = null != ("function" == typeof " ".codePointAt ? " ".codePointAt(0) : void 0), p3 = function(t7) {
              var n10;
              return t7.key && s8 && t7.key.codePointAt(0) === t7.keyCode ? t7.key : (null === t7.which ? n10 = t7.keyCode : 0 !== t7.which && 0 !== t7.charCode && (n10 = t7.charCode), null != n10 && "escape" !== u4[n10] ? e12.UTF16String.fromCodepoints([n10]).toString() : void 0);
            }, h6 = function(t7) {
              var e13, n10, i7, o12, r8, s9, a5, u5, c7, l10;
              if (u5 = t7.clipboardData) {
                if (m3.call(u5.types, "text/html") >= 0) {
                  for (c7 = u5.types, i7 = 0, s9 = c7.length; s9 > i7; i7++)
                    if (l10 = c7[i7], e13 = /^CorePasteboardFlavorType/.test(l10), n10 = /^dyn\./.test(l10) && u5.getData(l10), a5 = e13 || n10)
                      return true;
                  return false;
                }
                return o12 = m3.call(u5.types, "com.apple.webarchive") >= 0, r8 = m3.call(u5.types, "com.apple.flat-rtfd") >= 0, o12 || r8;
              }
            }, t6 = function(t7) {
              function e13(t8) {
                var e14;
                this.inputController = t8, e14 = this.inputController, this.responder = e14.responder, this.delegate = e14.delegate, this.inputSummary = e14.inputSummary, this.data = {};
              }
              return f3(e13, t7), e13.prototype.start = function(t8) {
                var e14, n10;
                return this.data.start = t8, this.isSignificant() ? ("keypress" === this.inputSummary.eventName && this.inputSummary.textAdded && null != (e14 = this.responder) && e14.deleteInDirection("left"), this.selectionIsExpanded() || (this.insertPlaceholder(), this.requestRender()), this.range = null != (n10 = this.responder) ? n10.getSelectedRange() : void 0) : void 0;
              }, e13.prototype.update = function(t8) {
                var e14;
                return this.data.update = t8, this.isSignificant() && (e14 = this.selectPlaceholder()) ? (this.forgetPlaceholder(), this.range = e14) : void 0;
              }, e13.prototype.end = function(t8) {
                var e14, n10, i7, o12;
                return this.data.end = t8, this.isSignificant() ? (this.forgetPlaceholder(), this.canApplyToDocument() ? (this.setInputSummary({ preferDocument: true, didInput: false }), null != (e14 = this.delegate) && e14.inputControllerWillPerformTyping(), null != (n10 = this.responder) && n10.setSelectedRange(this.range), null != (i7 = this.responder) && i7.insertString(this.data.end), null != (o12 = this.responder) ? o12.setSelectedRange(this.range[0] + this.data.end.length) : void 0) : null != this.data.start || null != this.data.update ? (this.requestReparse(), this.inputController.reset()) : void 0) : this.inputController.reset();
              }, e13.prototype.getEndData = function() {
                return this.data.end;
              }, e13.prototype.isEnded = function() {
                return null != this.getEndData();
              }, e13.prototype.isSignificant = function() {
                return n9.composesExistingText ? this.inputSummary.didInput : true;
              }, e13.prototype.canApplyToDocument = function() {
                var t8, e14;
                return 0 === (null != (t8 = this.data.start) ? t8.length : void 0) && (null != (e14 = this.data.end) ? e14.length : void 0) > 0 && null != this.range;
              }, e13.proxyMethod("inputController.setInputSummary"), e13.proxyMethod("inputController.requestRender"), e13.proxyMethod("inputController.requestReparse"), e13.proxyMethod("responder?.selectionIsExpanded"), e13.proxyMethod("responder?.insertPlaceholder"), e13.proxyMethod("responder?.selectPlaceholder"), e13.proxyMethod("responder?.forgetPlaceholder"), e13;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, r7 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                s8.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, s8 = {}.hasOwnProperty, a4 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = e12.dataTransferIsPlainText, n9 = e12.keyEventIsKeyboardCommand, i6 = e12.objectsAreEqual, e12.Level2InputController = function(s9) {
              function u4() {
                return this.render = o11(this.render, this), u4.__super__.constructor.apply(this, arguments);
              }
              var c6, l9, h6, p3, d3, f3;
              return r7(u4, s9), u4.prototype.elementDidMutate = function() {
                var t7;
                return this.scheduledRender ? this.composing && null != (t7 = this.delegate) && "function" == typeof t7.inputControllerDidAllowUnhandledInput ? t7.inputControllerDidAllowUnhandledInput() : void 0 : this.reparse();
              }, u4.prototype.scheduleRender = function() {
                return null != this.scheduledRender ? this.scheduledRender : this.scheduledRender = requestAnimationFrame(this.render);
              }, u4.prototype.render = function() {
                var t7;
                return cancelAnimationFrame(this.scheduledRender), this.scheduledRender = null, this.composing || null != (t7 = this.delegate) && t7.render(), "function" == typeof this.afterRender && this.afterRender(), this.afterRender = null;
              }, u4.prototype.reparse = function() {
                var t7;
                return null != (t7 = this.delegate) ? t7.reparse() : void 0;
              }, u4.prototype.events = { keydown: function(t7) {
                var e13, i7, o12, r8;
                if (n9(t7)) {
                  if (e13 = l9(t7), null != (r8 = this.delegate) ? r8.inputControllerDidReceiveKeyboardCommand(e13) : void 0)
                    return t7.preventDefault();
                } else if (o12 = t7.key, t7.altKey && (o12 += "+Alt"), t7.shiftKey && (o12 += "+Shift"), i7 = this.keys[o12])
                  return this.withEvent(t7, i7);
              }, paste: function(t7) {
                var e13, n10, i7, o12, r8, s10, a5, u5, c7;
                return h6(t7) ? (t7.preventDefault(), this.attachFiles(t7.clipboardData.files)) : p3(t7) ? (t7.preventDefault(), n10 = { type: "text/plain", string: t7.clipboardData.getData("text/plain") }, null != (i7 = this.delegate) && i7.inputControllerWillPaste(n10), null != (o12 = this.responder) && o12.insertString(n10.string), this.render(), null != (r8 = this.delegate) ? r8.inputControllerDidPaste(n10) : void 0) : (e13 = null != (s10 = t7.clipboardData) ? s10.getData("URL") : void 0) ? (t7.preventDefault(), n10 = { type: "text/html", html: this.createLinkHTML(e13) }, null != (a5 = this.delegate) && a5.inputControllerWillPaste(n10), null != (u5 = this.responder) && u5.insertHTML(n10.html), this.render(), null != (c7 = this.delegate) ? c7.inputControllerDidPaste(n10) : void 0) : void 0;
              }, beforeinput: function(t7) {
                var e13;
                return (e13 = this.inputTypes[t7.inputType]) ? (this.withEvent(t7, e13), this.scheduleRender()) : void 0;
              }, input: function() {
                return e12.selectionChangeObserver.reset();
              }, dragstart: function(t7) {
                var e13, n10;
                return (null != (e13 = this.responder) ? e13.selectionContainsAttachments() : void 0) ? (t7.dataTransfer.setData("application/x-trix-dragging", true), this.dragging = { range: null != (n10 = this.responder) ? n10.getSelectedRange() : void 0, point: d3(t7) }) : void 0;
              }, dragenter: function(t7) {
                return c6(t7) ? t7.preventDefault() : void 0;
              }, dragover: function(t7) {
                var e13, n10;
                if (this.dragging) {
                  if (t7.preventDefault(), e13 = d3(t7), !i6(e13, this.dragging.point))
                    return this.dragging.point = e13, null != (n10 = this.responder) ? n10.setLocationRangeFromPointRange(e13) : void 0;
                } else if (c6(t7))
                  return t7.preventDefault();
              }, drop: function(t7) {
                var e13, n10, i7, o12;
                return this.dragging ? (t7.preventDefault(), null != (n10 = this.delegate) && n10.inputControllerWillMoveText(), null != (i7 = this.responder) && i7.moveTextFromRange(this.dragging.range), this.dragging = null, this.scheduleRender()) : c6(t7) ? (t7.preventDefault(), e13 = d3(t7), null != (o12 = this.responder) && o12.setLocationRangeFromPointRange(e13), this.attachFiles(t7.dataTransfer.files)) : void 0;
              }, dragend: function() {
                var t7;
                return this.dragging ? (null != (t7 = this.responder) && t7.setSelectedRange(this.dragging.range), this.dragging = null) : void 0;
              }, compositionend: function() {
                return this.composing ? (this.composing = false, this.scheduleRender()) : void 0;
              } }, u4.prototype.keys = { ArrowLeft: function() {
                var t7, e13;
                return (null != (t7 = this.responder) ? t7.shouldManageMovingCursorInDirection("backward") : void 0) ? (this.event.preventDefault(), null != (e13 = this.responder) ? e13.moveCursorInDirection("backward") : void 0) : void 0;
              }, ArrowRight: function() {
                var t7, e13;
                return (null != (t7 = this.responder) ? t7.shouldManageMovingCursorInDirection("forward") : void 0) ? (this.event.preventDefault(), null != (e13 = this.responder) ? e13.moveCursorInDirection("forward") : void 0) : void 0;
              }, Backspace: function() {
                var t7, e13, n10;
                return (null != (t7 = this.responder) ? t7.shouldManageDeletingInDirection("backward") : void 0) ? (this.event.preventDefault(), null != (e13 = this.delegate) && e13.inputControllerWillPerformTyping(), null != (n10 = this.responder) && n10.deleteInDirection("backward"), this.render()) : void 0;
              }, Tab: function() {
                var t7, e13;
                return (null != (t7 = this.responder) ? t7.canIncreaseNestingLevel() : void 0) ? (this.event.preventDefault(), null != (e13 = this.responder) && e13.increaseNestingLevel(), this.render()) : void 0;
              }, "Tab+Shift": function() {
                var t7, e13;
                return (null != (t7 = this.responder) ? t7.canDecreaseNestingLevel() : void 0) ? (this.event.preventDefault(), null != (e13 = this.responder) && e13.decreaseNestingLevel(), this.render()) : void 0;
              } }, u4.prototype.inputTypes = { deleteByComposition: function() {
                return this.deleteInDirection("backward", { recordUndoEntry: false });
              }, deleteByCut: function() {
                return this.deleteInDirection("backward");
              }, deleteByDrag: function() {
                return this.event.preventDefault(), this.withTargetDOMRange(function() {
                  var t7;
                  return this.deleteByDragRange = null != (t7 = this.responder) ? t7.getSelectedRange() : void 0;
                });
              }, deleteCompositionText: function() {
                return this.deleteInDirection("backward", { recordUndoEntry: false });
              }, deleteContent: function() {
                return this.deleteInDirection("backward");
              }, deleteContentBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteContentForward: function() {
                return this.deleteInDirection("forward");
              }, deleteEntireSoftLine: function() {
                return this.deleteInDirection("forward");
              }, deleteHardLineBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteHardLineForward: function() {
                return this.deleteInDirection("forward");
              }, deleteSoftLineBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteSoftLineForward: function() {
                return this.deleteInDirection("forward");
              }, deleteWordBackward: function() {
                return this.deleteInDirection("backward");
              }, deleteWordForward: function() {
                return this.deleteInDirection("forward");
              }, formatBackColor: function() {
                return this.activateAttributeIfSupported("backgroundColor", this.event.data);
              }, formatBold: function() {
                return this.toggleAttributeIfSupported("bold");
              }, formatFontColor: function() {
                return this.activateAttributeIfSupported("color", this.event.data);
              }, formatFontName: function() {
                return this.activateAttributeIfSupported("font", this.event.data);
              }, formatIndent: function() {
                var t7;
                return (null != (t7 = this.responder) ? t7.canIncreaseNestingLevel() : void 0) ? this.withTargetDOMRange(function() {
                  var t8;
                  return null != (t8 = this.responder) ? t8.increaseNestingLevel() : void 0;
                }) : void 0;
              }, formatItalic: function() {
                return this.toggleAttributeIfSupported("italic");
              }, formatJustifyCenter: function() {
                return this.toggleAttributeIfSupported("justifyCenter");
              }, formatJustifyFull: function() {
                return this.toggleAttributeIfSupported("justifyFull");
              }, formatJustifyLeft: function() {
                return this.toggleAttributeIfSupported("justifyLeft");
              }, formatJustifyRight: function() {
                return this.toggleAttributeIfSupported("justifyRight");
              }, formatOutdent: function() {
                var t7;
                return (null != (t7 = this.responder) ? t7.canDecreaseNestingLevel() : void 0) ? this.withTargetDOMRange(function() {
                  var t8;
                  return null != (t8 = this.responder) ? t8.decreaseNestingLevel() : void 0;
                }) : void 0;
              }, formatRemove: function() {
                return this.withTargetDOMRange(function() {
                  var t7, e13, n10, i7;
                  i7 = [];
                  for (t7 in null != (e13 = this.responder) ? e13.getCurrentAttributes() : void 0)
                    i7.push(null != (n10 = this.responder) ? n10.removeCurrentAttribute(t7) : void 0);
                  return i7;
                });
              }, formatSetBlockTextDirection: function() {
                return this.activateAttributeIfSupported("blockDir", this.event.data);
              }, formatSetInlineTextDirection: function() {
                return this.activateAttributeIfSupported("textDir", this.event.data);
              }, formatStrikeThrough: function() {
                return this.toggleAttributeIfSupported("strike");
              }, formatSubscript: function() {
                return this.toggleAttributeIfSupported("sub");
              }, formatSuperscript: function() {
                return this.toggleAttributeIfSupported("sup");
              }, formatUnderline: function() {
                return this.toggleAttributeIfSupported("underline");
              }, historyRedo: function() {
                var t7;
                return null != (t7 = this.delegate) ? t7.inputControllerWillPerformRedo() : void 0;
              }, historyUndo: function() {
                var t7;
                return null != (t7 = this.delegate) ? t7.inputControllerWillPerformUndo() : void 0;
              }, insertCompositionText: function() {
                return this.composing = true, this.insertString(this.event.data);
              }, insertFromComposition: function() {
                return this.composing = false, this.insertString(this.event.data);
              }, insertFromDrop: function() {
                var t7, e13;
                return (t7 = this.deleteByDragRange) ? (this.deleteByDragRange = null, null != (e13 = this.delegate) && e13.inputControllerWillMoveText(), this.withTargetDOMRange(function() {
                  var e14;
                  return null != (e14 = this.responder) ? e14.moveTextFromRange(t7) : void 0;
                })) : void 0;
              }, insertFromPaste: function() {
                var n10, i7, o12, r8, s10, a5, u5, c7, l10, h7, p4;
                return n10 = this.event.dataTransfer, s10 = { dataTransfer: n10 }, (i7 = n10.getData("URL")) ? (this.event.preventDefault(), s10.type = "text/html", p4 = (r8 = n10.getData("public.url-name")) ? e12.squishBreakableWhitespace(r8).trim() : i7, s10.html = this.createLinkHTML(i7, p4), null != (a5 = this.delegate) && a5.inputControllerWillPaste(s10), this.withTargetDOMRange(function() {
                  var t7;
                  return null != (t7 = this.responder) ? t7.insertHTML(s10.html) : void 0;
                }), this.afterRender = function(t7) {
                  return function() {
                    var e13;
                    return null != (e13 = t7.delegate) ? e13.inputControllerDidPaste(s10) : void 0;
                  };
                }(this)) : t6(n10) ? (s10.type = "text/plain", s10.string = n10.getData("text/plain"), null != (u5 = this.delegate) && u5.inputControllerWillPaste(s10), this.withTargetDOMRange(function() {
                  var t7;
                  return null != (t7 = this.responder) ? t7.insertString(s10.string) : void 0;
                }), this.afterRender = function(t7) {
                  return function() {
                    var e13;
                    return null != (e13 = t7.delegate) ? e13.inputControllerDidPaste(s10) : void 0;
                  };
                }(this)) : (o12 = n10.getData("text/html")) ? (this.event.preventDefault(), s10.type = "text/html", s10.html = o12, null != (c7 = this.delegate) && c7.inputControllerWillPaste(s10), this.withTargetDOMRange(function() {
                  var t7;
                  return null != (t7 = this.responder) ? t7.insertHTML(s10.html) : void 0;
                }), this.afterRender = function(t7) {
                  return function() {
                    var e13;
                    return null != (e13 = t7.delegate) ? e13.inputControllerDidPaste(s10) : void 0;
                  };
                }(this)) : (null != (l10 = n10.files) ? l10.length : void 0) ? (s10.type = "File", s10.file = n10.files[0], null != (h7 = this.delegate) && h7.inputControllerWillPaste(s10), this.withTargetDOMRange(function() {
                  var t7;
                  return null != (t7 = this.responder) ? t7.insertFile(s10.file) : void 0;
                }), this.afterRender = function(t7) {
                  return function() {
                    var e13;
                    return null != (e13 = t7.delegate) ? e13.inputControllerDidPaste(s10) : void 0;
                  };
                }(this)) : void 0;
              }, insertFromYank: function() {
                return this.insertString(this.event.data);
              }, insertLineBreak: function() {
                return this.insertString("\n");
              }, insertLink: function() {
                return this.activateAttributeIfSupported("href", this.event.data);
              }, insertOrderedList: function() {
                return this.toggleAttributeIfSupported("number");
              }, insertParagraph: function() {
                var t7;
                return null != (t7 = this.delegate) && t7.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
                  var t8;
                  return null != (t8 = this.responder) ? t8.insertLineBreak() : void 0;
                });
              }, insertReplacementText: function() {
                return this.insertString(this.event.dataTransfer.getData("text/plain"), { updatePosition: false });
              }, insertText: function() {
                var t7, e13;
                return this.insertString(null != (t7 = this.event.data) ? t7 : null != (e13 = this.event.dataTransfer) ? e13.getData("text/plain") : void 0);
              }, insertTranspose: function() {
                return this.insertString(this.event.data);
              }, insertUnorderedList: function() {
                return this.toggleAttributeIfSupported("bullet");
              } }, u4.prototype.insertString = function(t7, e13) {
                var n10;
                return null == t7 && (t7 = ""), null != (n10 = this.delegate) && n10.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
                  var n11;
                  return null != (n11 = this.responder) ? n11.insertString(t7, e13) : void 0;
                });
              }, u4.prototype.toggleAttributeIfSupported = function(t7) {
                var n10;
                return a4.call(e12.getAllAttributeNames(), t7) >= 0 ? (null != (n10 = this.delegate) && n10.inputControllerWillPerformFormatting(t7), this.withTargetDOMRange(function() {
                  var e13;
                  return null != (e13 = this.responder) ? e13.toggleCurrentAttribute(t7) : void 0;
                })) : void 0;
              }, u4.prototype.activateAttributeIfSupported = function(t7, n10) {
                var i7;
                return a4.call(e12.getAllAttributeNames(), t7) >= 0 ? (null != (i7 = this.delegate) && i7.inputControllerWillPerformFormatting(t7), this.withTargetDOMRange(function() {
                  var e13;
                  return null != (e13 = this.responder) ? e13.setCurrentAttribute(t7, n10) : void 0;
                })) : void 0;
              }, u4.prototype.deleteInDirection = function(t7, e13) {
                var n10, i7, o12, r8;
                return o12 = (null != e13 ? e13 : { recordUndoEntry: true }).recordUndoEntry, o12 && null != (r8 = this.delegate) && r8.inputControllerWillPerformTyping(), i7 = function(e14) {
                  return function() {
                    var n11;
                    return null != (n11 = e14.responder) ? n11.deleteInDirection(t7) : void 0;
                  };
                }(this), (n10 = this.getTargetDOMRange({ minLength: 2 })) ? this.withTargetDOMRange(n10, i7) : i7();
              }, u4.prototype.withTargetDOMRange = function(t7, n10) {
                var i7;
                return "function" == typeof t7 && (n10 = t7, t7 = this.getTargetDOMRange()), t7 ? null != (i7 = this.responder) ? i7.withTargetDOMRange(t7, n10.bind(this)) : void 0 : (e12.selectionChangeObserver.reset(), n10.call(this));
              }, u4.prototype.getTargetDOMRange = function(t7) {
                var e13, n10, i7, o12;
                return i7 = (null != t7 ? t7 : { minLength: 0 }).minLength, (o12 = "function" == typeof (e13 = this.event).getTargetRanges ? e13.getTargetRanges() : void 0) && o12.length && (n10 = f3(o12[0]), 0 === i7 || n10.toString().length >= i7) ? n10 : void 0;
              }, f3 = function(t7) {
                var e13;
                return e13 = document.createRange(), e13.setStart(t7.startContainer, t7.startOffset), e13.setEnd(t7.endContainer, t7.endOffset), e13;
              }, u4.prototype.withEvent = function(t7, e13) {
                var n10;
                this.event = t7;
                try {
                  n10 = e13.call(this);
                } finally {
                  this.event = null;
                }
                return n10;
              }, c6 = function(t7) {
                var e13, n10;
                return a4.call(null != (e13 = null != (n10 = t7.dataTransfer) ? n10.types : void 0) ? e13 : [], "Files") >= 0;
              }, h6 = function(t7) {
                var e13;
                return (e13 = t7.clipboardData) ? a4.call(e13.types, "Files") >= 0 && 1 === e13.types.length && e13.files.length >= 1 : void 0;
              }, p3 = function(t7) {
                var e13;
                return (e13 = t7.clipboardData) ? a4.call(e13.types, "text/plain") >= 0 && 1 === e13.types.length : void 0;
              }, l9 = function(t7) {
                var e13;
                return e13 = [], t7.altKey && e13.push("alt"), t7.shiftKey && e13.push("shift"), e13.push(t7.key), e13;
              }, d3 = function(t7) {
                return { x: t7.clientX, y: t7.clientY };
              }, u4;
            }(e12.InputController);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, l9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                h6.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, h6 = {}.hasOwnProperty;
            n9 = e12.defer, i6 = e12.handleEvent, s8 = e12.makeElement, u4 = e12.tagName, a4 = e12.config, r7 = a4.lang, t6 = a4.css, o11 = a4.keyNames, e12.AttachmentEditorController = function(a5) {
              function h7(t7, e13, n10, i7) {
                this.attachmentPiece = t7, this.element = e13, this.container = n10, this.options = null != i7 ? i7 : {}, this.didBlurCaption = c6(this.didBlurCaption, this), this.didChangeCaption = c6(this.didChangeCaption, this), this.didInputCaption = c6(this.didInputCaption, this), this.didKeyDownCaption = c6(this.didKeyDownCaption, this), this.didClickActionButton = c6(this.didClickActionButton, this), this.didClickToolbar = c6(this.didClickToolbar, this), this.attachment = this.attachmentPiece.attachment, "a" === u4(this.element) && (this.element = this.element.firstChild), this.install();
              }
              var p3;
              return l9(h7, a5), p3 = function(t7) {
                return function() {
                  var e13;
                  return e13 = t7.apply(this, arguments), e13["do"](), null == this.undos && (this.undos = []), this.undos.push(e13.undo);
                };
              }, h7.prototype.install = function() {
                return this.makeElementMutable(), this.addToolbar(), this.attachment.isPreviewable() ? this.installCaptionEditor() : void 0;
              }, h7.prototype.uninstall = function() {
                var t7, e13;
                for (this.savePendingCaption(); e13 = this.undos.pop(); )
                  e13();
                return null != (t7 = this.delegate) ? t7.didUninstallAttachmentEditor(this) : void 0;
              }, h7.prototype.savePendingCaption = function() {
                var t7, e13, n10;
                return null != this.pendingCaption ? (t7 = this.pendingCaption, this.pendingCaption = null, t7 ? null != (e13 = this.delegate) && "function" == typeof e13.attachmentEditorDidRequestUpdatingAttributesForAttachment ? e13.attachmentEditorDidRequestUpdatingAttributesForAttachment({ caption: t7 }, this.attachment) : void 0 : null != (n10 = this.delegate) && "function" == typeof n10.attachmentEditorDidRequestRemovingAttributeForAttachment ? n10.attachmentEditorDidRequestRemovingAttributeForAttachment("caption", this.attachment) : void 0) : void 0;
              }, h7.prototype.makeElementMutable = p3(function() {
                return { "do": function(t7) {
                  return function() {
                    return t7.element.dataset.trixMutable = true;
                  };
                }(this), undo: function(t7) {
                  return function() {
                    return delete t7.element.dataset.trixMutable;
                  };
                }(this) };
              }), h7.prototype.addToolbar = p3(function() {
                var n10;
                return n10 = s8({ tagName: "div", className: t6.attachmentToolbar, data: { trixMutable: true }, childNodes: s8({ tagName: "div", className: "trix-button-row", childNodes: s8({ tagName: "span", className: "trix-button-group trix-button-group--actions", childNodes: s8({ tagName: "button", className: "trix-button trix-button--remove", textContent: r7.remove, attributes: { title: r7.remove }, data: { trixAction: "remove" } }) }) }) }), this.attachment.isPreviewable() && n10.appendChild(s8({ tagName: "div", className: t6.attachmentMetadataContainer, childNodes: s8({ tagName: "span", className: t6.attachmentMetadata, childNodes: [s8({ tagName: "span", className: t6.attachmentName, textContent: this.attachment.getFilename(), attributes: { title: this.attachment.getFilename() } }), s8({ tagName: "span", className: t6.attachmentSize, textContent: this.attachment.getFormattedFilesize() })] }) })), i6("click", { onElement: n10, withCallback: this.didClickToolbar }), i6("click", { onElement: n10, matchingSelector: "[data-trix-action]", withCallback: this.didClickActionButton }), { "do": function(t7) {
                  return function() {
                    return t7.element.appendChild(n10);
                  };
                }(this), undo: function() {
                  return function() {
                    return e12.removeNode(n10);
                  };
                }(this) };
              }), h7.prototype.installCaptionEditor = p3(function() {
                var o12, a6, u5, c7, l10;
                return c7 = s8({ tagName: "textarea", className: t6.attachmentCaptionEditor, attributes: { placeholder: r7.captionPlaceholder }, data: { trixMutable: true } }), c7.value = this.attachmentPiece.getCaption(), l10 = c7.cloneNode(), l10.classList.add("trix-autoresize-clone"), l10.tabIndex = -1, o12 = function() {
                  return l10.value = c7.value, c7.style.height = l10.scrollHeight + "px";
                }, i6("input", { onElement: c7, withCallback: o12 }), i6("input", { onElement: c7, withCallback: this.didInputCaption }), i6("keydown", { onElement: c7, withCallback: this.didKeyDownCaption }), i6("change", { onElement: c7, withCallback: this.didChangeCaption }), i6("blur", { onElement: c7, withCallback: this.didBlurCaption }), u5 = this.element.querySelector("figcaption"), a6 = u5.cloneNode(), { "do": function(e13) {
                  return function() {
                    return u5.style.display = "none", a6.appendChild(c7), a6.appendChild(l10), a6.classList.add(t6.attachmentCaption + "--editing"), u5.parentElement.insertBefore(a6, u5), o12(), e13.options.editCaption ? n9(function() {
                      return c7.focus();
                    }) : void 0;
                  };
                }(this), undo: function() {
                  return e12.removeNode(a6), u5.style.display = null;
                } };
              }), h7.prototype.didClickToolbar = function(t7) {
                return t7.preventDefault(), t7.stopPropagation();
              }, h7.prototype.didClickActionButton = function(t7) {
                var e13, n10;
                switch (e13 = t7.target.getAttribute("data-trix-action")) {
                  case "remove":
                    return null != (n10 = this.delegate) ? n10.attachmentEditorDidRequestRemovalOfAttachment(this.attachment) : void 0;
                }
              }, h7.prototype.didKeyDownCaption = function(t7) {
                var e13;
                return "return" === o11[t7.keyCode] ? (t7.preventDefault(), this.savePendingCaption(), null != (e13 = this.delegate) && "function" == typeof e13.attachmentEditorDidRequestDeselectingAttachment ? e13.attachmentEditorDidRequestDeselectingAttachment(this.attachment) : void 0) : void 0;
              }, h7.prototype.didInputCaption = function(t7) {
                return this.pendingCaption = t7.target.value.replace(/\s/g, " ").trim();
              }, h7.prototype.didChangeCaption = function() {
                return this.savePendingCaption();
              }, h7.prototype.didBlurCaption = function() {
                return this.savePendingCaption();
              }, h7;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                r7.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, r7 = {}.hasOwnProperty;
            i6 = e12.makeElement, t6 = e12.config.css, e12.AttachmentView = function(r8) {
              function s8() {
                s8.__super__.constructor.apply(this, arguments), this.attachment = this.object, this.attachment.uploadProgressDelegate = this, this.attachmentPiece = this.options.piece;
              }
              var a4;
              return o11(s8, r8), s8.attachmentSelector = "[data-trix-attachment]", s8.prototype.createContentNodes = function() {
                return [];
              }, s8.prototype.createNodes = function() {
                var e13, n10, o12, r9, s9, u4, c6;
                if (e13 = r9 = i6({ tagName: "figure", className: this.getClassName(), data: this.getData(), editable: false }), (n10 = this.getHref()) && (r9 = i6({ tagName: "a", editable: false, attributes: { href: n10, tabindex: -1 } }), e13.appendChild(r9)), this.attachment.hasContent())
                  r9.innerHTML = this.attachment.getContent();
                else
                  for (c6 = this.createContentNodes(), o12 = 0, s9 = c6.length; s9 > o12; o12++)
                    u4 = c6[o12], r9.appendChild(u4);
                return r9.appendChild(this.createCaptionElement()), this.attachment.isPending() && (this.progressElement = i6({ tagName: "progress", attributes: { "class": t6.attachmentProgress, value: this.attachment.getUploadProgress(), max: 100 }, data: { trixMutable: true, trixStoreKey: ["progressElement", this.attachment.id].join("/") } }), e13.appendChild(this.progressElement)), [a4("left"), e13, a4("right")];
              }, s8.prototype.createCaptionElement = function() {
                var e13, n10, o12, r9, s9, a5, u4;
                return o12 = i6({ tagName: "figcaption", className: t6.attachmentCaption }), (e13 = this.attachmentPiece.getCaption()) ? (o12.classList.add(t6.attachmentCaption + "--edited"), o12.textContent = e13) : (n10 = this.getCaptionConfig(), n10.name && (r9 = this.attachment.getFilename()), n10.size && (a5 = this.attachment.getFormattedFilesize()), r9 && (s9 = i6({ tagName: "span", className: t6.attachmentName, textContent: r9 }), o12.appendChild(s9)), a5 && (r9 && o12.appendChild(document.createTextNode(" ")), u4 = i6({ tagName: "span", className: t6.attachmentSize, textContent: a5 }), o12.appendChild(u4))), o12;
              }, s8.prototype.getClassName = function() {
                var e13, n10;
                return n10 = [t6.attachment, t6.attachment + "--" + this.attachment.getType()], (e13 = this.attachment.getExtension()) && n10.push(t6.attachment + "--" + e13), n10.join(" ");
              }, s8.prototype.getData = function() {
                var t7, e13;
                return e13 = { trixAttachment: JSON.stringify(this.attachment), trixContentType: this.attachment.getContentType(), trixId: this.attachment.id }, t7 = this.attachmentPiece.attributes, t7.isEmpty() || (e13.trixAttributes = JSON.stringify(t7)), this.attachment.isPending() && (e13.trixSerialize = false), e13;
              }, s8.prototype.getHref = function() {
                return n9(this.attachment.getContent(), "a") ? void 0 : this.attachment.getHref();
              }, s8.prototype.getCaptionConfig = function() {
                var t7, n10, i7;
                return i7 = this.attachment.getType(), t7 = e12.copyObject(null != (n10 = e12.config.attachments[i7]) ? n10.caption : void 0), "file" === i7 && (t7.name = true), t7;
              }, s8.prototype.findProgressElement = function() {
                var t7;
                return null != (t7 = this.findElement()) ? t7.querySelector("progress") : void 0;
              }, a4 = function(t7) {
                return i6({ tagName: "span", textContent: e12.ZERO_WIDTH_SPACE, data: { trixCursorTarget: t7, trixSerialize: false } });
              }, s8.prototype.attachmentDidChangeUploadProgress = function() {
                var t7, e13;
                return e13 = this.attachment.getUploadProgress(), null != (t7 = this.findProgressElement()) ? t7.value = e13 : void 0;
              }, s8;
            }(e12.ObjectView), n9 = function(t7, e13) {
              var n10;
              return n10 = i6("div"), n10.innerHTML = null != t7 ? t7 : "", n10.querySelector(e13);
            };
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                i6.call(e13, o11) && (t7[o11] = e13[o11]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, i6 = {}.hasOwnProperty;
            t6 = e12.makeElement, e12.PreviewableAttachmentView = function(i7) {
              function o11() {
                o11.__super__.constructor.apply(this, arguments), this.attachment.previewDelegate = this;
              }
              return n9(o11, i7), o11.prototype.createContentNodes = function() {
                return this.image = t6({ tagName: "img", attributes: { src: "" }, data: { trixMutable: true } }), this.refresh(this.image), [this.image];
              }, o11.prototype.createCaptionElement = function() {
                var t7;
                return t7 = o11.__super__.createCaptionElement.apply(this, arguments), t7.textContent || t7.setAttribute("data-trix-placeholder", e12.config.lang.captionPlaceholder), t7;
              }, o11.prototype.refresh = function(t7) {
                var e13;
                return null == t7 && (t7 = null != (e13 = this.findElement()) ? e13.querySelector("img") : void 0), t7 ? this.updateAttributesForImage(t7) : void 0;
              }, o11.prototype.updateAttributesForImage = function(t7) {
                var e13, n10, i8, o12, r7, s8;
                return r7 = this.attachment.getURL(), n10 = this.attachment.getPreviewURL(), t7.src = n10 || r7, n10 === r7 ? t7.removeAttribute("data-trix-serialized-attributes") : (i8 = JSON.stringify({ src: r7 }), t7.setAttribute("data-trix-serialized-attributes", i8)), s8 = this.attachment.getWidth(), e13 = this.attachment.getHeight(), null != s8 && (t7.width = s8), null != e13 && (t7.height = e13), o12 = ["imageElement", this.attachment.id, t7.src, t7.width, t7.height].join("/"), t7.dataset.trixStoreKey = o12;
              }, o11.prototype.attachmentDidChangeAttributes = function() {
                return this.refresh(this.image), this.refresh();
              }, o11;
            }(e12.AttachmentView);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                r7.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, r7 = {}.hasOwnProperty;
            i6 = e12.makeElement, t6 = e12.findInnerElement, n9 = e12.getTextConfig, e12.PieceView = function(r8) {
              function s8() {
                var t7;
                s8.__super__.constructor.apply(this, arguments), this.piece = this.object, this.attributes = this.piece.getAttributes(), t7 = this.options, this.textConfig = t7.textConfig, this.context = t7.context, this.piece.attachment ? this.attachment = this.piece.attachment : this.string = this.piece.toString();
              }
              var a4;
              return o11(s8, r8), s8.prototype.createNodes = function() {
                var e13, n10, i7, o12, r9, s9;
                if (s9 = this.attachment ? this.createAttachmentNodes() : this.createStringNodes(), e13 = this.createElement()) {
                  for (i7 = t6(e13), n10 = 0, o12 = s9.length; o12 > n10; n10++)
                    r9 = s9[n10], i7.appendChild(r9);
                  s9 = [e13];
                }
                return s9;
              }, s8.prototype.createAttachmentNodes = function() {
                var t7, n10;
                return t7 = this.attachment.isPreviewable() ? e12.PreviewableAttachmentView : e12.AttachmentView, n10 = this.createChildView(t7, this.piece.attachment, { piece: this.piece }), n10.getNodes();
              }, s8.prototype.createStringNodes = function() {
                var t7, e13, n10, o12, r9, s9, a5, u4, c6, l9;
                if (null != (u4 = this.textConfig) ? u4.plaintext : void 0)
                  return [document.createTextNode(this.string)];
                for (a5 = [], c6 = this.string.split("\n"), n10 = e13 = 0, o12 = c6.length; o12 > e13; n10 = ++e13)
                  l9 = c6[n10], n10 > 0 && (t7 = i6("br"), a5.push(t7)), (r9 = l9.length) && (s9 = document.createTextNode(this.preserveSpaces(l9)), a5.push(s9));
                return a5;
              }, s8.prototype.createElement = function() {
                var t7, e13, o12, r9, s9, a5, u4, c6, l9;
                c6 = {}, a5 = this.attributes;
                for (r9 in a5)
                  if (l9 = a5[r9], (t7 = n9(r9)) && (t7.tagName && (s9 = i6(t7.tagName), o12 ? (o12.appendChild(s9), o12 = s9) : e13 = o12 = s9), t7.styleProperty && (c6[t7.styleProperty] = l9), t7.style)) {
                    u4 = t7.style;
                    for (r9 in u4)
                      l9 = u4[r9], c6[r9] = l9;
                  }
                if (Object.keys(c6).length) {
                  null == e13 && (e13 = i6("span"));
                  for (r9 in c6)
                    l9 = c6[r9], e13.style[r9] = l9;
                }
                return e13;
              }, s8.prototype.createContainerElement = function() {
                var t7, e13, o12, r9, s9;
                r9 = this.attributes;
                for (o12 in r9)
                  if (s9 = r9[o12], (e13 = n9(o12)) && e13.groupTagName)
                    return t7 = {}, t7[o12] = s9, i6(e13.groupTagName, t7);
              }, a4 = e12.NON_BREAKING_SPACE, s8.prototype.preserveSpaces = function(t7) {
                return this.context.isLast && (t7 = t7.replace(/\ $/, a4)), t7 = t7.replace(/(\S)\ {3}(\S)/g, "$1 " + a4 + " $2").replace(/\ {2}/g, a4 + " ").replace(/\ {2}/g, " " + a4), (this.context.isFirst || this.context.followsWhitespace) && (t7 = t7.replace(/^\ /, a4)), t7;
              }, s8;
            }(e12.ObjectView);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.TextView = function(n10) {
              function i6() {
                i6.__super__.constructor.apply(this, arguments), this.text = this.object, this.textConfig = this.options.textConfig;
              }
              var o11;
              return t6(i6, n10), i6.prototype.createNodes = function() {
                var t7, n11, i7, r7, s8, a4, u4, c6, l9, h6;
                for (a4 = [], c6 = e12.ObjectGroup.groupObjects(this.getPieces()), r7 = c6.length - 1, i7 = n11 = 0, s8 = c6.length; s8 > n11; i7 = ++n11)
                  u4 = c6[i7], t7 = {}, 0 === i7 && (t7.isFirst = true), i7 === r7 && (t7.isLast = true), o11(l9) && (t7.followsWhitespace = true), h6 = this.findOrCreateCachedChildView(e12.PieceView, u4, { textConfig: this.textConfig, context: t7 }), a4.push.apply(a4, h6.getNodes()), l9 = u4;
                return a4;
              }, i6.prototype.getPieces = function() {
                var t7, e13, n11, i7, o12;
                for (i7 = this.text.getPieces(), o12 = [], t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  n11 = i7[t7], n11.hasAttribute("blockBreak") || o12.push(n11);
                return o12;
              }, o11 = function(t7) {
                return /\s$/.test(null != t7 ? t7.toString() : void 0);
              }, i6;
            }(e12.ObjectView);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                r7.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, r7 = {}.hasOwnProperty;
            i6 = e12.makeElement, n9 = e12.getBlockConfig, t6 = e12.config.css, e12.BlockView = function(r8) {
              function s8() {
                s8.__super__.constructor.apply(this, arguments), this.block = this.object, this.attributes = this.block.getAttributes();
              }
              return o11(s8, r8), s8.prototype.createNodes = function() {
                var t7, o12, r9, s9, a4, u4, c6, l9, h6, p3, d3;
                if (o12 = document.createComment("block"), c6 = [o12], this.block.isEmpty() ? c6.push(i6("br")) : (p3 = null != (l9 = n9(this.block.getLastAttribute())) ? l9.text : void 0, d3 = this.findOrCreateCachedChildView(e12.TextView, this.block.text, { textConfig: p3 }), c6.push.apply(c6, d3.getNodes()), this.shouldAddExtraNewlineElement() && c6.push(i6("br"))), this.attributes.length)
                  return c6;
                for (h6 = e12.config.blockAttributes["default"].tagName, this.block.isRTL() && (t7 = { dir: "rtl" }), r9 = i6({ tagName: h6, attributes: t7 }), s9 = 0, a4 = c6.length; a4 > s9; s9++)
                  u4 = c6[s9], r9.appendChild(u4);
                return [r9];
              }, s8.prototype.createContainerElement = function(e13) {
                var o12, r9, s9, a4, u4;
                return o12 = this.attributes[e13], u4 = n9(o12).tagName, 0 === e13 && this.block.isRTL() && (r9 = { dir: "rtl" }), "attachmentGallery" === o12 && (a4 = this.block.getBlockBreakPosition(), s9 = t6.attachmentGallery + " " + t6.attachmentGallery + "--" + a4), i6({ tagName: u4, className: s9, attributes: r9 });
              }, s8.prototype.shouldAddExtraNewlineElement = function() {
                return /\n\n$/.test(this.block.toString());
              }, s8;
            }(e12.ObjectView);
          }.call(this), function() {
            var t6, n9, i6 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                o11.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, o11 = {}.hasOwnProperty;
            t6 = e12.defer, n9 = e12.makeElement, e12.DocumentView = function(o12) {
              function r7() {
                r7.__super__.constructor.apply(this, arguments), this.element = this.options.element, this.elementStore = new e12.ElementStore(), this.setDocument(this.object);
              }
              var s8, a4, u4;
              return i6(r7, o12), r7.render = function(t7) {
                var e13, i7;
                return e13 = n9("div"), i7 = new this(t7, { element: e13 }), i7.render(), i7.sync(), e13;
              }, r7.prototype.setDocument = function(t7) {
                return t7.isEqualTo(this.document) ? void 0 : this.document = this.object = t7;
              }, r7.prototype.render = function() {
                var t7, i7, o13, r8, s9, a5, u5;
                if (this.childViews = [], this.shadowElement = n9("div"), !this.document.isEmpty()) {
                  for (s9 = e12.ObjectGroup.groupObjects(this.document.getBlocks(), { asTree: true }), a5 = [], t7 = 0, i7 = s9.length; i7 > t7; t7++)
                    r8 = s9[t7], u5 = this.findOrCreateCachedChildView(e12.BlockView, r8), a5.push(function() {
                      var t8, e13, n10, i8;
                      for (n10 = u5.getNodes(), i8 = [], t8 = 0, e13 = n10.length; e13 > t8; t8++)
                        o13 = n10[t8], i8.push(this.shadowElement.appendChild(o13));
                      return i8;
                    }.call(this));
                  return a5;
                }
              }, r7.prototype.isSynced = function() {
                return s8(this.shadowElement, this.element);
              }, r7.prototype.sync = function() {
                var t7;
                for (t7 = this.createDocumentFragmentForSync(); this.element.lastChild; )
                  this.element.removeChild(this.element.lastChild);
                return this.element.appendChild(t7), this.didSync();
              }, r7.prototype.didSync = function() {
                return this.elementStore.reset(a4(this.element)), t6(function(t7) {
                  return function() {
                    return t7.garbageCollectCachedViews();
                  };
                }(this));
              }, r7.prototype.createDocumentFragmentForSync = function() {
                var t7, e13, n10, i7, o13, r8, s9, u5, c6, l9;
                for (e13 = document.createDocumentFragment(), u5 = this.shadowElement.childNodes, n10 = 0, o13 = u5.length; o13 > n10; n10++)
                  s9 = u5[n10], e13.appendChild(s9.cloneNode(true));
                for (c6 = a4(e13), i7 = 0, r8 = c6.length; r8 > i7; i7++)
                  t7 = c6[i7], (l9 = this.elementStore.remove(t7)) && t7.parentNode.replaceChild(l9, t7);
                return e13;
              }, a4 = function(t7) {
                return t7.querySelectorAll("[data-trix-store-key]");
              }, s8 = function(t7, e13) {
                return u4(t7.innerHTML) === u4(e13.innerHTML);
              }, u4 = function(t7) {
                return t7.replace(/&nbsp;/g, " ");
              }, r7;
            }(e12.ObjectView);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, a4 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                u4.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, u4 = {}.hasOwnProperty;
            i6 = e12.findClosestElementFromNode, o11 = e12.handleEvent, r7 = e12.innerElementIsActive, n9 = e12.defer, t6 = e12.AttachmentView.attachmentSelector, e12.CompositionController = function(u5) {
              function c6(n10, i7) {
                this.element = n10, this.composition = i7, this.didClickAttachment = s8(this.didClickAttachment, this), this.didBlur = s8(this.didBlur, this), this.didFocus = s8(this.didFocus, this), this.documentView = new e12.DocumentView(this.composition.document, { element: this.element }), o11("focus", { onElement: this.element, withCallback: this.didFocus }), o11("blur", { onElement: this.element, withCallback: this.didBlur }), o11("click", { onElement: this.element, matchingSelector: "a[contenteditable=false]", preventDefault: true }), o11("mousedown", { onElement: this.element, matchingSelector: t6, withCallback: this.didClickAttachment }), o11("click", { onElement: this.element, matchingSelector: "a" + t6, preventDefault: true });
              }
              return a4(c6, u5), c6.prototype.didFocus = function() {
                var t7, e13, n10;
                return t7 = function(t8) {
                  return function() {
                    var e14;
                    return t8.focused ? void 0 : (t8.focused = true, null != (e14 = t8.delegate) && "function" == typeof e14.compositionControllerDidFocus ? e14.compositionControllerDidFocus() : void 0);
                  };
                }(this), null != (e13 = null != (n10 = this.blurPromise) ? n10.then(t7) : void 0) ? e13 : t7();
              }, c6.prototype.didBlur = function() {
                return this.blurPromise = new Promise(function(t7) {
                  return function(e13) {
                    return n9(function() {
                      var n10;
                      return r7(t7.element) || (t7.focused = null, null != (n10 = t7.delegate) && "function" == typeof n10.compositionControllerDidBlur && n10.compositionControllerDidBlur()), t7.blurPromise = null, e13();
                    });
                  };
                }(this));
              }, c6.prototype.didClickAttachment = function(t7, e13) {
                var n10, o12, r8;
                return n10 = this.findAttachmentForElement(e13), o12 = null != i6(t7.target, { matchingSelector: "figcaption" }), null != (r8 = this.delegate) && "function" == typeof r8.compositionControllerDidSelectAttachment ? r8.compositionControllerDidSelectAttachment(n10, { editCaption: o12 }) : void 0;
              }, c6.prototype.getSerializableElement = function() {
                return this.isEditingAttachment() ? this.documentView.shadowElement : this.element;
              }, c6.prototype.render = function() {
                var t7, e13, n10;
                return this.revision !== this.composition.revision && (this.documentView.setDocument(this.composition.document), this.documentView.render(), this.revision = this.composition.revision), this.canSyncDocumentView() && !this.documentView.isSynced() && (null != (t7 = this.delegate) && "function" == typeof t7.compositionControllerWillSyncDocumentView && t7.compositionControllerWillSyncDocumentView(), this.documentView.sync(), null != (e13 = this.delegate) && "function" == typeof e13.compositionControllerDidSyncDocumentView && e13.compositionControllerDidSyncDocumentView()), null != (n10 = this.delegate) && "function" == typeof n10.compositionControllerDidRender ? n10.compositionControllerDidRender() : void 0;
              }, c6.prototype.rerenderViewForObject = function(t7) {
                return this.invalidateViewForObject(t7), this.render();
              }, c6.prototype.invalidateViewForObject = function(t7) {
                return this.documentView.invalidateViewForObject(t7);
              }, c6.prototype.isViewCachingEnabled = function() {
                return this.documentView.isViewCachingEnabled();
              }, c6.prototype.enableViewCaching = function() {
                return this.documentView.enableViewCaching();
              }, c6.prototype.disableViewCaching = function() {
                return this.documentView.disableViewCaching();
              }, c6.prototype.refreshViewCache = function() {
                return this.documentView.garbageCollectCachedViews();
              }, c6.prototype.isEditingAttachment = function() {
                return null != this.attachmentEditor;
              }, c6.prototype.installAttachmentEditorForAttachment = function(t7, n10) {
                var i7, o12, r8;
                if ((null != (r8 = this.attachmentEditor) ? r8.attachment : void 0) !== t7 && (o12 = this.documentView.findElementForObject(t7)))
                  return this.uninstallAttachmentEditor(), i7 = this.composition.document.getAttachmentPieceForAttachment(t7), this.attachmentEditor = new e12.AttachmentEditorController(i7, o12, this.element, n10), this.attachmentEditor.delegate = this;
              }, c6.prototype.uninstallAttachmentEditor = function() {
                var t7;
                return null != (t7 = this.attachmentEditor) ? t7.uninstall() : void 0;
              }, c6.prototype.didUninstallAttachmentEditor = function() {
                return this.attachmentEditor = null, this.render();
              }, c6.prototype.attachmentEditorDidRequestUpdatingAttributesForAttachment = function(t7, e13) {
                var n10;
                return null != (n10 = this.delegate) && "function" == typeof n10.compositionControllerWillUpdateAttachment && n10.compositionControllerWillUpdateAttachment(e13), this.composition.updateAttributesForAttachment(t7, e13);
              }, c6.prototype.attachmentEditorDidRequestRemovingAttributeForAttachment = function(t7, e13) {
                var n10;
                return null != (n10 = this.delegate) && "function" == typeof n10.compositionControllerWillUpdateAttachment && n10.compositionControllerWillUpdateAttachment(e13), this.composition.removeAttributeForAttachment(t7, e13);
              }, c6.prototype.attachmentEditorDidRequestRemovalOfAttachment = function(t7) {
                var e13;
                return null != (e13 = this.delegate) && "function" == typeof e13.compositionControllerDidRequestRemovalOfAttachment ? e13.compositionControllerDidRequestRemovalOfAttachment(t7) : void 0;
              }, c6.prototype.attachmentEditorDidRequestDeselectingAttachment = function(t7) {
                var e13;
                return null != (e13 = this.delegate) && "function" == typeof e13.compositionControllerDidRequestDeselectingAttachment ? e13.compositionControllerDidRequestDeselectingAttachment(t7) : void 0;
              }, c6.prototype.canSyncDocumentView = function() {
                return !this.isEditingAttachment();
              }, c6.prototype.findAttachmentForElement = function(t7) {
                return this.composition.document.getAttachmentById(parseInt(t7.dataset.trixId, 10));
              }, c6;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, r7 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                s8.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, s8 = {}.hasOwnProperty;
            n9 = e12.handleEvent, i6 = e12.triggerEvent, t6 = e12.findClosestElementFromNode, e12.ToolbarController = function(e13) {
              function s9(t7) {
                this.element = t7, this.didKeyDownDialogInput = o11(this.didKeyDownDialogInput, this), this.didClickDialogButton = o11(this.didClickDialogButton, this), this.didClickAttributeButton = o11(this.didClickAttributeButton, this), this.didClickActionButton = o11(this.didClickActionButton, this), this.attributes = {}, this.actions = {}, this.resetDialogInputs(), n9("mousedown", { onElement: this.element, matchingSelector: a4, withCallback: this.didClickActionButton }), n9("mousedown", { onElement: this.element, matchingSelector: c6, withCallback: this.didClickAttributeButton }), n9("click", { onElement: this.element, matchingSelector: v2, preventDefault: true }), n9("click", { onElement: this.element, matchingSelector: l9, withCallback: this.didClickDialogButton }), n9("keydown", { onElement: this.element, matchingSelector: h6, withCallback: this.didKeyDownDialogInput });
              }
              var a4, u4, c6, l9, h6, p3, d3, f3, g2, m3, v2;
              return r7(s9, e13), c6 = "[data-trix-attribute]", a4 = "[data-trix-action]", v2 = c6 + ", " + a4, p3 = "[data-trix-dialog]", u4 = p3 + "[data-trix-active]", l9 = p3 + " [data-trix-method]", h6 = p3 + " [data-trix-input]", s9.prototype.didClickActionButton = function(t7, e14) {
                var n10, i7, o12;
                return null != (i7 = this.delegate) && i7.toolbarDidClickButton(), t7.preventDefault(), n10 = d3(e14), this.getDialog(n10) ? this.toggleDialog(n10) : null != (o12 = this.delegate) ? o12.toolbarDidInvokeAction(n10) : void 0;
              }, s9.prototype.didClickAttributeButton = function(t7, e14) {
                var n10, i7, o12;
                return null != (i7 = this.delegate) && i7.toolbarDidClickButton(), t7.preventDefault(), n10 = f3(e14), this.getDialog(n10) ? this.toggleDialog(n10) : null != (o12 = this.delegate) && o12.toolbarDidToggleAttribute(n10), this.refreshAttributeButtons();
              }, s9.prototype.didClickDialogButton = function(e14, n10) {
                var i7, o12;
                return i7 = t6(n10, { matchingSelector: p3 }), o12 = n10.getAttribute("data-trix-method"), this[o12].call(this, i7);
              }, s9.prototype.didKeyDownDialogInput = function(t7, e14) {
                var n10, i7;
                return 13 === t7.keyCode && (t7.preventDefault(), n10 = e14.getAttribute("name"), i7 = this.getDialog(n10), this.setAttribute(i7)), 27 === t7.keyCode ? (t7.preventDefault(), this.hideDialog()) : void 0;
              }, s9.prototype.updateActions = function(t7) {
                return this.actions = t7, this.refreshActionButtons();
              }, s9.prototype.refreshActionButtons = function() {
                return this.eachActionButton(function(t7) {
                  return function(e14, n10) {
                    return e14.disabled = t7.actions[n10] === false;
                  };
                }(this));
              }, s9.prototype.eachActionButton = function(t7) {
                var e14, n10, i7, o12, r8;
                for (o12 = this.element.querySelectorAll(a4), r8 = [], n10 = 0, i7 = o12.length; i7 > n10; n10++)
                  e14 = o12[n10], r8.push(t7(e14, d3(e14)));
                return r8;
              }, s9.prototype.updateAttributes = function(t7) {
                return this.attributes = t7, this.refreshAttributeButtons();
              }, s9.prototype.refreshAttributeButtons = function() {
                return this.eachAttributeButton(function(t7) {
                  return function(e14, n10) {
                    return e14.disabled = t7.attributes[n10] === false, t7.attributes[n10] || t7.dialogIsVisible(n10) ? (e14.setAttribute("data-trix-active", ""), e14.classList.add("trix-active")) : (e14.removeAttribute("data-trix-active"), e14.classList.remove("trix-active"));
                  };
                }(this));
              }, s9.prototype.eachAttributeButton = function(t7) {
                var e14, n10, i7, o12, r8;
                for (o12 = this.element.querySelectorAll(c6), r8 = [], n10 = 0, i7 = o12.length; i7 > n10; n10++)
                  e14 = o12[n10], r8.push(t7(e14, f3(e14)));
                return r8;
              }, s9.prototype.applyKeyboardCommand = function(t7) {
                var e14, n10, o12, r8, s10, a5, u5;
                for (s10 = JSON.stringify(t7.sort()), u5 = this.element.querySelectorAll("[data-trix-key]"), r8 = 0, a5 = u5.length; a5 > r8; r8++)
                  if (e14 = u5[r8], o12 = e14.getAttribute("data-trix-key").split("+"), n10 = JSON.stringify(o12.sort()), n10 === s10)
                    return i6("mousedown", { onElement: e14 }), true;
                return false;
              }, s9.prototype.dialogIsVisible = function(t7) {
                var e14;
                return (e14 = this.getDialog(t7)) ? e14.hasAttribute("data-trix-active") : void 0;
              }, s9.prototype.toggleDialog = function(t7) {
                return this.dialogIsVisible(t7) ? this.hideDialog() : this.showDialog(t7);
              }, s9.prototype.showDialog = function(t7) {
                var e14, n10, i7, o12, r8, s10, a5, u5, c7, l10;
                for (this.hideDialog(), null != (a5 = this.delegate) && a5.toolbarWillShowDialog(), i7 = this.getDialog(t7), i7.setAttribute("data-trix-active", ""), i7.classList.add("trix-active"), u5 = i7.querySelectorAll("input[disabled]"), o12 = 0, s10 = u5.length; s10 > o12; o12++)
                  n10 = u5[o12], n10.removeAttribute("disabled");
                return (e14 = f3(i7)) && (r8 = m3(i7, t7)) && (r8.value = null != (c7 = this.attributes[e14]) ? c7 : "", r8.select()), null != (l10 = this.delegate) ? l10.toolbarDidShowDialog(t7) : void 0;
              }, s9.prototype.setAttribute = function(t7) {
                var e14, n10, i7;
                return e14 = f3(t7), n10 = m3(t7, e14), n10.willValidate && !n10.checkValidity() ? (n10.setAttribute("data-trix-validate", ""), n10.classList.add("trix-validate"), n10.focus()) : (null != (i7 = this.delegate) && i7.toolbarDidUpdateAttribute(e14, n10.value), this.hideDialog());
              }, s9.prototype.removeAttribute = function(t7) {
                var e14, n10;
                return e14 = f3(t7), null != (n10 = this.delegate) && n10.toolbarDidRemoveAttribute(e14), this.hideDialog();
              }, s9.prototype.hideDialog = function() {
                var t7, e14;
                return (t7 = this.element.querySelector(u4)) ? (t7.removeAttribute("data-trix-active"), t7.classList.remove("trix-active"), this.resetDialogInputs(), null != (e14 = this.delegate) ? e14.toolbarDidHideDialog(g2(t7)) : void 0) : void 0;
              }, s9.prototype.resetDialogInputs = function() {
                var t7, e14, n10, i7, o12;
                for (i7 = this.element.querySelectorAll(h6), o12 = [], t7 = 0, n10 = i7.length; n10 > t7; t7++)
                  e14 = i7[t7], e14.setAttribute("disabled", "disabled"), e14.removeAttribute("data-trix-validate"), o12.push(e14.classList.remove("trix-validate"));
                return o12;
              }, s9.prototype.getDialog = function(t7) {
                return this.element.querySelector("[data-trix-dialog=" + t7 + "]");
              }, m3 = function(t7, e14) {
                return null == e14 && (e14 = f3(t7)), t7.querySelector("[data-trix-input][name='" + e14 + "']");
              }, d3 = function(t7) {
                return t7.getAttribute("data-trix-action");
              }, f3 = function(t7) {
                var e14;
                return null != (e14 = t7.getAttribute("data-trix-attribute")) ? e14 : t7.getAttribute("data-trix-dialog-attribute");
              }, g2 = function(t7) {
                return t7.getAttribute("data-trix-dialog");
              }, s9;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.ImagePreloadOperation = function(e13) {
              function n10(t7) {
                this.url = t7;
              }
              return t6(n10, e13), n10.prototype.perform = function(t7) {
                var e14;
                return e14 = new Image(), e14.onload = function(n11) {
                  return function() {
                    return e14.width = n11.width = e14.naturalWidth, e14.height = n11.height = e14.naturalHeight, t7(true, e14);
                  };
                }(this), e14.onerror = function() {
                  return t7(false);
                }, e14.src = this.url;
              }, n10;
            }(e12.Operation);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, n9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                i6.call(e13, o11) && (t7[o11] = e13[o11]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, i6 = {}.hasOwnProperty;
            e12.Attachment = function(i7) {
              function o11(n10) {
                null == n10 && (n10 = {}), this.releaseFile = t6(this.releaseFile, this), o11.__super__.constructor.apply(this, arguments), this.attributes = e12.Hash.box(n10), this.didChangeAttributes();
              }
              return n9(o11, i7), o11.previewablePattern = /^image(\/(gif|png|jpe?g)|$)/, o11.attachmentForFile = function(t7) {
                var e13, n10;
                return n10 = this.attributesForFile(t7), e13 = new this(n10), e13.setFile(t7), e13;
              }, o11.attributesForFile = function(t7) {
                return new e12.Hash({ filename: t7.name, filesize: t7.size, contentType: t7.type });
              }, o11.fromJSON = function(t7) {
                return new this(t7);
              }, o11.prototype.getAttribute = function(t7) {
                return this.attributes.get(t7);
              }, o11.prototype.hasAttribute = function(t7) {
                return this.attributes.has(t7);
              }, o11.prototype.getAttributes = function() {
                return this.attributes.toObject();
              }, o11.prototype.setAttributes = function(t7) {
                var e13, n10, i8;
                return null == t7 && (t7 = {}), e13 = this.attributes.merge(t7), this.attributes.isEqualTo(e13) ? void 0 : (this.attributes = e13, this.didChangeAttributes(), null != (n10 = this.previewDelegate) && "function" == typeof n10.attachmentDidChangeAttributes && n10.attachmentDidChangeAttributes(this), null != (i8 = this.delegate) && "function" == typeof i8.attachmentDidChangeAttributes ? i8.attachmentDidChangeAttributes(this) : void 0);
              }, o11.prototype.didChangeAttributes = function() {
                return this.isPreviewable() ? this.preloadURL() : void 0;
              }, o11.prototype.isPending = function() {
                return null != this.file && !(this.getURL() || this.getHref());
              }, o11.prototype.isPreviewable = function() {
                return this.attributes.has("previewable") ? this.attributes.get("previewable") : this.constructor.previewablePattern.test(this.getContentType());
              }, o11.prototype.getType = function() {
                return this.hasContent() ? "content" : this.isPreviewable() ? "preview" : "file";
              }, o11.prototype.getURL = function() {
                return this.attributes.get("url");
              }, o11.prototype.getHref = function() {
                return this.attributes.get("href");
              }, o11.prototype.getFilename = function() {
                var t7;
                return null != (t7 = this.attributes.get("filename")) ? t7 : "";
              }, o11.prototype.getFilesize = function() {
                return this.attributes.get("filesize");
              }, o11.prototype.getFormattedFilesize = function() {
                var t7;
                return t7 = this.attributes.get("filesize"), "number" == typeof t7 ? e12.config.fileSize.formatter(t7) : "";
              }, o11.prototype.getExtension = function() {
                var t7;
                return null != (t7 = this.getFilename().match(/\.(\w+)$/)) ? t7[1].toLowerCase() : void 0;
              }, o11.prototype.getContentType = function() {
                return this.attributes.get("contentType");
              }, o11.prototype.hasContent = function() {
                return this.attributes.has("content");
              }, o11.prototype.getContent = function() {
                return this.attributes.get("content");
              }, o11.prototype.getWidth = function() {
                return this.attributes.get("width");
              }, o11.prototype.getHeight = function() {
                return this.attributes.get("height");
              }, o11.prototype.getFile = function() {
                return this.file;
              }, o11.prototype.setFile = function(t7) {
                return this.file = t7, this.isPreviewable() ? this.preloadFile() : void 0;
              }, o11.prototype.releaseFile = function() {
                return this.releasePreloadedFile(), this.file = null;
              }, o11.prototype.getUploadProgress = function() {
                var t7;
                return null != (t7 = this.uploadProgress) ? t7 : 0;
              }, o11.prototype.setUploadProgress = function(t7) {
                var e13;
                return this.uploadProgress !== t7 ? (this.uploadProgress = t7, null != (e13 = this.uploadProgressDelegate) && "function" == typeof e13.attachmentDidChangeUploadProgress ? e13.attachmentDidChangeUploadProgress(this) : void 0) : void 0;
              }, o11.prototype.toJSON = function() {
                return this.getAttributes();
              }, o11.prototype.getCacheKey = function() {
                return [o11.__super__.getCacheKey.apply(this, arguments), this.attributes.getCacheKey(), this.getPreviewURL()].join("/");
              }, o11.prototype.getPreviewURL = function() {
                return this.previewURL || this.preloadingURL;
              }, o11.prototype.setPreviewURL = function(t7) {
                var e13, n10;
                return t7 !== this.getPreviewURL() ? (this.previewURL = t7, null != (e13 = this.previewDelegate) && "function" == typeof e13.attachmentDidChangeAttributes && e13.attachmentDidChangeAttributes(this), null != (n10 = this.delegate) && "function" == typeof n10.attachmentDidChangePreviewURL ? n10.attachmentDidChangePreviewURL(this) : void 0) : void 0;
              }, o11.prototype.preloadURL = function() {
                return this.preload(this.getURL(), this.releaseFile);
              }, o11.prototype.preloadFile = function() {
                return this.file ? (this.fileObjectURL = URL.createObjectURL(this.file), this.preload(this.fileObjectURL)) : void 0;
              }, o11.prototype.releasePreloadedFile = function() {
                return this.fileObjectURL ? (URL.revokeObjectURL(this.fileObjectURL), this.fileObjectURL = null) : void 0;
              }, o11.prototype.preload = function(t7, n10) {
                var i8;
                return t7 && t7 !== this.getPreviewURL() ? (this.preloadingURL = t7, i8 = new e12.ImagePreloadOperation(t7), i8.then(function(e13) {
                  return function(i9) {
                    var o12, r7;
                    return r7 = i9.width, o12 = i9.height, e13.getWidth() && e13.getHeight() || e13.setAttributes({ width: r7, height: o12 }), e13.preloadingURL = null, e13.setPreviewURL(t7), "function" == typeof n10 ? n10() : void 0;
                  };
                }(this))["catch"](function(t8) {
                  return function() {
                    return t8.preloadingURL = null, "function" == typeof n10 ? n10() : void 0;
                  };
                }(this))) : void 0;
              }, o11;
            }(e12.Object);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Piece = function(n10) {
              function i6(t7, n11) {
                null == n11 && (n11 = {}), i6.__super__.constructor.apply(this, arguments), this.attributes = e12.Hash.box(n11);
              }
              return t6(i6, n10), i6.types = {}, i6.registerType = function(t7, e13) {
                return e13.type = t7, this.types[t7] = e13;
              }, i6.fromJSON = function(t7) {
                var e13;
                return (e13 = this.types[t7.type]) ? e13.fromJSON(t7) : void 0;
              }, i6.prototype.copyWithAttributes = function(t7) {
                return new this.constructor(this.getValue(), t7);
              }, i6.prototype.copyWithAdditionalAttributes = function(t7) {
                return this.copyWithAttributes(this.attributes.merge(t7));
              }, i6.prototype.copyWithoutAttribute = function(t7) {
                return this.copyWithAttributes(this.attributes.remove(t7));
              }, i6.prototype.copy = function() {
                return this.copyWithAttributes(this.attributes);
              }, i6.prototype.getAttribute = function(t7) {
                return this.attributes.get(t7);
              }, i6.prototype.getAttributesHash = function() {
                return this.attributes;
              }, i6.prototype.getAttributes = function() {
                return this.attributes.toObject();
              }, i6.prototype.getCommonAttributes = function() {
                var t7, e13, n11;
                return (n11 = pieceList.getPieceAtIndex(0)) ? (t7 = n11.attributes, e13 = t7.getKeys(), pieceList.eachPiece(function(n12) {
                  return e13 = t7.getKeysCommonToHash(n12.attributes), t7 = t7.slice(e13);
                }), t7.toObject()) : {};
              }, i6.prototype.hasAttribute = function(t7) {
                return this.attributes.has(t7);
              }, i6.prototype.hasSameStringValueAsPiece = function(t7) {
                return null != t7 && this.toString() === t7.toString();
              }, i6.prototype.hasSameAttributesAsPiece = function(t7) {
                return null != t7 && (this.attributes === t7.attributes || this.attributes.isEqualTo(t7.attributes));
              }, i6.prototype.isBlockBreak = function() {
                return false;
              }, i6.prototype.isEqualTo = function(t7) {
                return i6.__super__.isEqualTo.apply(this, arguments) || this.hasSameConstructorAs(t7) && this.hasSameStringValueAsPiece(t7) && this.hasSameAttributesAsPiece(t7);
              }, i6.prototype.isEmpty = function() {
                return 0 === this.length;
              }, i6.prototype.isSerializable = function() {
                return true;
              }, i6.prototype.toJSON = function() {
                return { type: this.constructor.type, attributes: this.getAttributes() };
              }, i6.prototype.contentsForInspection = function() {
                return { type: this.constructor.type, attributes: this.attributes.inspect() };
              }, i6.prototype.canBeGrouped = function() {
                return this.hasAttribute("href");
              }, i6.prototype.canBeGroupedWith = function(t7) {
                return this.getAttribute("href") === t7.getAttribute("href");
              }, i6.prototype.getLength = function() {
                return this.length;
              }, i6.prototype.canBeConsolidatedWith = function() {
                return false;
              }, i6;
            }(e12.Object);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Piece.registerType("attachment", e12.AttachmentPiece = function(n10) {
              function i6(t7) {
                this.attachment = t7, i6.__super__.constructor.apply(this, arguments), this.length = 1, this.ensureAttachmentExclusivelyHasAttribute("href"), this.attachment.hasContent() || this.removeProhibitedAttributes();
              }
              return t6(i6, n10), i6.fromJSON = function(t7) {
                return new this(e12.Attachment.fromJSON(t7.attachment), t7.attributes);
              }, i6.permittedAttributes = ["caption", "presentation"], i6.prototype.ensureAttachmentExclusivelyHasAttribute = function(t7) {
                return this.hasAttribute(t7) ? (this.attachment.hasAttribute(t7) || this.attachment.setAttributes(this.attributes.slice(t7)), this.attributes = this.attributes.remove(t7)) : void 0;
              }, i6.prototype.removeProhibitedAttributes = function() {
                var t7;
                return t7 = this.attributes.slice(this.constructor.permittedAttributes), t7.isEqualTo(this.attributes) ? void 0 : this.attributes = t7;
              }, i6.prototype.getValue = function() {
                return this.attachment;
              }, i6.prototype.isSerializable = function() {
                return !this.attachment.isPending();
              }, i6.prototype.getCaption = function() {
                var t7;
                return null != (t7 = this.attributes.get("caption")) ? t7 : "";
              }, i6.prototype.isEqualTo = function(t7) {
                var e13;
                return i6.__super__.isEqualTo.apply(this, arguments) && this.attachment.id === (null != t7 && null != (e13 = t7.attachment) ? e13.id : void 0);
              }, i6.prototype.toString = function() {
                return e12.OBJECT_REPLACEMENT_CHARACTER;
              }, i6.prototype.toJSON = function() {
                var t7;
                return t7 = i6.__super__.toJSON.apply(this, arguments), t7.attachment = this.attachment, t7;
              }, i6.prototype.getCacheKey = function() {
                return [i6.__super__.getCacheKey.apply(this, arguments), this.attachment.getCacheKey()].join("/");
              }, i6.prototype.toConsole = function() {
                return JSON.stringify(this.toString());
              }, i6;
            }(e12.Piece));
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                i6.call(e13, o11) && (t7[o11] = e13[o11]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, i6 = {}.hasOwnProperty;
            t6 = e12.normalizeNewlines, e12.Piece.registerType("string", e12.StringPiece = function(e13) {
              function i7(e14) {
                i7.__super__.constructor.apply(this, arguments), this.string = t6(e14), this.length = this.string.length;
              }
              return n9(i7, e13), i7.fromJSON = function(t7) {
                return new this(t7.string, t7.attributes);
              }, i7.prototype.getValue = function() {
                return this.string;
              }, i7.prototype.toString = function() {
                return this.string.toString();
              }, i7.prototype.isBlockBreak = function() {
                return "\n" === this.toString() && this.getAttribute("blockBreak") === true;
              }, i7.prototype.toJSON = function() {
                var t7;
                return t7 = i7.__super__.toJSON.apply(this, arguments), t7.string = this.string, t7;
              }, i7.prototype.canBeConsolidatedWith = function(t7) {
                return null != t7 && this.hasSameConstructorAs(t7) && this.hasSameAttributesAsPiece(t7);
              }, i7.prototype.consolidateWith = function(t7) {
                return new this.constructor(this.toString() + t7.toString(), this.attributes);
              }, i7.prototype.splitAtOffset = function(t7) {
                var e14, n10;
                return 0 === t7 ? (e14 = null, n10 = this) : t7 === this.length ? (e14 = this, n10 = null) : (e14 = new this.constructor(this.string.slice(0, t7), this.attributes), n10 = new this.constructor(this.string.slice(t7), this.attributes)), [e14, n10];
              }, i7.prototype.toConsole = function() {
                var t7;
                return t7 = this.string, t7.length > 15 && (t7 = t7.slice(0, 14) + "\u2026"), JSON.stringify(t7.toString());
              }, i7;
            }(e12.Piece));
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var o12 in e13)
                i6.call(e13, o12) && (t7[o12] = e13[o12]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, i6 = {}.hasOwnProperty, o11 = [].slice;
            t6 = e12.spliceArray, e12.SplittableList = function(e13) {
              function i7(t7) {
                null == t7 && (t7 = []), i7.__super__.constructor.apply(this, arguments), this.objects = t7.slice(0), this.length = this.objects.length;
              }
              var r7, s8, a4;
              return n9(i7, e13), i7.box = function(t7) {
                return t7 instanceof this ? t7 : new this(t7);
              }, i7.prototype.indexOf = function(t7) {
                return this.objects.indexOf(t7);
              }, i7.prototype.splice = function() {
                var e14;
                return e14 = 1 <= arguments.length ? o11.call(arguments, 0) : [], new this.constructor(t6.apply(null, [this.objects].concat(o11.call(e14))));
              }, i7.prototype.eachObject = function(t7) {
                var e14, n10, i8, o12, r8, s9;
                for (r8 = this.objects, s9 = [], n10 = e14 = 0, i8 = r8.length; i8 > e14; n10 = ++e14)
                  o12 = r8[n10], s9.push(t7(o12, n10));
                return s9;
              }, i7.prototype.insertObjectAtIndex = function(t7, e14) {
                return this.splice(e14, 0, t7);
              }, i7.prototype.insertSplittableListAtIndex = function(t7, e14) {
                return this.splice.apply(this, [e14, 0].concat(o11.call(t7.objects)));
              }, i7.prototype.insertSplittableListAtPosition = function(t7, e14) {
                var n10, i8, o12;
                return o12 = this.splitObjectAtPosition(e14), i8 = o12[0], n10 = o12[1], new this.constructor(i8).insertSplittableListAtIndex(t7, n10);
              }, i7.prototype.editObjectAtIndex = function(t7, e14) {
                return this.replaceObjectAtIndex(e14(this.objects[t7]), t7);
              }, i7.prototype.replaceObjectAtIndex = function(t7, e14) {
                return this.splice(e14, 1, t7);
              }, i7.prototype.removeObjectAtIndex = function(t7) {
                return this.splice(t7, 1);
              }, i7.prototype.getObjectAtIndex = function(t7) {
                return this.objects[t7];
              }, i7.prototype.getSplittableListInRange = function(t7) {
                var e14, n10, i8, o12;
                return i8 = this.splitObjectsAtRange(t7), n10 = i8[0], e14 = i8[1], o12 = i8[2], new this.constructor(n10.slice(e14, o12 + 1));
              }, i7.prototype.selectSplittableList = function(t7) {
                var e14, n10;
                return n10 = function() {
                  var n11, i8, o12, r8;
                  for (o12 = this.objects, r8 = [], n11 = 0, i8 = o12.length; i8 > n11; n11++)
                    e14 = o12[n11], t7(e14) && r8.push(e14);
                  return r8;
                }.call(this), new this.constructor(n10);
              }, i7.prototype.removeObjectsInRange = function(t7) {
                var e14, n10, i8, o12;
                return i8 = this.splitObjectsAtRange(t7), n10 = i8[0], e14 = i8[1], o12 = i8[2], new this.constructor(n10).splice(e14, o12 - e14 + 1);
              }, i7.prototype.transformObjectsInRange = function(t7, e14) {
                var n10, i8, o12, r8, s9, a5, u4;
                return s9 = this.splitObjectsAtRange(t7), r8 = s9[0], i8 = s9[1], a5 = s9[2], u4 = function() {
                  var t8, s10, u5;
                  for (u5 = [], n10 = t8 = 0, s10 = r8.length; s10 > t8; n10 = ++t8)
                    o12 = r8[n10], u5.push(n10 >= i8 && a5 >= n10 ? e14(o12) : o12);
                  return u5;
                }(), new this.constructor(u4);
              }, i7.prototype.splitObjectsAtRange = function(t7) {
                var e14, n10, i8, o12, s9, u4;
                return o12 = this.splitObjectAtPosition(a4(t7)), n10 = o12[0], e14 = o12[1], i8 = o12[2], s9 = new this.constructor(n10).splitObjectAtPosition(r7(t7) + i8), n10 = s9[0], u4 = s9[1], [n10, e14, u4 - 1];
              }, i7.prototype.getObjectAtPosition = function(t7) {
                var e14, n10, i8;
                return i8 = this.findIndexAndOffsetAtPosition(t7), e14 = i8.index, n10 = i8.offset, this.objects[e14];
              }, i7.prototype.splitObjectAtPosition = function(t7) {
                var e14, n10, i8, o12, r8, s9, a5, u4, c6, l9;
                return s9 = this.findIndexAndOffsetAtPosition(t7), e14 = s9.index, r8 = s9.offset, o12 = this.objects.slice(0), null != e14 ? 0 === r8 ? (c6 = e14, l9 = 0) : (i8 = this.getObjectAtIndex(e14), a5 = i8.splitAtOffset(r8), n10 = a5[0], u4 = a5[1], o12.splice(e14, 1, n10, u4), c6 = e14 + 1, l9 = n10.getLength() - r8) : (c6 = o12.length, l9 = 0), [o12, c6, l9];
              }, i7.prototype.consolidate = function() {
                var t7, e14, n10, i8, o12, r8;
                for (i8 = [], o12 = this.objects[0], r8 = this.objects.slice(1), t7 = 0, e14 = r8.length; e14 > t7; t7++)
                  n10 = r8[t7], ("function" == typeof o12.canBeConsolidatedWith ? o12.canBeConsolidatedWith(n10) : void 0) ? o12 = o12.consolidateWith(n10) : (i8.push(o12), o12 = n10);
                return null != o12 && i8.push(o12), new this.constructor(i8);
              }, i7.prototype.consolidateFromIndexToIndex = function(t7, e14) {
                var n10, i8, r8;
                return i8 = this.objects.slice(0), r8 = i8.slice(t7, e14 + 1), n10 = new this.constructor(r8).consolidate().toArray(), this.splice.apply(this, [t7, r8.length].concat(o11.call(n10)));
              }, i7.prototype.findIndexAndOffsetAtPosition = function(t7) {
                var e14, n10, i8, o12, r8, s9, a5;
                for (e14 = 0, a5 = this.objects, i8 = n10 = 0, o12 = a5.length; o12 > n10; i8 = ++n10) {
                  if (s9 = a5[i8], r8 = e14 + s9.getLength(), t7 >= e14 && r8 > t7)
                    return { index: i8, offset: t7 - e14 };
                  e14 = r8;
                }
                return { index: null, offset: null };
              }, i7.prototype.findPositionAtIndexAndOffset = function(t7, e14) {
                var n10, i8, o12, r8, s9, a5;
                for (s9 = 0, a5 = this.objects, n10 = i8 = 0, o12 = a5.length; o12 > i8; n10 = ++i8)
                  if (r8 = a5[n10], t7 > n10)
                    s9 += r8.getLength();
                  else if (n10 === t7) {
                    s9 += e14;
                    break;
                  }
                return s9;
              }, i7.prototype.getEndPosition = function() {
                var t7, e14;
                return null != this.endPosition ? this.endPosition : this.endPosition = function() {
                  var n10, i8, o12;
                  for (e14 = 0, o12 = this.objects, n10 = 0, i8 = o12.length; i8 > n10; n10++)
                    t7 = o12[n10], e14 += t7.getLength();
                  return e14;
                }.call(this);
              }, i7.prototype.toString = function() {
                return this.objects.join("");
              }, i7.prototype.toArray = function() {
                return this.objects.slice(0);
              }, i7.prototype.toJSON = function() {
                return this.toArray();
              }, i7.prototype.isEqualTo = function(t7) {
                return i7.__super__.isEqualTo.apply(this, arguments) || s8(this.objects, null != t7 ? t7.objects : void 0);
              }, s8 = function(t7, e14) {
                var n10, i8, o12, r8, s9;
                if (null == e14 && (e14 = []), t7.length !== e14.length)
                  return false;
                for (s9 = true, i8 = n10 = 0, o12 = t7.length; o12 > n10; i8 = ++n10)
                  r8 = t7[i8], s9 && !r8.isEqualTo(e14[i8]) && (s9 = false);
                return s9;
              }, i7.prototype.contentsForInspection = function() {
                var t7;
                return { objects: "[" + function() {
                  var e14, n10, i8, o12;
                  for (i8 = this.objects, o12 = [], e14 = 0, n10 = i8.length; n10 > e14; e14++)
                    t7 = i8[e14], o12.push(t7.inspect());
                  return o12;
                }.call(this).join(", ") + "]" };
              }, a4 = function(t7) {
                return t7[0];
              }, r7 = function(t7) {
                return t7[1];
              }, i7;
            }(e12.Object);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.Text = function(n10) {
              function i6(t7) {
                var n11;
                null == t7 && (t7 = []), i6.__super__.constructor.apply(this, arguments), this.pieceList = new e12.SplittableList(function() {
                  var e13, i7, o11;
                  for (o11 = [], e13 = 0, i7 = t7.length; i7 > e13; e13++)
                    n11 = t7[e13], n11.isEmpty() || o11.push(n11);
                  return o11;
                }());
              }
              return t6(i6, n10), i6.textForAttachmentWithAttributes = function(t7, n11) {
                var i7;
                return i7 = new e12.AttachmentPiece(t7, n11), new this([i7]);
              }, i6.textForStringWithAttributes = function(t7, n11) {
                var i7;
                return i7 = new e12.StringPiece(t7, n11), new this([i7]);
              }, i6.fromJSON = function(t7) {
                var n11, i7;
                return i7 = function() {
                  var i8, o11, r7;
                  for (r7 = [], i8 = 0, o11 = t7.length; o11 > i8; i8++)
                    n11 = t7[i8], r7.push(e12.Piece.fromJSON(n11));
                  return r7;
                }(), new this(i7);
              }, i6.prototype.copy = function() {
                return this.copyWithPieceList(this.pieceList);
              }, i6.prototype.copyWithPieceList = function(t7) {
                return new this.constructor(t7.consolidate().toArray());
              }, i6.prototype.copyUsingObjectMap = function(t7) {
                var e13, n11;
                return n11 = function() {
                  var n12, i7, o11, r7, s8;
                  for (o11 = this.getPieces(), s8 = [], n12 = 0, i7 = o11.length; i7 > n12; n12++)
                    e13 = o11[n12], s8.push(null != (r7 = t7.find(e13)) ? r7 : e13);
                  return s8;
                }.call(this), new this.constructor(n11);
              }, i6.prototype.appendText = function(t7) {
                return this.insertTextAtPosition(t7, this.getLength());
              }, i6.prototype.insertTextAtPosition = function(t7, e13) {
                return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(t7.pieceList, e13));
              }, i6.prototype.removeTextAtRange = function(t7) {
                return this.copyWithPieceList(this.pieceList.removeObjectsInRange(t7));
              }, i6.prototype.replaceTextAtRange = function(t7, e13) {
                return this.removeTextAtRange(e13).insertTextAtPosition(t7, e13[0]);
              }, i6.prototype.moveTextFromRangeToPosition = function(t7, e13) {
                var n11, i7;
                if (!(t7[0] <= e13 && e13 <= t7[1]))
                  return i7 = this.getTextAtRange(t7), n11 = i7.getLength(), t7[0] < e13 && (e13 -= n11), this.removeTextAtRange(t7).insertTextAtPosition(i7, e13);
              }, i6.prototype.addAttributeAtRange = function(t7, e13, n11) {
                var i7;
                return i7 = {}, i7[t7] = e13, this.addAttributesAtRange(i7, n11);
              }, i6.prototype.addAttributesAtRange = function(t7, e13) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e13, function(e14) {
                  return e14.copyWithAdditionalAttributes(t7);
                }));
              }, i6.prototype.removeAttributeAtRange = function(t7, e13) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e13, function(e14) {
                  return e14.copyWithoutAttribute(t7);
                }));
              }, i6.prototype.setAttributesAtRange = function(t7, e13) {
                return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e13, function(e14) {
                  return e14.copyWithAttributes(t7);
                }));
              }, i6.prototype.getAttributesAtPosition = function(t7) {
                var e13, n11;
                return null != (e13 = null != (n11 = this.pieceList.getObjectAtPosition(t7)) ? n11.getAttributes() : void 0) ? e13 : {};
              }, i6.prototype.getCommonAttributes = function() {
                var t7, n11;
                return t7 = function() {
                  var t8, e13, i7, o11;
                  for (i7 = this.pieceList.toArray(), o11 = [], t8 = 0, e13 = i7.length; e13 > t8; t8++)
                    n11 = i7[t8], o11.push(n11.getAttributes());
                  return o11;
                }.call(this), e12.Hash.fromCommonAttributesOfObjects(t7).toObject();
              }, i6.prototype.getCommonAttributesAtRange = function(t7) {
                var e13;
                return null != (e13 = this.getTextAtRange(t7).getCommonAttributes()) ? e13 : {};
              }, i6.prototype.getExpandedRangeForAttributeAtOffset = function(t7, e13) {
                var n11, i7, o11;
                for (n11 = o11 = e13, i7 = this.getLength(); n11 > 0 && this.getCommonAttributesAtRange([n11 - 1, o11])[t7]; )
                  n11--;
                for (; i7 > o11 && this.getCommonAttributesAtRange([e13, o11 + 1])[t7]; )
                  o11++;
                return [n11, o11];
              }, i6.prototype.getTextAtRange = function(t7) {
                return this.copyWithPieceList(this.pieceList.getSplittableListInRange(t7));
              }, i6.prototype.getStringAtRange = function(t7) {
                return this.pieceList.getSplittableListInRange(t7).toString();
              }, i6.prototype.getStringAtPosition = function(t7) {
                return this.getStringAtRange([t7, t7 + 1]);
              }, i6.prototype.startsWithString = function(t7) {
                return this.getStringAtRange([0, t7.length]) === t7;
              }, i6.prototype.endsWithString = function(t7) {
                var e13;
                return e13 = this.getLength(), this.getStringAtRange([e13 - t7.length, e13]) === t7;
              }, i6.prototype.getAttachmentPieces = function() {
                var t7, e13, n11, i7, o11;
                for (i7 = this.pieceList.toArray(), o11 = [], t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  n11 = i7[t7], null != n11.attachment && o11.push(n11);
                return o11;
              }, i6.prototype.getAttachments = function() {
                var t7, e13, n11, i7, o11;
                for (i7 = this.getAttachmentPieces(), o11 = [], t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  n11 = i7[t7], o11.push(n11.attachment);
                return o11;
              }, i6.prototype.getAttachmentAndPositionById = function(t7) {
                var e13, n11, i7, o11, r7, s8;
                for (o11 = 0, r7 = this.pieceList.toArray(), e13 = 0, n11 = r7.length; n11 > e13; e13++) {
                  if (i7 = r7[e13], (null != (s8 = i7.attachment) ? s8.id : void 0) === t7)
                    return { attachment: i7.attachment, position: o11 };
                  o11 += i7.length;
                }
                return { attachment: null, position: null };
              }, i6.prototype.getAttachmentById = function(t7) {
                var e13, n11, i7;
                return i7 = this.getAttachmentAndPositionById(t7), e13 = i7.attachment, n11 = i7.position, e13;
              }, i6.prototype.getRangeOfAttachment = function(t7) {
                var e13, n11;
                return n11 = this.getAttachmentAndPositionById(t7.id), t7 = n11.attachment, e13 = n11.position, null != t7 ? [e13, e13 + 1] : void 0;
              }, i6.prototype.updateAttributesForAttachment = function(t7, e13) {
                var n11;
                return (n11 = this.getRangeOfAttachment(e13)) ? this.addAttributesAtRange(t7, n11) : this;
              }, i6.prototype.getLength = function() {
                return this.pieceList.getEndPosition();
              }, i6.prototype.isEmpty = function() {
                return 0 === this.getLength();
              }, i6.prototype.isEqualTo = function(t7) {
                var e13;
                return i6.__super__.isEqualTo.apply(this, arguments) || (null != t7 && null != (e13 = t7.pieceList) ? e13.isEqualTo(this.pieceList) : void 0);
              }, i6.prototype.isBlockBreak = function() {
                return 1 === this.getLength() && this.pieceList.getObjectAtIndex(0).isBlockBreak();
              }, i6.prototype.eachPiece = function(t7) {
                return this.pieceList.eachObject(t7);
              }, i6.prototype.getPieces = function() {
                return this.pieceList.toArray();
              }, i6.prototype.getPieceAtPosition = function(t7) {
                return this.pieceList.getObjectAtPosition(t7);
              }, i6.prototype.contentsForInspection = function() {
                return { pieceList: this.pieceList.inspect() };
              }, i6.prototype.toSerializableText = function() {
                var t7;
                return t7 = this.pieceList.selectSplittableList(function(t8) {
                  return t8.isSerializable();
                }), this.copyWithPieceList(t7);
              }, i6.prototype.toString = function() {
                return this.pieceList.toString();
              }, i6.prototype.toJSON = function() {
                return this.pieceList.toJSON();
              }, i6.prototype.toConsole = function() {
                var t7;
                return JSON.stringify(function() {
                  var e13, n11, i7, o11;
                  for (i7 = this.pieceList.toArray(), o11 = [], e13 = 0, n11 = i7.length; n11 > e13; e13++)
                    t7 = i7[e13], o11.push(JSON.parse(t7.toConsole()));
                  return o11;
                }.call(this));
              }, i6.prototype.getDirection = function() {
                return e12.getDirection(this.toString());
              }, i6.prototype.isRTL = function() {
                return "rtl" === this.getDirection();
              }, i6;
            }(e12.Object);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                a4.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, a4 = {}.hasOwnProperty, u4 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            }, c6 = [].slice;
            t6 = e12.arraysAreEqual, r7 = e12.spliceArray, i6 = e12.getBlockConfig, n9 = e12.getBlockAttributeNames, o11 = e12.getListAttributeNames, e12.Block = function(n10) {
              function a5(t7, n11) {
                null == t7 && (t7 = new e12.Text()), null == n11 && (n11 = []), a5.__super__.constructor.apply(this, arguments), this.text = h6(t7), this.attributes = n11;
              }
              var l9, h6, p3, d3, f3, g2, m3, v2, y2;
              return s8(a5, n10), a5.fromJSON = function(t7) {
                var n11;
                return n11 = e12.Text.fromJSON(t7.text), new this(n11, t7.attributes);
              }, a5.prototype.isEmpty = function() {
                return this.text.isBlockBreak();
              }, a5.prototype.isEqualTo = function(e13) {
                return a5.__super__.isEqualTo.apply(this, arguments) || this.text.isEqualTo(null != e13 ? e13.text : void 0) && t6(this.attributes, null != e13 ? e13.attributes : void 0);
              }, a5.prototype.copyWithText = function(t7) {
                return new this.constructor(t7, this.attributes);
              }, a5.prototype.copyWithoutText = function() {
                return this.copyWithText(null);
              }, a5.prototype.copyWithAttributes = function(t7) {
                return new this.constructor(this.text, t7);
              }, a5.prototype.copyWithoutAttributes = function() {
                return this.copyWithAttributes(null);
              }, a5.prototype.copyUsingObjectMap = function(t7) {
                var e13;
                return this.copyWithText((e13 = t7.find(this.text)) ? e13 : this.text.copyUsingObjectMap(t7));
              }, a5.prototype.addAttribute = function(t7) {
                var e13;
                return e13 = this.attributes.concat(d3(t7)), this.copyWithAttributes(e13);
              }, a5.prototype.removeAttribute = function(t7) {
                var e13, n11;
                return n11 = i6(t7).listAttribute, e13 = g2(g2(this.attributes, t7), n11), this.copyWithAttributes(e13);
              }, a5.prototype.removeLastAttribute = function() {
                return this.removeAttribute(this.getLastAttribute());
              }, a5.prototype.getLastAttribute = function() {
                return f3(this.attributes);
              }, a5.prototype.getAttributes = function() {
                return this.attributes.slice(0);
              }, a5.prototype.getAttributeLevel = function() {
                return this.attributes.length;
              }, a5.prototype.getAttributeAtLevel = function(t7) {
                return this.attributes[t7 - 1];
              }, a5.prototype.hasAttribute = function(t7) {
                return u4.call(this.attributes, t7) >= 0;
              }, a5.prototype.hasAttributes = function() {
                return this.getAttributeLevel() > 0;
              }, a5.prototype.getLastNestableAttribute = function() {
                return f3(this.getNestableAttributes());
              }, a5.prototype.getNestableAttributes = function() {
                var t7, e13, n11, o12, r8;
                for (o12 = this.attributes, r8 = [], e13 = 0, n11 = o12.length; n11 > e13; e13++)
                  t7 = o12[e13], i6(t7).nestable && r8.push(t7);
                return r8;
              }, a5.prototype.getNestingLevel = function() {
                return this.getNestableAttributes().length;
              }, a5.prototype.decreaseNestingLevel = function() {
                var t7;
                return (t7 = this.getLastNestableAttribute()) ? this.removeAttribute(t7) : this;
              }, a5.prototype.increaseNestingLevel = function() {
                var t7, e13, n11;
                return (t7 = this.getLastNestableAttribute()) ? (n11 = this.attributes.lastIndexOf(t7), e13 = r7.apply(null, [this.attributes, n11 + 1, 0].concat(c6.call(d3(t7)))), this.copyWithAttributes(e13)) : this;
              }, a5.prototype.getListItemAttributes = function() {
                var t7, e13, n11, o12, r8;
                for (o12 = this.attributes, r8 = [], e13 = 0, n11 = o12.length; n11 > e13; e13++)
                  t7 = o12[e13], i6(t7).listAttribute && r8.push(t7);
                return r8;
              }, a5.prototype.isListItem = function() {
                var t7;
                return null != (t7 = i6(this.getLastAttribute())) ? t7.listAttribute : void 0;
              }, a5.prototype.isTerminalBlock = function() {
                var t7;
                return null != (t7 = i6(this.getLastAttribute())) ? t7.terminal : void 0;
              }, a5.prototype.breaksOnReturn = function() {
                var t7;
                return null != (t7 = i6(this.getLastAttribute())) ? t7.breakOnReturn : void 0;
              }, a5.prototype.findLineBreakInDirectionFromPosition = function(t7, e13) {
                var n11, i7;
                return i7 = this.toString(), n11 = function() {
                  switch (t7) {
                    case "forward":
                      return i7.indexOf("\n", e13);
                    case "backward":
                      return i7.slice(0, e13).lastIndexOf("\n");
                  }
                }(), -1 !== n11 ? n11 : void 0;
              }, a5.prototype.contentsForInspection = function() {
                return { text: this.text.inspect(), attributes: this.attributes };
              }, a5.prototype.toString = function() {
                return this.text.toString();
              }, a5.prototype.toJSON = function() {
                return { text: this.text, attributes: this.attributes };
              }, a5.prototype.getDirection = function() {
                return this.text.getDirection();
              }, a5.prototype.isRTL = function() {
                return this.text.isRTL();
              }, a5.prototype.getLength = function() {
                return this.text.getLength();
              }, a5.prototype.canBeConsolidatedWith = function(t7) {
                return !this.hasAttributes() && !t7.hasAttributes() && this.getDirection() === t7.getDirection();
              }, a5.prototype.consolidateWith = function(t7) {
                var n11, i7;
                return n11 = e12.Text.textForStringWithAttributes("\n"), i7 = this.getTextWithoutBlockBreak().appendText(n11), this.copyWithText(i7.appendText(t7.text));
              }, a5.prototype.splitAtOffset = function(t7) {
                var e13, n11;
                return 0 === t7 ? (e13 = null, n11 = this) : t7 === this.getLength() ? (e13 = this, n11 = null) : (e13 = this.copyWithText(this.text.getTextAtRange([0, t7])), n11 = this.copyWithText(this.text.getTextAtRange([t7, this.getLength()]))), [e13, n11];
              }, a5.prototype.getBlockBreakPosition = function() {
                return this.text.getLength() - 1;
              }, a5.prototype.getTextWithoutBlockBreak = function() {
                return m3(this.text) ? this.text.getTextAtRange([0, this.getBlockBreakPosition()]) : this.text.copy();
              }, a5.prototype.canBeGrouped = function(t7) {
                return this.attributes[t7];
              }, a5.prototype.canBeGroupedWith = function(t7, e13) {
                var n11, r8, s9, a6;
                return s9 = t7.getAttributes(), r8 = s9[e13], n11 = this.attributes[e13], !(n11 !== r8 || i6(n11).group === false && (a6 = s9[e13 + 1], u4.call(o11(), a6) < 0) || this.getDirection() !== t7.getDirection() && !t7.isEmpty());
              }, h6 = function(t7) {
                return t7 = y2(t7), t7 = l9(t7);
              }, y2 = function(t7) {
                var n11, i7, o12, r8, s9, a6;
                return r8 = false, a6 = t7.getPieces(), i7 = 2 <= a6.length ? c6.call(a6, 0, n11 = a6.length - 1) : (n11 = 0, []), o12 = a6[n11++], null == o12 ? t7 : (i7 = function() {
                  var t8, e13, n12;
                  for (n12 = [], t8 = 0, e13 = i7.length; e13 > t8; t8++)
                    s9 = i7[t8], s9.isBlockBreak() ? (r8 = true, n12.push(v2(s9))) : n12.push(s9);
                  return n12;
                }(), r8 ? new e12.Text(c6.call(i7).concat([o12])) : t7);
              }, p3 = e12.Text.textForStringWithAttributes("\n", { blockBreak: true }), l9 = function(t7) {
                return m3(t7) ? t7 : t7.appendText(p3);
              }, m3 = function(t7) {
                var e13, n11;
                return n11 = t7.getLength(), 0 === n11 ? false : (e13 = t7.getTextAtRange([n11 - 1, n11]), e13.isBlockBreak());
              }, v2 = function(t7) {
                return t7.copyWithoutAttribute("blockBreak");
              }, d3 = function(t7) {
                var e13;
                return e13 = i6(t7).listAttribute, null != e13 ? [e13, t7] : [t7];
              }, f3 = function(t7) {
                return t7.slice(-1)[0];
              }, g2 = function(t7, e13) {
                var n11;
                return n11 = t7.lastIndexOf(e13), -1 === n11 ? t7 : r7(t7, n11, 1);
              }, a5;
            }(e12.Object);
          }.call(this), function() {
            var t6, n9, i6, o11 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                r7.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, r7 = {}.hasOwnProperty, s8 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            }, a4 = [].slice;
            n9 = e12.tagName, i6 = e12.walkTree, t6 = e12.nodeIsAttachmentElement, e12.HTMLSanitizer = function(r8) {
              function u4(t7, e13) {
                var n10;
                n10 = null != e13 ? e13 : {}, this.allowedAttributes = n10.allowedAttributes, this.forbiddenProtocols = n10.forbiddenProtocols, this.forbiddenElements = n10.forbiddenElements, null == this.allowedAttributes && (this.allowedAttributes = c6), null == this.forbiddenProtocols && (this.forbiddenProtocols = h6), null == this.forbiddenElements && (this.forbiddenElements = l9), this.body = p3(t7);
              }
              var c6, l9, h6, p3;
              return o11(u4, r8), c6 = "style href src width height class".split(" "), h6 = "javascript:".split(" "), l9 = "script iframe".split(" "), u4.sanitize = function(t7, e13) {
                var n10;
                return n10 = new this(t7, e13), n10.sanitize(), n10;
              }, u4.prototype.sanitize = function() {
                return this.sanitizeElements(), this.normalizeListElementNesting();
              }, u4.prototype.getHTML = function() {
                return this.body.innerHTML;
              }, u4.prototype.getBody = function() {
                return this.body;
              }, u4.prototype.sanitizeElements = function() {
                var t7, n10, o12, r9, s9;
                for (s9 = i6(this.body), r9 = []; s9.nextNode(); )
                  switch (o12 = s9.currentNode, o12.nodeType) {
                    case Node.ELEMENT_NODE:
                      this.elementIsRemovable(o12) ? r9.push(o12) : this.sanitizeElement(o12);
                      break;
                    case Node.COMMENT_NODE:
                      r9.push(o12);
                  }
                for (t7 = 0, n10 = r9.length; n10 > t7; t7++)
                  o12 = r9[t7], e12.removeNode(o12);
                return this.body;
              }, u4.prototype.sanitizeElement = function(t7) {
                var e13, n10, i7, o12, r9;
                for (t7.hasAttribute("href") && (o12 = t7.protocol, s8.call(this.forbiddenProtocols, o12) >= 0 && t7.removeAttribute("href")), r9 = a4.call(t7.attributes), e13 = 0, n10 = r9.length; n10 > e13; e13++)
                  i7 = r9[e13].name, s8.call(this.allowedAttributes, i7) >= 0 || 0 === i7.indexOf("data-trix") || t7.removeAttribute(i7);
                return t7;
              }, u4.prototype.normalizeListElementNesting = function() {
                var t7, e13, i7, o12, r9;
                for (r9 = a4.call(this.body.querySelectorAll("ul,ol")), t7 = 0, e13 = r9.length; e13 > t7; t7++)
                  i7 = r9[t7], (o12 = i7.previousElementSibling) && "li" === n9(o12) && o12.appendChild(i7);
                return this.body;
              }, u4.prototype.elementIsRemovable = function(t7) {
                return (null != t7 ? t7.nodeType : void 0) === Node.ELEMENT_NODE ? this.elementIsForbidden(t7) || this.elementIsntSerializable(t7) : void 0;
              }, u4.prototype.elementIsForbidden = function(t7) {
                var e13;
                return e13 = n9(t7), s8.call(this.forbiddenElements, e13) >= 0;
              }, u4.prototype.elementIsntSerializable = function(e13) {
                return "false" === e13.getAttribute("data-trix-serialize") && !t6(e13);
              }, p3 = function(t7) {
                var e13, n10, i7, o12, r9;
                for (null == t7 && (t7 = ""), t7 = t7.replace(/<\/html[^>]*>[^]*$/i, "</html>"), e13 = document.implementation.createHTMLDocument(""), e13.documentElement.innerHTML = t7, r9 = e13.head.querySelectorAll("style"), i7 = 0, o12 = r9.length; o12 > i7; i7++)
                  n10 = r9[i7], e13.body.appendChild(n10);
                return e13.body;
              }, u4;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6, l9, h6, p3 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                d3.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, d3 = {}.hasOwnProperty, f3 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = e12.arraysAreEqual, s8 = e12.makeElement, l9 = e12.tagName, r7 = e12.getBlockTagNames, h6 = e12.walkTree, o11 = e12.findClosestElementFromNode, i6 = e12.elementContainsNode, a4 = e12.nodeIsAttachmentElement, u4 = e12.normalizeSpaces, n9 = e12.breakableWhitespacePattern, c6 = e12.squishBreakableWhitespace, e12.HTMLParser = function(d4) {
              function g2(t7, e13) {
                this.html = t7, this.referenceElement = (null != e13 ? e13 : {}).referenceElement, this.blocks = [], this.blockElements = [], this.processedElements = [];
              }
              var m3, v2, y2, b2, A2, C2, x2, w2, E2, S3, R2, k2;
              return p3(g2, d4), g2.parse = function(t7, e13) {
                var n10;
                return n10 = new this(t7, e13), n10.parse(), n10;
              }, g2.prototype.getDocument = function() {
                return e12.Document.fromJSON(this.blocks);
              }, g2.prototype.parse = function() {
                var t7, n10;
                try {
                  for (this.createHiddenContainer(), t7 = e12.HTMLSanitizer.sanitize(this.html).getHTML(), this.containerElement.innerHTML = t7, n10 = h6(this.containerElement, { usingFilter: x2 }); n10.nextNode(); )
                    this.processNode(n10.currentNode);
                  return this.translateBlockElementMarginsToNewlines();
                } finally {
                  this.removeHiddenContainer();
                }
              }, g2.prototype.createHiddenContainer = function() {
                return this.referenceElement ? (this.containerElement = this.referenceElement.cloneNode(false), this.containerElement.removeAttribute("id"), this.containerElement.setAttribute("data-trix-internal", ""), this.containerElement.style.display = "none", this.referenceElement.parentNode.insertBefore(this.containerElement, this.referenceElement.nextSibling)) : (this.containerElement = s8({ tagName: "div", style: { display: "none" } }), document.body.appendChild(this.containerElement));
              }, g2.prototype.removeHiddenContainer = function() {
                return e12.removeNode(this.containerElement);
              }, x2 = function(t7) {
                return "style" === l9(t7) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, g2.prototype.processNode = function(t7) {
                switch (t7.nodeType) {
                  case Node.TEXT_NODE:
                    if (!this.isInsignificantTextNode(t7))
                      return this.appendBlockForTextNode(t7), this.processTextNode(t7);
                    break;
                  case Node.ELEMENT_NODE:
                    return this.appendBlockForElement(t7), this.processElement(t7);
                }
              }, g2.prototype.appendBlockForTextNode = function(e13) {
                var n10, i7, o12;
                return i7 = e13.parentNode, i7 === this.currentBlockElement && this.isBlockElement(e13.previousSibling) ? this.appendStringWithAttributes("\n") : i7 !== this.containerElement && !this.isBlockElement(i7) || (n10 = this.getBlockAttributes(i7), t6(n10, null != (o12 = this.currentBlock) ? o12.attributes : void 0)) ? void 0 : (this.currentBlock = this.appendBlockForAttributesWithElement(n10, i7), this.currentBlockElement = i7);
              }, g2.prototype.appendBlockForElement = function(e13) {
                var n10, o12, r8, s9;
                if (r8 = this.isBlockElement(e13), o12 = i6(this.currentBlockElement, e13), r8 && !this.isBlockElement(e13.firstChild)) {
                  if ((!this.isInsignificantTextNode(e13.firstChild) || !this.isBlockElement(e13.firstElementChild)) && (n10 = this.getBlockAttributes(e13), e13.firstChild))
                    return o12 && t6(n10, this.currentBlock.attributes) ? this.appendStringWithAttributes("\n") : (this.currentBlock = this.appendBlockForAttributesWithElement(n10, e13), this.currentBlockElement = e13);
                } else if (this.currentBlockElement && !o12 && !r8)
                  return (s9 = this.findParentBlockElement(e13)) ? this.appendBlockForElement(s9) : (this.currentBlock = this.appendEmptyBlock(), this.currentBlockElement = null);
              }, g2.prototype.findParentBlockElement = function(t7) {
                var e13;
                for (e13 = t7.parentElement; e13 && e13 !== this.containerElement; ) {
                  if (this.isBlockElement(e13) && f3.call(this.blockElements, e13) >= 0)
                    return e13;
                  e13 = e13.parentElement;
                }
                return null;
              }, g2.prototype.processTextNode = function(t7) {
                var e13, n10;
                return n10 = t7.data, v2(t7.parentNode) || (n10 = c6(n10), R2(null != (e13 = t7.previousSibling) ? e13.textContent : void 0) && (n10 = A2(n10))), this.appendStringWithAttributes(n10, this.getTextAttributes(t7.parentNode));
              }, g2.prototype.processElement = function(t7) {
                var e13, n10, i7, o12, r8;
                if (a4(t7))
                  return e13 = w2(t7, "attachment"), Object.keys(e13).length && (o12 = this.getTextAttributes(t7), this.appendAttachmentWithAttributes(e13, o12), t7.innerHTML = ""), this.processedElements.push(t7);
                switch (l9(t7)) {
                  case "br":
                    return this.isExtraBR(t7) || this.isBlockElement(t7.nextSibling) || this.appendStringWithAttributes("\n", this.getTextAttributes(t7)), this.processedElements.push(t7);
                  case "img":
                    e13 = { url: t7.getAttribute("src"), contentType: "image" }, i7 = b2(t7);
                    for (n10 in i7)
                      r8 = i7[n10], e13[n10] = r8;
                    return this.appendAttachmentWithAttributes(e13, this.getTextAttributes(t7)), this.processedElements.push(t7);
                  case "tr":
                    if (t7.parentNode.firstChild !== t7)
                      return this.appendStringWithAttributes("\n");
                    break;
                  case "td":
                    if (t7.parentNode.firstChild !== t7)
                      return this.appendStringWithAttributes(" | ");
                }
              }, g2.prototype.appendBlockForAttributesWithElement = function(t7, e13) {
                var n10;
                return this.blockElements.push(e13), n10 = m3(t7), this.blocks.push(n10), n10;
              }, g2.prototype.appendEmptyBlock = function() {
                return this.appendBlockForAttributesWithElement([], null);
              }, g2.prototype.appendStringWithAttributes = function(t7, e13) {
                return this.appendPiece(S3(t7, e13));
              }, g2.prototype.appendAttachmentWithAttributes = function(t7, e13) {
                return this.appendPiece(E2(t7, e13));
              }, g2.prototype.appendPiece = function(t7) {
                return 0 === this.blocks.length && this.appendEmptyBlock(), this.blocks[this.blocks.length - 1].text.push(t7);
              }, g2.prototype.appendStringToTextAtIndex = function(t7, e13) {
                var n10, i7;
                return i7 = this.blocks[e13].text, n10 = i7[i7.length - 1], "string" === (null != n10 ? n10.type : void 0) ? n10.string += t7 : i7.push(S3(t7));
              }, g2.prototype.prependStringToTextAtIndex = function(t7, e13) {
                var n10, i7;
                return i7 = this.blocks[e13].text, n10 = i7[0], "string" === (null != n10 ? n10.type : void 0) ? n10.string = t7 + n10.string : i7.unshift(S3(t7));
              }, S3 = function(t7, e13) {
                var n10;
                return null == e13 && (e13 = {}), n10 = "string", t7 = u4(t7), { string: t7, attributes: e13, type: n10 };
              }, E2 = function(t7, e13) {
                var n10;
                return null == e13 && (e13 = {}), n10 = "attachment", { attachment: t7, attributes: e13, type: n10 };
              }, m3 = function(t7) {
                var e13;
                return null == t7 && (t7 = {}), e13 = [], { text: e13, attributes: t7 };
              }, g2.prototype.getTextAttributes = function(t7) {
                var n10, i7, r8, s9, u5, c7, l10, h7, p4, d5, f4, g3;
                r8 = {}, p4 = e12.config.textAttributes;
                for (n10 in p4)
                  if (u5 = p4[n10], u5.tagName && o11(t7, { matchingSelector: u5.tagName, untilNode: this.containerElement }))
                    r8[n10] = true;
                  else if (u5.parser) {
                    if (g3 = u5.parser(t7)) {
                      for (i7 = false, d5 = this.findBlockElementAncestors(t7), c7 = 0, h7 = d5.length; h7 > c7; c7++)
                        if (s9 = d5[c7], u5.parser(s9) === g3) {
                          i7 = true;
                          break;
                        }
                      i7 || (r8[n10] = g3);
                    }
                  } else
                    u5.styleProperty && (g3 = t7.style[u5.styleProperty]) && (r8[n10] = g3);
                if (a4(t7)) {
                  f4 = w2(t7, "attributes");
                  for (l10 in f4)
                    g3 = f4[l10], r8[l10] = g3;
                }
                return r8;
              }, g2.prototype.getBlockAttributes = function(t7) {
                var n10, i7, o12, r8;
                for (i7 = []; t7 && t7 !== this.containerElement; ) {
                  r8 = e12.config.blockAttributes;
                  for (n10 in r8)
                    o12 = r8[n10], o12.parse !== false && l9(t7) === o12.tagName && (("function" == typeof o12.test ? o12.test(t7) : void 0) || !o12.test) && (i7.push(n10), o12.listAttribute && i7.push(o12.listAttribute));
                  t7 = t7.parentNode;
                }
                return i7.reverse();
              }, g2.prototype.findBlockElementAncestors = function(t7) {
                var e13, n10;
                for (e13 = []; t7 && t7 !== this.containerElement; )
                  n10 = l9(t7), f3.call(r7(), n10) >= 0 && e13.push(t7), t7 = t7.parentNode;
                return e13;
              }, w2 = function(t7, e13) {
                try {
                  return JSON.parse(t7.getAttribute("data-trix-" + e13));
                } catch (n10) {
                  return {};
                }
              }, b2 = function(t7) {
                var e13, n10, i7;
                return i7 = t7.getAttribute("width"), n10 = t7.getAttribute("height"), e13 = {}, i7 && (e13.width = parseInt(i7, 10)), n10 && (e13.height = parseInt(n10, 10)), e13;
              }, g2.prototype.isBlockElement = function(t7) {
                var e13;
                if ((null != t7 ? t7.nodeType : void 0) === Node.ELEMENT_NODE && !a4(t7) && !o11(t7, { matchingSelector: "td", untilNode: this.containerElement }))
                  return e13 = l9(t7), f3.call(r7(), e13) >= 0 || "block" === window.getComputedStyle(t7).display;
              }, g2.prototype.isInsignificantTextNode = function(t7) {
                var e13, n10, i7;
                if ((null != t7 ? t7.nodeType : void 0) === Node.TEXT_NODE && k2(t7.data) && (n10 = t7.parentNode, i7 = t7.previousSibling, e13 = t7.nextSibling, (!C2(n10.previousSibling) || this.isBlockElement(n10.previousSibling)) && !v2(n10)))
                  return !i7 || this.isBlockElement(i7) || !e13 || this.isBlockElement(e13);
              }, g2.prototype.isExtraBR = function(t7) {
                return "br" === l9(t7) && this.isBlockElement(t7.parentNode) && t7.parentNode.lastChild === t7;
              }, v2 = function(t7) {
                var e13;
                return e13 = window.getComputedStyle(t7).whiteSpace, "pre" === e13 || "pre-wrap" === e13 || "pre-line" === e13;
              }, C2 = function(t7) {
                return t7 && !R2(t7.textContent);
              }, g2.prototype.translateBlockElementMarginsToNewlines = function() {
                var t7, e13, n10, i7, o12, r8, s9, a5;
                for (e13 = this.getMarginOfDefaultBlockElement(), s9 = this.blocks, a5 = [], i7 = n10 = 0, o12 = s9.length; o12 > n10; i7 = ++n10)
                  t7 = s9[i7], (r8 = this.getMarginOfBlockElementAtIndex(i7)) && (r8.top > 2 * e13.top && this.prependStringToTextAtIndex("\n", i7), a5.push(r8.bottom > 2 * e13.bottom ? this.appendStringToTextAtIndex("\n", i7) : void 0));
                return a5;
              }, g2.prototype.getMarginOfBlockElementAtIndex = function(t7) {
                var e13, n10;
                return !(e13 = this.blockElements[t7]) || !e13.textContent || (n10 = l9(e13), f3.call(r7(), n10) >= 0 || f3.call(this.processedElements, e13) >= 0) ? void 0 : y2(e13);
              }, g2.prototype.getMarginOfDefaultBlockElement = function() {
                var t7;
                return t7 = s8(e12.config.blockAttributes["default"].tagName), this.containerElement.appendChild(t7), y2(t7);
              }, y2 = function(t7) {
                var e13;
                return e13 = window.getComputedStyle(t7), "block" === e13.display ? { top: parseInt(e13.marginTop), bottom: parseInt(e13.marginBottom) } : void 0;
              }, A2 = function(t7) {
                return t7.replace(RegExp("^" + n9.source + "+"), "");
              }, k2 = function(t7) {
                return RegExp("^" + n9.source + "*$").test(t7);
              }, R2 = function(t7) {
                return /\s$/.test(t7);
              }, g2;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                s8.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, s8 = {}.hasOwnProperty, a4 = [].slice, u4 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = e12.arraysAreEqual, i6 = e12.normalizeRange, o11 = e12.rangeIsCollapsed, n9 = e12.getBlockConfig, e12.Document = function(s9) {
              function c6(t7) {
                null == t7 && (t7 = []), c6.__super__.constructor.apply(this, arguments), 0 === t7.length && (t7 = [new e12.Block()]), this.blockList = e12.SplittableList.box(t7);
              }
              var l9;
              return r7(c6, s9), c6.fromJSON = function(t7) {
                var n10, i7;
                return i7 = function() {
                  var i8, o12, r8;
                  for (r8 = [], i8 = 0, o12 = t7.length; o12 > i8; i8++)
                    n10 = t7[i8], r8.push(e12.Block.fromJSON(n10));
                  return r8;
                }(), new this(i7);
              }, c6.fromHTML = function(t7, n10) {
                return e12.HTMLParser.parse(t7, n10).getDocument();
              }, c6.fromString = function(t7, n10) {
                var i7;
                return i7 = e12.Text.textForStringWithAttributes(t7, n10), new this([new e12.Block(i7)]);
              }, c6.prototype.isEmpty = function() {
                var t7;
                return 1 === this.blockList.length && (t7 = this.getBlockAtIndex(0), t7.isEmpty() && !t7.hasAttributes());
              }, c6.prototype.copy = function(t7) {
                var e13;
                return null == t7 && (t7 = {}), e13 = t7.consolidateBlocks ? this.blockList.consolidate().toArray() : this.blockList.toArray(), new this.constructor(e13);
              }, c6.prototype.copyUsingObjectsFromDocument = function(t7) {
                var n10;
                return n10 = new e12.ObjectMap(t7.getObjects()), this.copyUsingObjectMap(n10);
              }, c6.prototype.copyUsingObjectMap = function(t7) {
                var e13, n10, i7;
                return n10 = function() {
                  var n11, o12, r8, s10;
                  for (r8 = this.getBlocks(), s10 = [], n11 = 0, o12 = r8.length; o12 > n11; n11++)
                    e13 = r8[n11], s10.push((i7 = t7.find(e13)) ? i7 : e13.copyUsingObjectMap(t7));
                  return s10;
                }.call(this), new this.constructor(n10);
              }, c6.prototype.copyWithBaseBlockAttributes = function(t7) {
                var e13, n10, i7;
                return null == t7 && (t7 = []), i7 = function() {
                  var i8, o12, r8, s10;
                  for (r8 = this.getBlocks(), s10 = [], i8 = 0, o12 = r8.length; o12 > i8; i8++)
                    n10 = r8[i8], e13 = t7.concat(n10.getAttributes()), s10.push(n10.copyWithAttributes(e13));
                  return s10;
                }.call(this), new this.constructor(i7);
              }, c6.prototype.replaceBlock = function(t7, e13) {
                var n10;
                return n10 = this.blockList.indexOf(t7), -1 === n10 ? this : new this.constructor(this.blockList.replaceObjectAtIndex(e13, n10));
              }, c6.prototype.insertDocumentAtRange = function(t7, e13) {
                var n10, r8, s10, a5, u5, c7, l10;
                return r8 = t7.blockList, u5 = (e13 = i6(e13))[0], c7 = this.locationFromPosition(u5), s10 = c7.index, a5 = c7.offset, l10 = this, n10 = this.getBlockAtPosition(u5), o11(e13) && n10.isEmpty() && !n10.hasAttributes() ? l10 = new this.constructor(l10.blockList.removeObjectAtIndex(s10)) : n10.getBlockBreakPosition() === a5 && u5++, l10 = l10.removeTextAtRange(e13), new this.constructor(l10.blockList.insertSplittableListAtPosition(r8, u5));
              }, c6.prototype.mergeDocumentAtRange = function(e13, n10) {
                var o12, r8, s10, a5, u5, c7, l10, h6, p3, d3, f3, g2;
                return f3 = (n10 = i6(n10))[0], d3 = this.locationFromPosition(f3), r8 = this.getBlockAtIndex(d3.index).getAttributes(), o12 = e13.getBaseBlockAttributes(), g2 = r8.slice(-o12.length), t6(o12, g2) ? (l10 = r8.slice(0, -o12.length), c7 = e13.copyWithBaseBlockAttributes(l10)) : c7 = e13.copy({ consolidateBlocks: true }).copyWithBaseBlockAttributes(r8), s10 = c7.getBlockCount(), a5 = c7.getBlockAtIndex(0), t6(r8, a5.getAttributes()) ? (u5 = a5.getTextWithoutBlockBreak(), p3 = this.insertTextAtRange(u5, n10), s10 > 1 && (c7 = new this.constructor(c7.getBlocks().slice(1)), h6 = f3 + u5.getLength(), p3 = p3.insertDocumentAtRange(c7, h6))) : p3 = this.insertDocumentAtRange(c7, n10), p3;
              }, c6.prototype.insertTextAtRange = function(t7, e13) {
                var n10, o12, r8, s10, a5;
                return a5 = (e13 = i6(e13))[0], s10 = this.locationFromPosition(a5), o12 = s10.index, r8 = s10.offset, n10 = this.removeTextAtRange(e13), new this.constructor(n10.blockList.editObjectAtIndex(o12, function(e14) {
                  return e14.copyWithText(e14.text.insertTextAtPosition(t7, r8));
                }));
              }, c6.prototype.removeTextAtRange = function(t7) {
                var e13, n10, r8, s10, a5, u5, c7, l10, h6, p3, d3, f3, g2, m3, v2, y2, b2, A2, C2, x2, w2;
                return p3 = t7 = i6(t7), l10 = p3[0], A2 = p3[1], o11(t7) ? this : (d3 = this.locationRangeFromRange(t7), u5 = d3[0], y2 = d3[1], a5 = u5.index, c7 = u5.offset, s10 = this.getBlockAtIndex(a5), v2 = y2.index, b2 = y2.offset, m3 = this.getBlockAtIndex(v2), f3 = A2 - l10 === 1 && s10.getBlockBreakPosition() === c7 && m3.getBlockBreakPosition() !== b2 && "\n" === m3.text.getStringAtPosition(b2), f3 ? r8 = this.blockList.editObjectAtIndex(v2, function(t8) {
                  return t8.copyWithText(t8.text.removeTextAtRange([b2, b2 + 1]));
                }) : (h6 = s10.text.getTextAtRange([0, c7]), C2 = m3.text.getTextAtRange([b2, m3.getLength()]), x2 = h6.appendText(C2), g2 = a5 !== v2 && 0 === c7, w2 = g2 && s10.getAttributeLevel() >= m3.getAttributeLevel(), n10 = w2 ? m3.copyWithText(x2) : s10.copyWithText(x2), e13 = v2 + 1 - a5, r8 = this.blockList.splice(a5, e13, n10)), new this.constructor(r8));
              }, c6.prototype.moveTextFromRangeToPosition = function(t7, e13) {
                var n10, o12, r8, s10, u5, c7, l10, h6, p3, d3;
                return c7 = t7 = i6(t7), p3 = c7[0], r8 = c7[1], e13 >= p3 && r8 >= e13 ? this : (o12 = this.getDocumentAtRange(t7), h6 = this.removeTextAtRange(t7), u5 = e13 > p3, u5 && (e13 -= o12.getLength()), l10 = o12.getBlocks(), s10 = l10[0], n10 = 2 <= l10.length ? a4.call(l10, 1) : [], 0 === n10.length ? (d3 = s10.getTextWithoutBlockBreak(), u5 && (e13 += 1)) : d3 = s10.text, h6 = h6.insertTextAtRange(d3, e13), 0 === n10.length ? h6 : (o12 = new this.constructor(n10), e13 += d3.getLength(), h6.insertDocumentAtRange(o12, e13)));
              }, c6.prototype.addAttributeAtRange = function(t7, e13, i7) {
                var o12;
                return o12 = this.blockList, this.eachBlockAtRange(i7, function(i8, r8, s10) {
                  return o12 = o12.editObjectAtIndex(s10, function() {
                    return n9(t7) ? i8.addAttribute(t7, e13) : r8[0] === r8[1] ? i8 : i8.copyWithText(i8.text.addAttributeAtRange(t7, e13, r8));
                  });
                }), new this.constructor(o12);
              }, c6.prototype.addAttribute = function(t7, e13) {
                var n10;
                return n10 = this.blockList, this.eachBlock(function(i7, o12) {
                  return n10 = n10.editObjectAtIndex(o12, function() {
                    return i7.addAttribute(t7, e13);
                  });
                }), new this.constructor(n10);
              }, c6.prototype.removeAttributeAtRange = function(t7, e13) {
                var i7;
                return i7 = this.blockList, this.eachBlockAtRange(e13, function(e14, o12, r8) {
                  return n9(t7) ? i7 = i7.editObjectAtIndex(r8, function() {
                    return e14.removeAttribute(t7);
                  }) : o12[0] !== o12[1] ? i7 = i7.editObjectAtIndex(r8, function() {
                    return e14.copyWithText(e14.text.removeAttributeAtRange(t7, o12));
                  }) : void 0;
                }), new this.constructor(i7);
              }, c6.prototype.updateAttributesForAttachment = function(t7, e13) {
                var n10, i7, o12, r8;
                return o12 = (i7 = this.getRangeOfAttachment(e13))[0], n10 = this.locationFromPosition(o12).index, r8 = this.getTextAtIndex(n10), new this.constructor(this.blockList.editObjectAtIndex(n10, function(n11) {
                  return n11.copyWithText(r8.updateAttributesForAttachment(t7, e13));
                }));
              }, c6.prototype.removeAttributeForAttachment = function(t7, e13) {
                var n10;
                return n10 = this.getRangeOfAttachment(e13), this.removeAttributeAtRange(t7, n10);
              }, c6.prototype.insertBlockBreakAtRange = function(t7) {
                var n10, o12, r8, s10;
                return s10 = (t7 = i6(t7))[0], r8 = this.locationFromPosition(s10).offset, o12 = this.removeTextAtRange(t7), 0 === r8 && (n10 = [new e12.Block()]), new this.constructor(o12.blockList.insertSplittableListAtPosition(new e12.SplittableList(n10), s10));
              }, c6.prototype.applyBlockAttributeAtRange = function(t7, e13, i7) {
                var o12, r8, s10, a5;
                return s10 = this.expandRangeToLineBreaksAndSplitBlocks(i7), r8 = s10.document, i7 = s10.range, o12 = n9(t7), o12.listAttribute ? (r8 = r8.removeLastListAttributeAtRange(i7, { exceptAttributeName: t7 }), a5 = r8.convertLineBreaksToBlockBreaksInRange(i7), r8 = a5.document, i7 = a5.range) : r8 = o12.exclusive ? r8.removeBlockAttributesAtRange(i7) : o12.terminal ? r8.removeLastTerminalAttributeAtRange(i7) : r8.consolidateBlocksAtRange(i7), r8.addAttributeAtRange(t7, e13, i7);
              }, c6.prototype.removeLastListAttributeAtRange = function(t7, e13) {
                var i7;
                return null == e13 && (e13 = {}), i7 = this.blockList, this.eachBlockAtRange(t7, function(t8, o12, r8) {
                  var s10;
                  if ((s10 = t8.getLastAttribute()) && n9(s10).listAttribute && s10 !== e13.exceptAttributeName)
                    return i7 = i7.editObjectAtIndex(r8, function() {
                      return t8.removeAttribute(s10);
                    });
                }), new this.constructor(i7);
              }, c6.prototype.removeLastTerminalAttributeAtRange = function(t7) {
                var e13;
                return e13 = this.blockList, this.eachBlockAtRange(t7, function(t8, i7, o12) {
                  var r8;
                  if ((r8 = t8.getLastAttribute()) && n9(r8).terminal)
                    return e13 = e13.editObjectAtIndex(o12, function() {
                      return t8.removeAttribute(r8);
                    });
                }), new this.constructor(e13);
              }, c6.prototype.removeBlockAttributesAtRange = function(t7) {
                var e13;
                return e13 = this.blockList, this.eachBlockAtRange(t7, function(t8, n10, i7) {
                  return t8.hasAttributes() ? e13 = e13.editObjectAtIndex(i7, function() {
                    return t8.copyWithoutAttributes();
                  }) : void 0;
                }), new this.constructor(e13);
              }, c6.prototype.expandRangeToLineBreaksAndSplitBlocks = function(t7) {
                var e13, n10, o12, r8, s10, a5, u5, c7, l10;
                return a5 = t7 = i6(t7), l10 = a5[0], r8 = a5[1], c7 = this.locationFromPosition(l10), o12 = this.locationFromPosition(r8), e13 = this, u5 = e13.getBlockAtIndex(c7.index), null != (c7.offset = u5.findLineBreakInDirectionFromPosition("backward", c7.offset)) && (s10 = e13.positionFromLocation(c7), e13 = e13.insertBlockBreakAtRange([s10, s10 + 1]), o12.index += 1, o12.offset -= e13.getBlockAtIndex(c7.index).getLength(), c7.index += 1), c7.offset = 0, 0 === o12.offset && o12.index > c7.index ? (o12.index -= 1, o12.offset = e13.getBlockAtIndex(o12.index).getBlockBreakPosition()) : (n10 = e13.getBlockAtIndex(o12.index), "\n" === n10.text.getStringAtRange([o12.offset - 1, o12.offset]) ? o12.offset -= 1 : o12.offset = n10.findLineBreakInDirectionFromPosition("forward", o12.offset), o12.offset !== n10.getBlockBreakPosition() && (s10 = e13.positionFromLocation(o12), e13 = e13.insertBlockBreakAtRange([s10, s10 + 1]))), l10 = e13.positionFromLocation(c7), r8 = e13.positionFromLocation(o12), t7 = i6([l10, r8]), { document: e13, range: t7 };
              }, c6.prototype.convertLineBreaksToBlockBreaksInRange = function(t7) {
                var e13, n10, o12;
                return n10 = (t7 = i6(t7))[0], o12 = this.getStringAtRange(t7).slice(0, -1), e13 = this, o12.replace(/.*?\n/g, function(t8) {
                  return n10 += t8.length, e13 = e13.insertBlockBreakAtRange([n10 - 1, n10]);
                }), { document: e13, range: t7 };
              }, c6.prototype.consolidateBlocksAtRange = function(t7) {
                var e13, n10, o12, r8, s10;
                return o12 = t7 = i6(t7), s10 = o12[0], n10 = o12[1], r8 = this.locationFromPosition(s10).index, e13 = this.locationFromPosition(n10).index, new this.constructor(this.blockList.consolidateFromIndexToIndex(r8, e13));
              }, c6.prototype.getDocumentAtRange = function(t7) {
                var e13;
                return t7 = i6(t7), e13 = this.blockList.getSplittableListInRange(t7).toArray(), new this.constructor(e13);
              }, c6.prototype.getStringAtRange = function(t7) {
                var e13, n10, o12;
                return o12 = t7 = i6(t7), n10 = o12[o12.length - 1], n10 !== this.getLength() && (e13 = -1), this.getDocumentAtRange(t7).toString().slice(0, e13);
              }, c6.prototype.getBlockAtIndex = function(t7) {
                return this.blockList.getObjectAtIndex(t7);
              }, c6.prototype.getBlockAtPosition = function(t7) {
                var e13;
                return e13 = this.locationFromPosition(t7).index, this.getBlockAtIndex(e13);
              }, c6.prototype.getTextAtIndex = function(t7) {
                var e13;
                return null != (e13 = this.getBlockAtIndex(t7)) ? e13.text : void 0;
              }, c6.prototype.getTextAtPosition = function(t7) {
                var e13;
                return e13 = this.locationFromPosition(t7).index, this.getTextAtIndex(e13);
              }, c6.prototype.getPieceAtPosition = function(t7) {
                var e13, n10, i7;
                return i7 = this.locationFromPosition(t7), e13 = i7.index, n10 = i7.offset, this.getTextAtIndex(e13).getPieceAtPosition(n10);
              }, c6.prototype.getCharacterAtPosition = function(t7) {
                var e13, n10, i7;
                return i7 = this.locationFromPosition(t7), e13 = i7.index, n10 = i7.offset, this.getTextAtIndex(e13).getStringAtRange([n10, n10 + 1]);
              }, c6.prototype.getLength = function() {
                return this.blockList.getEndPosition();
              }, c6.prototype.getBlocks = function() {
                return this.blockList.toArray();
              }, c6.prototype.getBlockCount = function() {
                return this.blockList.length;
              }, c6.prototype.getEditCount = function() {
                return this.editCount;
              }, c6.prototype.eachBlock = function(t7) {
                return this.blockList.eachObject(t7);
              }, c6.prototype.eachBlockAtRange = function(t7, e13) {
                var n10, o12, r8, s10, a5, u5, c7, l10, h6, p3, d3, f3;
                if (u5 = t7 = i6(t7), d3 = u5[0], r8 = u5[1], p3 = this.locationFromPosition(d3), o12 = this.locationFromPosition(r8), p3.index === o12.index)
                  return n10 = this.getBlockAtIndex(p3.index), f3 = [p3.offset, o12.offset], e13(n10, f3, p3.index);
                for (h6 = [], a5 = s10 = c7 = p3.index, l10 = o12.index; l10 >= c7 ? l10 >= s10 : s10 >= l10; a5 = l10 >= c7 ? ++s10 : --s10)
                  (n10 = this.getBlockAtIndex(a5)) ? (f3 = function() {
                    switch (a5) {
                      case p3.index:
                        return [p3.offset, n10.text.getLength()];
                      case o12.index:
                        return [0, o12.offset];
                      default:
                        return [0, n10.text.getLength()];
                    }
                  }(), h6.push(e13(n10, f3, a5))) : h6.push(void 0);
                return h6;
              }, c6.prototype.getCommonAttributesAtRange = function(t7) {
                var n10, r8, s10;
                return r8 = (t7 = i6(t7))[0], o11(t7) ? this.getCommonAttributesAtPosition(r8) : (s10 = [], n10 = [], this.eachBlockAtRange(t7, function(t8, e13) {
                  return e13[0] !== e13[1] ? (s10.push(t8.text.getCommonAttributesAtRange(e13)), n10.push(l9(t8))) : void 0;
                }), e12.Hash.fromCommonAttributesOfObjects(s10).merge(e12.Hash.fromCommonAttributesOfObjects(n10)).toObject());
              }, c6.prototype.getCommonAttributesAtPosition = function(t7) {
                var n10, i7, o12, r8, s10, a5, c7, h6, p3, d3;
                if (p3 = this.locationFromPosition(t7), s10 = p3.index, h6 = p3.offset, o12 = this.getBlockAtIndex(s10), !o12)
                  return {};
                r8 = l9(o12), n10 = o12.text.getAttributesAtPosition(h6), i7 = o12.text.getAttributesAtPosition(h6 - 1), a5 = function() {
                  var t8, n11;
                  t8 = e12.config.textAttributes, n11 = [];
                  for (c7 in t8)
                    d3 = t8[c7], d3.inheritable && n11.push(c7);
                  return n11;
                }();
                for (c7 in i7)
                  d3 = i7[c7], (d3 === n10[c7] || u4.call(a5, c7) >= 0) && (r8[c7] = d3);
                return r8;
              }, c6.prototype.getRangeOfCommonAttributeAtPosition = function(t7, e13) {
                var n10, o12, r8, s10, a5, u5, c7, l10, h6;
                return a5 = this.locationFromPosition(e13), r8 = a5.index, s10 = a5.offset, h6 = this.getTextAtIndex(r8), u5 = h6.getExpandedRangeForAttributeAtOffset(t7, s10), l10 = u5[0], o12 = u5[1], c7 = this.positionFromLocation({ index: r8, offset: l10 }), n10 = this.positionFromLocation({ index: r8, offset: o12 }), i6([c7, n10]);
              }, c6.prototype.getBaseBlockAttributes = function() {
                var t7, e13, n10, i7, o12, r8, s10;
                for (t7 = this.getBlockAtIndex(0).getAttributes(), n10 = i7 = 1, s10 = this.getBlockCount(); s10 >= 1 ? s10 > i7 : i7 > s10; n10 = s10 >= 1 ? ++i7 : --i7)
                  e13 = this.getBlockAtIndex(n10).getAttributes(), r8 = Math.min(t7.length, e13.length), t7 = function() {
                    var n11, i8, s11;
                    for (s11 = [], o12 = n11 = 0, i8 = r8; (i8 >= 0 ? i8 > n11 : n11 > i8) && e13[o12] === t7[o12]; o12 = i8 >= 0 ? ++n11 : --n11)
                      s11.push(e13[o12]);
                    return s11;
                  }();
                return t7;
              }, l9 = function(t7) {
                var e13, n10;
                return n10 = {}, (e13 = t7.getLastAttribute()) && (n10[e13] = true), n10;
              }, c6.prototype.getAttachmentById = function(t7) {
                var e13, n10, i7, o12;
                for (o12 = this.getAttachments(), n10 = 0, i7 = o12.length; i7 > n10; n10++)
                  if (e13 = o12[n10], e13.id === t7)
                    return e13;
              }, c6.prototype.getAttachmentPieces = function() {
                var t7;
                return t7 = [], this.blockList.eachObject(function(e13) {
                  var n10;
                  return n10 = e13.text, t7 = t7.concat(n10.getAttachmentPieces());
                }), t7;
              }, c6.prototype.getAttachments = function() {
                var t7, e13, n10, i7, o12;
                for (i7 = this.getAttachmentPieces(), o12 = [], t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  n10 = i7[t7], o12.push(n10.attachment);
                return o12;
              }, c6.prototype.getRangeOfAttachment = function(t7) {
                var e13, n10, o12, r8, s10, a5, u5;
                for (r8 = 0, s10 = this.blockList.toArray(), n10 = e13 = 0, o12 = s10.length; o12 > e13; n10 = ++e13) {
                  if (a5 = s10[n10].text, u5 = a5.getRangeOfAttachment(t7))
                    return i6([r8 + u5[0], r8 + u5[1]]);
                  r8 += a5.getLength();
                }
              }, c6.prototype.getLocationRangeOfAttachment = function(t7) {
                var e13;
                return e13 = this.getRangeOfAttachment(t7), this.locationRangeFromRange(e13);
              }, c6.prototype.getAttachmentPieceForAttachment = function(t7) {
                var e13, n10, i7, o12;
                for (o12 = this.getAttachmentPieces(), e13 = 0, n10 = o12.length; n10 > e13; e13++)
                  if (i7 = o12[e13], i7.attachment === t7)
                    return i7;
              }, c6.prototype.findRangesForBlockAttribute = function(t7) {
                var e13, n10, i7, o12, r8, s10, a5;
                for (r8 = 0, s10 = [], a5 = this.getBlocks(), n10 = 0, i7 = a5.length; i7 > n10; n10++)
                  e13 = a5[n10], o12 = e13.getLength(), e13.hasAttribute(t7) && s10.push([r8, r8 + o12]), r8 += o12;
                return s10;
              }, c6.prototype.findRangesForTextAttribute = function(t7, e13) {
                var n10, i7, o12, r8, s10, a5, u5, c7, l10, h6;
                for (h6 = (null != e13 ? e13 : {}).withValue, a5 = 0, u5 = [], c7 = [], r8 = function(e14) {
                  return null != h6 ? e14.getAttribute(t7) === h6 : e14.hasAttribute(t7);
                }, l10 = this.getPieces(), n10 = 0, i7 = l10.length; i7 > n10; n10++)
                  s10 = l10[n10], o12 = s10.getLength(), r8(s10) && (u5[1] === a5 ? u5[1] = a5 + o12 : c7.push(u5 = [a5, a5 + o12])), a5 += o12;
                return c7;
              }, c6.prototype.locationFromPosition = function(t7) {
                var e13, n10;
                return n10 = this.blockList.findIndexAndOffsetAtPosition(Math.max(0, t7)), null != n10.index ? n10 : (e13 = this.getBlocks(), { index: e13.length - 1, offset: e13[e13.length - 1].getLength() });
              }, c6.prototype.positionFromLocation = function(t7) {
                return this.blockList.findPositionAtIndexAndOffset(t7.index, t7.offset);
              }, c6.prototype.locationRangeFromPosition = function(t7) {
                return i6(this.locationFromPosition(t7));
              }, c6.prototype.locationRangeFromRange = function(t7) {
                var e13, n10, o12, r8;
                if (t7 = i6(t7))
                  return r8 = t7[0], n10 = t7[1], o12 = this.locationFromPosition(r8), e13 = this.locationFromPosition(n10), i6([o12, e13]);
              }, c6.prototype.rangeFromLocationRange = function(t7) {
                var e13, n10;
                return t7 = i6(t7), e13 = this.positionFromLocation(t7[0]), o11(t7) || (n10 = this.positionFromLocation(t7[1])), i6([e13, n10]);
              }, c6.prototype.isEqualTo = function(t7) {
                return this.blockList.isEqualTo(null != t7 ? t7.blockList : void 0);
              }, c6.prototype.getTexts = function() {
                var t7, e13, n10, i7, o12;
                for (i7 = this.getBlocks(), o12 = [], e13 = 0, n10 = i7.length; n10 > e13; e13++)
                  t7 = i7[e13], o12.push(t7.text);
                return o12;
              }, c6.prototype.getPieces = function() {
                var t7, e13, n10, i7, o12;
                for (n10 = [], i7 = this.getTexts(), t7 = 0, e13 = i7.length; e13 > t7; t7++)
                  o12 = i7[t7], n10.push.apply(n10, o12.getPieces());
                return n10;
              }, c6.prototype.getObjects = function() {
                return this.getBlocks().concat(this.getTexts()).concat(this.getPieces());
              }, c6.prototype.toSerializableDocument = function() {
                var t7;
                return t7 = [], this.blockList.eachObject(function(e13) {
                  return t7.push(e13.copyWithText(e13.text.toSerializableText()));
                }), new this.constructor(t7);
              }, c6.prototype.toString = function() {
                return this.blockList.toString();
              }, c6.prototype.toJSON = function() {
                return this.blockList.toJSON();
              }, c6.prototype.toConsole = function() {
                var t7;
                return JSON.stringify(function() {
                  var e13, n10, i7, o12;
                  for (i7 = this.blockList.toArray(), o12 = [], e13 = 0, n10 = i7.length; n10 > e13; e13++)
                    t7 = i7[e13], o12.push(JSON.parse(t7.text.toConsole()));
                  return o12;
                }.call(this));
              }, c6;
            }(e12.Object);
          }.call(this), function() {
            e12.LineBreakInsertion = function() {
              function t6(t7) {
                var e13;
                this.composition = t7, this.document = this.composition.document, e13 = this.composition.getSelectedRange(), this.startPosition = e13[0], this.endPosition = e13[1], this.startLocation = this.document.locationFromPosition(this.startPosition), this.endLocation = this.document.locationFromPosition(this.endPosition), this.block = this.document.getBlockAtIndex(this.endLocation.index), this.breaksOnReturn = this.block.breaksOnReturn(), this.previousCharacter = this.block.text.getStringAtPosition(this.endLocation.offset - 1), this.nextCharacter = this.block.text.getStringAtPosition(this.endLocation.offset);
              }
              return t6.prototype.shouldInsertBlockBreak = function() {
                return this.block.hasAttributes() && this.block.isListItem() && !this.block.isEmpty() ? 0 !== this.startLocation.offset : this.breaksOnReturn && "\n" !== this.nextCharacter;
              }, t6.prototype.shouldBreakFormattedBlock = function() {
                return this.block.hasAttributes() && !this.block.isListItem() && (this.breaksOnReturn && "\n" === this.nextCharacter || "\n" === this.previousCharacter);
              }, t6.prototype.shouldDecreaseListLevel = function() {
                return this.block.hasAttributes() && this.block.isListItem() && this.block.isEmpty();
              }, t6.prototype.shouldPrependListItem = function() {
                return this.block.isListItem() && 0 === this.startLocation.offset && !this.block.isEmpty();
              }, t6.prototype.shouldRemoveLastBlockAttribute = function() {
                return this.block.hasAttributes() && !this.block.isListItem() && this.block.isEmpty();
              }, t6;
            }();
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6, l9, h6 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                p3.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, p3 = {}.hasOwnProperty;
            s8 = e12.normalizeRange, c6 = e12.rangesAreEqual, u4 = e12.rangeIsCollapsed, a4 = e12.objectsAreEqual, t6 = e12.arrayStartsWith, l9 = e12.summarizeArrayChange, i6 = e12.getAllAttributeNames, o11 = e12.getBlockConfig, r7 = e12.getTextConfig, n9 = e12.extend, e12.Composition = function(p4) {
              function d3() {
                this.document = new e12.Document(), this.attachments = [], this.currentAttributes = {}, this.revision = 0;
              }
              var f3;
              return h6(d3, p4), d3.prototype.setDocument = function(t7) {
                var e13;
                return t7.isEqualTo(this.document) ? void 0 : (this.document = t7, this.refreshAttachments(), this.revision++, null != (e13 = this.delegate) && "function" == typeof e13.compositionDidChangeDocument ? e13.compositionDidChangeDocument(t7) : void 0);
              }, d3.prototype.getSnapshot = function() {
                return { document: this.document, selectedRange: this.getSelectedRange() };
              }, d3.prototype.loadSnapshot = function(t7) {
                var n10, i7, o12, r8;
                return n10 = t7.document, r8 = t7.selectedRange, null != (i7 = this.delegate) && "function" == typeof i7.compositionWillLoadSnapshot && i7.compositionWillLoadSnapshot(), this.setDocument(null != n10 ? n10 : new e12.Document()), this.setSelection(null != r8 ? r8 : [0, 0]), null != (o12 = this.delegate) && "function" == typeof o12.compositionDidLoadSnapshot ? o12.compositionDidLoadSnapshot() : void 0;
              }, d3.prototype.insertText = function(t7, e13) {
                var n10, i7, o12, r8;
                return r8 = (null != e13 ? e13 : { updatePosition: true }).updatePosition, i7 = this.getSelectedRange(), this.setDocument(this.document.insertTextAtRange(t7, i7)), o12 = i7[0], n10 = o12 + t7.getLength(), r8 && this.setSelection(n10), this.notifyDelegateOfInsertionAtRange([o12, n10]);
              }, d3.prototype.insertBlock = function(t7) {
                var n10;
                return null == t7 && (t7 = new e12.Block()), n10 = new e12.Document([t7]), this.insertDocument(n10);
              }, d3.prototype.insertDocument = function(t7) {
                var n10, i7, o12;
                return null == t7 && (t7 = new e12.Document()), i7 = this.getSelectedRange(), this.setDocument(this.document.insertDocumentAtRange(t7, i7)), o12 = i7[0], n10 = o12 + t7.getLength(), this.setSelection(n10), this.notifyDelegateOfInsertionAtRange([o12, n10]);
              }, d3.prototype.insertString = function(t7, n10) {
                var i7, o12;
                return i7 = this.getCurrentTextAttributes(), o12 = e12.Text.textForStringWithAttributes(t7, i7), this.insertText(o12, n10);
              }, d3.prototype.insertBlockBreak = function() {
                var t7, e13, n10;
                return e13 = this.getSelectedRange(), this.setDocument(this.document.insertBlockBreakAtRange(e13)), n10 = e13[0], t7 = n10 + 1, this.setSelection(t7), this.notifyDelegateOfInsertionAtRange([n10, t7]);
              }, d3.prototype.insertLineBreak = function() {
                var t7, n10;
                return n10 = new e12.LineBreakInsertion(this), n10.shouldDecreaseListLevel() ? (this.decreaseListLevel(), this.setSelection(n10.startPosition)) : n10.shouldPrependListItem() ? (t7 = new e12.Document([n10.block.copyWithoutText()]), this.insertDocument(t7)) : n10.shouldInsertBlockBreak() ? this.insertBlockBreak() : n10.shouldRemoveLastBlockAttribute() ? this.removeLastBlockAttribute() : n10.shouldBreakFormattedBlock() ? this.breakFormattedBlock(n10) : this.insertString("\n");
              }, d3.prototype.insertHTML = function(t7) {
                var n10, i7, o12, r8;
                return n10 = e12.Document.fromHTML(t7), o12 = this.getSelectedRange(), this.setDocument(this.document.mergeDocumentAtRange(n10, o12)), r8 = o12[0], i7 = r8 + n10.getLength() - 1, this.setSelection(i7), this.notifyDelegateOfInsertionAtRange([r8, i7]);
              }, d3.prototype.replaceHTML = function(t7) {
                var n10, i7, o12;
                return n10 = e12.Document.fromHTML(t7).copyUsingObjectsFromDocument(this.document), i7 = this.getLocationRange({ strict: false }), o12 = this.document.rangeFromLocationRange(i7), this.setDocument(n10), this.setSelection(o12);
              }, d3.prototype.insertFile = function(t7) {
                return this.insertFiles([t7]);
              }, d3.prototype.insertFiles = function(t7) {
                var n10, i7, o12, r8, s9, a5;
                for (i7 = [], r8 = 0, s9 = t7.length; s9 > r8; r8++)
                  o12 = t7[r8], (null != (a5 = this.delegate) ? a5.compositionShouldAcceptFile(o12) : void 0) && (n10 = e12.Attachment.attachmentForFile(o12), i7.push(n10));
                return this.insertAttachments(i7);
              }, d3.prototype.insertAttachment = function(t7) {
                return this.insertAttachments([t7]);
              }, d3.prototype.insertAttachments = function(t7) {
                var n10, i7, o12, r8, s9, a5, u5, c7, l10;
                for (c7 = new e12.Text(), r8 = 0, s9 = t7.length; s9 > r8; r8++)
                  n10 = t7[r8], l10 = n10.getType(), a5 = null != (u5 = e12.config.attachments[l10]) ? u5.presentation : void 0, o12 = this.getCurrentTextAttributes(), a5 && (o12.presentation = a5), i7 = e12.Text.textForAttachmentWithAttributes(n10, o12), c7 = c7.appendText(i7);
                return this.insertText(c7);
              }, d3.prototype.shouldManageDeletingInDirection = function(t7) {
                var e13;
                if (e13 = this.getLocationRange(), u4(e13)) {
                  if ("backward" === t7 && 0 === e13[0].offset)
                    return true;
                  if (this.shouldManageMovingCursorInDirection(t7))
                    return true;
                } else if (e13[0].index !== e13[1].index)
                  return true;
                return false;
              }, d3.prototype.deleteInDirection = function(t7, e13) {
                var n10, i7, o12, r8, s9, a5, c7, l10;
                return r8 = (null != e13 ? e13 : {}).length, s9 = this.getLocationRange(), a5 = this.getSelectedRange(), c7 = u4(a5), c7 ? o12 = "backward" === t7 && 0 === s9[0].offset : l10 = s9[0].index !== s9[1].index, o12 && this.canDecreaseBlockAttributeLevel() && (i7 = this.getBlock(), i7.isListItem() ? this.decreaseListLevel() : this.decreaseBlockAttributeLevel(), this.setSelection(a5[0]), i7.isEmpty()) ? false : (c7 && (a5 = this.getExpandedRangeInDirection(t7, { length: r8 }), "backward" === t7 && (n10 = this.getAttachmentAtRange(a5))), n10 ? (this.editAttachment(n10), false) : (this.setDocument(this.document.removeTextAtRange(a5)), this.setSelection(a5[0]), o12 || l10 ? false : void 0));
              }, d3.prototype.moveTextFromRange = function(t7) {
                var e13;
                return e13 = this.getSelectedRange()[0], this.setDocument(this.document.moveTextFromRangeToPosition(t7, e13)), this.setSelection(e13);
              }, d3.prototype.removeAttachment = function(t7) {
                var e13;
                return (e13 = this.document.getRangeOfAttachment(t7)) ? (this.stopEditingAttachment(), this.setDocument(this.document.removeTextAtRange(e13)), this.setSelection(e13[0])) : void 0;
              }, d3.prototype.removeLastBlockAttribute = function() {
                var t7, e13, n10, i7;
                return n10 = this.getSelectedRange(), i7 = n10[0], e13 = n10[1], t7 = this.document.getBlockAtPosition(e13), this.removeCurrentAttribute(t7.getLastAttribute()), this.setSelection(i7);
              }, f3 = " ", d3.prototype.insertPlaceholder = function() {
                return this.placeholderPosition = this.getPosition(), this.insertString(f3);
              }, d3.prototype.selectPlaceholder = function() {
                return null != this.placeholderPosition ? (this.setSelectedRange([this.placeholderPosition, this.placeholderPosition + f3.length]), this.getSelectedRange()) : void 0;
              }, d3.prototype.forgetPlaceholder = function() {
                return this.placeholderPosition = null;
              }, d3.prototype.hasCurrentAttribute = function(t7) {
                var e13;
                return e13 = this.currentAttributes[t7], null != e13 && e13 !== false;
              }, d3.prototype.toggleCurrentAttribute = function(t7) {
                var e13;
                return (e13 = !this.currentAttributes[t7]) ? this.setCurrentAttribute(t7, e13) : this.removeCurrentAttribute(t7);
              }, d3.prototype.canSetCurrentAttribute = function(t7) {
                return o11(t7) ? this.canSetCurrentBlockAttribute(t7) : this.canSetCurrentTextAttribute(t7);
              }, d3.prototype.canSetCurrentTextAttribute = function() {
                var t7, e13, n10, i7, o12;
                if (e13 = this.getSelectedDocument()) {
                  for (o12 = e13.getAttachments(), n10 = 0, i7 = o12.length; i7 > n10; n10++)
                    if (t7 = o12[n10], !t7.hasContent())
                      return false;
                  return true;
                }
              }, d3.prototype.canSetCurrentBlockAttribute = function() {
                var t7;
                if (t7 = this.getBlock())
                  return !t7.isTerminalBlock();
              }, d3.prototype.setCurrentAttribute = function(t7, e13) {
                return o11(t7) ? this.setBlockAttribute(t7, e13) : (this.setTextAttribute(t7, e13), this.currentAttributes[t7] = e13, this.notifyDelegateOfCurrentAttributesChange());
              }, d3.prototype.setTextAttribute = function(t7, n10) {
                var i7, o12, r8, s9;
                if (o12 = this.getSelectedRange())
                  return r8 = o12[0], i7 = o12[1], r8 !== i7 ? this.setDocument(this.document.addAttributeAtRange(t7, n10, o12)) : "href" === t7 ? (s9 = e12.Text.textForStringWithAttributes(n10, { href: n10 }), this.insertText(s9)) : void 0;
              }, d3.prototype.setBlockAttribute = function(t7, e13) {
                var n10, i7;
                if (i7 = this.getSelectedRange())
                  return this.canSetCurrentAttribute(t7) ? (n10 = this.getBlock(), this.setDocument(this.document.applyBlockAttributeAtRange(t7, e13, i7)), this.setSelection(i7)) : void 0;
              }, d3.prototype.removeCurrentAttribute = function(t7) {
                return o11(t7) ? (this.removeBlockAttribute(t7), this.updateCurrentAttributes()) : (this.removeTextAttribute(t7), delete this.currentAttributes[t7], this.notifyDelegateOfCurrentAttributesChange());
              }, d3.prototype.removeTextAttribute = function(t7) {
                var e13;
                if (e13 = this.getSelectedRange())
                  return this.setDocument(this.document.removeAttributeAtRange(t7, e13));
              }, d3.prototype.removeBlockAttribute = function(t7) {
                var e13;
                if (e13 = this.getSelectedRange())
                  return this.setDocument(this.document.removeAttributeAtRange(t7, e13));
              }, d3.prototype.canDecreaseNestingLevel = function() {
                var t7;
                return (null != (t7 = this.getBlock()) ? t7.getNestingLevel() : void 0) > 0;
              }, d3.prototype.canIncreaseNestingLevel = function() {
                var e13, n10, i7;
                if (e13 = this.getBlock())
                  return (null != (i7 = o11(e13.getLastNestableAttribute())) ? i7.listAttribute : 0) ? (n10 = this.getPreviousBlock()) ? t6(n10.getListItemAttributes(), e13.getListItemAttributes()) : void 0 : e13.getNestingLevel() > 0;
              }, d3.prototype.decreaseNestingLevel = function() {
                var t7;
                if (t7 = this.getBlock())
                  return this.setDocument(this.document.replaceBlock(t7, t7.decreaseNestingLevel()));
              }, d3.prototype.increaseNestingLevel = function() {
                var t7;
                if (t7 = this.getBlock())
                  return this.setDocument(this.document.replaceBlock(t7, t7.increaseNestingLevel()));
              }, d3.prototype.canDecreaseBlockAttributeLevel = function() {
                var t7;
                return (null != (t7 = this.getBlock()) ? t7.getAttributeLevel() : void 0) > 0;
              }, d3.prototype.decreaseBlockAttributeLevel = function() {
                var t7, e13;
                return (t7 = null != (e13 = this.getBlock()) ? e13.getLastAttribute() : void 0) ? this.removeCurrentAttribute(t7) : void 0;
              }, d3.prototype.decreaseListLevel = function() {
                var t7, e13, n10, i7, o12, r8;
                for (r8 = this.getSelectedRange()[0], o12 = this.document.locationFromPosition(r8).index, n10 = o12, t7 = this.getBlock().getAttributeLevel(); (e13 = this.document.getBlockAtIndex(n10 + 1)) && e13.isListItem() && e13.getAttributeLevel() > t7; )
                  n10++;
                return r8 = this.document.positionFromLocation({ index: o12, offset: 0 }), i7 = this.document.positionFromLocation({ index: n10, offset: 0 }), this.setDocument(this.document.removeLastListAttributeAtRange([r8, i7]));
              }, d3.prototype.updateCurrentAttributes = function() {
                var t7, e13, n10, o12, r8, s9;
                if (s9 = this.getSelectedRange({ ignoreLock: true })) {
                  for (e13 = this.document.getCommonAttributesAtRange(s9), r8 = i6(), n10 = 0, o12 = r8.length; o12 > n10; n10++)
                    t7 = r8[n10], e13[t7] || this.canSetCurrentAttribute(t7) || (e13[t7] = false);
                  if (!a4(e13, this.currentAttributes))
                    return this.currentAttributes = e13, this.notifyDelegateOfCurrentAttributesChange();
                }
              }, d3.prototype.getCurrentAttributes = function() {
                return n9.call({}, this.currentAttributes);
              }, d3.prototype.getCurrentTextAttributes = function() {
                var t7, e13, n10, i7;
                t7 = {}, n10 = this.currentAttributes;
                for (e13 in n10)
                  i7 = n10[e13], i7 !== false && r7(e13) && (t7[e13] = i7);
                return t7;
              }, d3.prototype.freezeSelection = function() {
                return this.setCurrentAttribute("frozen", true);
              }, d3.prototype.thawSelection = function() {
                return this.removeCurrentAttribute("frozen");
              }, d3.prototype.hasFrozenSelection = function() {
                return this.hasCurrentAttribute("frozen");
              }, d3.proxyMethod("getSelectionManager().getPointRange"), d3.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"), d3.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"), d3.proxyMethod("getSelectionManager().locationIsCursorTarget"), d3.proxyMethod("getSelectionManager().selectionIsExpanded"), d3.proxyMethod("delegate?.getSelectionManager"), d3.prototype.setSelection = function(t7) {
                var e13, n10;
                return e13 = this.document.locationRangeFromRange(t7), null != (n10 = this.delegate) ? n10.compositionDidRequestChangingSelectionToLocationRange(e13) : void 0;
              }, d3.prototype.getSelectedRange = function() {
                var t7;
                return (t7 = this.getLocationRange()) ? this.document.rangeFromLocationRange(t7) : void 0;
              }, d3.prototype.setSelectedRange = function(t7) {
                var e13;
                return e13 = this.document.locationRangeFromRange(t7), this.getSelectionManager().setLocationRange(e13);
              }, d3.prototype.getPosition = function() {
                var t7;
                return (t7 = this.getLocationRange()) ? this.document.positionFromLocation(t7[0]) : void 0;
              }, d3.prototype.getLocationRange = function(t7) {
                var e13, n10;
                return null != (e13 = null != (n10 = this.targetLocationRange) ? n10 : this.getSelectionManager().getLocationRange(t7)) ? e13 : s8({ index: 0, offset: 0 });
              }, d3.prototype.withTargetLocationRange = function(t7, e13) {
                var n10;
                this.targetLocationRange = t7;
                try {
                  n10 = e13();
                } finally {
                  this.targetLocationRange = null;
                }
                return n10;
              }, d3.prototype.withTargetRange = function(t7, e13) {
                var n10;
                return n10 = this.document.locationRangeFromRange(t7), this.withTargetLocationRange(n10, e13);
              }, d3.prototype.withTargetDOMRange = function(t7, e13) {
                var n10;
                return n10 = this.createLocationRangeFromDOMRange(t7, { strict: false }), this.withTargetLocationRange(n10, e13);
              }, d3.prototype.getExpandedRangeInDirection = function(t7, e13) {
                var n10, i7, o12, r8;
                return i7 = (null != e13 ? e13 : {}).length, o12 = this.getSelectedRange(), r8 = o12[0], n10 = o12[1], "backward" === t7 ? i7 ? r8 -= i7 : r8 = this.translateUTF16PositionFromOffset(r8, -1) : i7 ? n10 += i7 : n10 = this.translateUTF16PositionFromOffset(n10, 1), s8([r8, n10]);
              }, d3.prototype.shouldManageMovingCursorInDirection = function(t7) {
                var e13;
                return this.editingAttachment ? true : (e13 = this.getExpandedRangeInDirection(t7), null != this.getAttachmentAtRange(e13));
              }, d3.prototype.moveCursorInDirection = function(t7) {
                var e13, n10, i7, o12;
                return this.editingAttachment ? i7 = this.document.getRangeOfAttachment(this.editingAttachment) : (o12 = this.getSelectedRange(), i7 = this.getExpandedRangeInDirection(t7), n10 = !c6(o12, i7)), this.setSelectedRange("backward" === t7 ? i7[0] : i7[1]), n10 && (e13 = this.getAttachmentAtRange(i7)) ? this.editAttachment(e13) : void 0;
              }, d3.prototype.expandSelectionInDirection = function(t7, e13) {
                var n10, i7;
                return n10 = (null != e13 ? e13 : {}).length, i7 = this.getExpandedRangeInDirection(t7, { length: n10 }), this.setSelectedRange(i7);
              }, d3.prototype.expandSelectionForEditing = function() {
                return this.hasCurrentAttribute("href") ? this.expandSelectionAroundCommonAttribute("href") : void 0;
              }, d3.prototype.expandSelectionAroundCommonAttribute = function(t7) {
                var e13, n10;
                return e13 = this.getPosition(), n10 = this.document.getRangeOfCommonAttributeAtPosition(t7, e13), this.setSelectedRange(n10);
              }, d3.prototype.selectionContainsAttachments = function() {
                var t7;
                return (null != (t7 = this.getSelectedAttachments()) ? t7.length : void 0) > 0;
              }, d3.prototype.selectionIsInCursorTarget = function() {
                return this.editingAttachment || this.positionIsCursorTarget(this.getPosition());
              }, d3.prototype.positionIsCursorTarget = function(t7) {
                var e13;
                return (e13 = this.document.locationFromPosition(t7)) ? this.locationIsCursorTarget(e13) : void 0;
              }, d3.prototype.positionIsBlockBreak = function(t7) {
                var e13;
                return null != (e13 = this.document.getPieceAtPosition(t7)) ? e13.isBlockBreak() : void 0;
              }, d3.prototype.getSelectedDocument = function() {
                var t7;
                return (t7 = this.getSelectedRange()) ? this.document.getDocumentAtRange(t7) : void 0;
              }, d3.prototype.getSelectedAttachments = function() {
                var t7;
                return null != (t7 = this.getSelectedDocument()) ? t7.getAttachments() : void 0;
              }, d3.prototype.getAttachments = function() {
                return this.attachments.slice(0);
              }, d3.prototype.refreshAttachments = function() {
                var t7, e13, n10, i7, o12, r8, s9, a5, u5, c7, h7, p5;
                for (n10 = this.document.getAttachments(), a5 = l9(this.attachments, n10), t7 = a5.added, h7 = a5.removed, this.attachments = n10, i7 = 0, r8 = h7.length; r8 > i7; i7++)
                  e13 = h7[i7], e13.delegate = null, null != (u5 = this.delegate) && "function" == typeof u5.compositionDidRemoveAttachment && u5.compositionDidRemoveAttachment(e13);
                for (p5 = [], o12 = 0, s9 = t7.length; s9 > o12; o12++)
                  e13 = t7[o12], e13.delegate = this, p5.push(null != (c7 = this.delegate) && "function" == typeof c7.compositionDidAddAttachment ? c7.compositionDidAddAttachment(e13) : void 0);
                return p5;
              }, d3.prototype.attachmentDidChangeAttributes = function(t7) {
                var e13;
                return this.revision++, null != (e13 = this.delegate) && "function" == typeof e13.compositionDidEditAttachment ? e13.compositionDidEditAttachment(t7) : void 0;
              }, d3.prototype.attachmentDidChangePreviewURL = function(t7) {
                var e13;
                return this.revision++, null != (e13 = this.delegate) && "function" == typeof e13.compositionDidChangeAttachmentPreviewURL ? e13.compositionDidChangeAttachmentPreviewURL(t7) : void 0;
              }, d3.prototype.editAttachment = function(t7, e13) {
                var n10;
                if (t7 !== this.editingAttachment)
                  return this.stopEditingAttachment(), this.editingAttachment = t7, null != (n10 = this.delegate) && "function" == typeof n10.compositionDidStartEditingAttachment ? n10.compositionDidStartEditingAttachment(this.editingAttachment, e13) : void 0;
              }, d3.prototype.stopEditingAttachment = function() {
                var t7;
                if (this.editingAttachment)
                  return null != (t7 = this.delegate) && "function" == typeof t7.compositionDidStopEditingAttachment && t7.compositionDidStopEditingAttachment(this.editingAttachment), this.editingAttachment = null;
              }, d3.prototype.updateAttributesForAttachment = function(t7, e13) {
                return this.setDocument(this.document.updateAttributesForAttachment(t7, e13));
              }, d3.prototype.removeAttributeForAttachment = function(t7, e13) {
                return this.setDocument(this.document.removeAttributeForAttachment(t7, e13));
              }, d3.prototype.breakFormattedBlock = function(t7) {
                var n10, i7, o12, r8, s9;
                return i7 = t7.document, n10 = t7.block, r8 = t7.startPosition, s9 = [r8 - 1, r8], n10.getBlockBreakPosition() === t7.startLocation.offset ? (n10.breaksOnReturn() && "\n" === t7.nextCharacter ? r8 += 1 : i7 = i7.removeTextAtRange(s9), s9 = [r8, r8]) : "\n" === t7.nextCharacter ? "\n" === t7.previousCharacter ? s9 = [r8 - 1, r8 + 1] : (s9 = [r8, r8 + 1], r8 += 1) : t7.startLocation.offset - 1 !== 0 && (r8 += 1), o12 = new e12.Document([n10.removeLastAttribute().copyWithoutText()]), this.setDocument(i7.insertDocumentAtRange(o12, s9)), this.setSelection(r8);
              }, d3.prototype.getPreviousBlock = function() {
                var t7, e13;
                return (e13 = this.getLocationRange()) && (t7 = e13[0].index, t7 > 0) ? this.document.getBlockAtIndex(t7 - 1) : void 0;
              }, d3.prototype.getBlock = function() {
                var t7;
                return (t7 = this.getLocationRange()) ? this.document.getBlockAtIndex(t7[0].index) : void 0;
              }, d3.prototype.getAttachmentAtRange = function(t7) {
                var n10;
                return n10 = this.document.getDocumentAtRange(t7), n10.toString() === e12.OBJECT_REPLACEMENT_CHARACTER + "\n" ? n10.getAttachments()[0] : void 0;
              }, d3.prototype.notifyDelegateOfCurrentAttributesChange = function() {
                var t7;
                return null != (t7 = this.delegate) && "function" == typeof t7.compositionDidChangeCurrentAttributes ? t7.compositionDidChangeCurrentAttributes(this.currentAttributes) : void 0;
              }, d3.prototype.notifyDelegateOfInsertionAtRange = function(t7) {
                var e13;
                return null != (e13 = this.delegate) && "function" == typeof e13.compositionDidPerformInsertionAtRange ? e13.compositionDidPerformInsertionAtRange(t7) : void 0;
              }, d3.prototype.translateUTF16PositionFromOffset = function(t7, e13) {
                var n10, i7;
                return i7 = this.document.toUTF16String(), n10 = i7.offsetFromUCS2Offset(t7), i7.offsetToUCS2Offset(n10 + e13);
              }, d3;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.UndoManager = function(e13) {
              function n10(t7) {
                this.composition = t7, this.undoEntries = [], this.redoEntries = [];
              }
              var i6;
              return t6(n10, e13), n10.prototype.recordUndoEntry = function(t7, e14) {
                var n11, o11, r7, s8, a4;
                return s8 = null != e14 ? e14 : {}, o11 = s8.context, n11 = s8.consolidatable, r7 = this.undoEntries.slice(-1)[0], n11 && i6(r7, t7, o11) ? void 0 : (a4 = this.createEntry({ description: t7, context: o11 }), this.undoEntries.push(a4), this.redoEntries = []);
              }, n10.prototype.undo = function() {
                var t7, e14;
                return (e14 = this.undoEntries.pop()) ? (t7 = this.createEntry(e14), this.redoEntries.push(t7), this.composition.loadSnapshot(e14.snapshot)) : void 0;
              }, n10.prototype.redo = function() {
                var t7, e14;
                return (t7 = this.redoEntries.pop()) ? (e14 = this.createEntry(t7), this.undoEntries.push(e14), this.composition.loadSnapshot(t7.snapshot)) : void 0;
              }, n10.prototype.canUndo = function() {
                return this.undoEntries.length > 0;
              }, n10.prototype.canRedo = function() {
                return this.redoEntries.length > 0;
              }, n10.prototype.createEntry = function(t7) {
                var e14, n11, i7;
                return i7 = null != t7 ? t7 : {}, n11 = i7.description, e14 = i7.context, { description: null != n11 ? n11.toString() : void 0, context: JSON.stringify(e14), snapshot: this.composition.getSnapshot() };
              }, i6 = function(t7, e14, n11) {
                return (null != t7 ? t7.description : void 0) === (null != e14 ? e14.toString() : void 0) && (null != t7 ? t7.context : void 0) === JSON.stringify(n11);
              }, n10;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6;
            e12.attachmentGalleryFilter = function(e13) {
              var n9;
              return n9 = new t6(e13), n9.perform(), n9.getSnapshot();
            }, t6 = function() {
              function t7(t8) {
                this.document = t8.document, this.selectedRange = t8.selectedRange;
              }
              var e13, n9, i6;
              return e13 = "attachmentGallery", n9 = "presentation", i6 = "gallery", t7.prototype.perform = function() {
                return this.removeBlockAttribute(), this.applyBlockAttribute();
              }, t7.prototype.getSnapshot = function() {
                return { document: this.document, selectedRange: this.selectedRange };
              }, t7.prototype.removeBlockAttribute = function() {
                var t8, n10, i7, o11, r7;
                for (o11 = this.findRangesOfBlocks(), r7 = [], t8 = 0, n10 = o11.length; n10 > t8; t8++)
                  i7 = o11[t8], r7.push(this.document = this.document.removeAttributeAtRange(e13, i7));
                return r7;
              }, t7.prototype.applyBlockAttribute = function() {
                var t8, n10, i7, o11, r7, s8;
                for (i7 = 0, r7 = this.findRangesOfPieces(), s8 = [], t8 = 0, n10 = r7.length; n10 > t8; t8++)
                  o11 = r7[t8], o11[1] - o11[0] > 1 && (o11[0] += i7, o11[1] += i7, "\n" !== this.document.getCharacterAtPosition(o11[1]) && (this.document = this.document.insertBlockBreakAtRange(o11[1]), o11[1] < this.selectedRange[1] && this.moveSelectedRangeForward(), o11[1]++, i7++), 0 !== o11[0] && "\n" !== this.document.getCharacterAtPosition(o11[0] - 1) && (this.document = this.document.insertBlockBreakAtRange(o11[0]), o11[0] < this.selectedRange[0] && this.moveSelectedRangeForward(), o11[0]++, i7++), s8.push(this.document = this.document.applyBlockAttributeAtRange(e13, true, o11)));
                return s8;
              }, t7.prototype.findRangesOfBlocks = function() {
                return this.document.findRangesForBlockAttribute(e13);
              }, t7.prototype.findRangesOfPieces = function() {
                return this.document.findRangesForTextAttribute(n9, { withValue: i6 });
              }, t7.prototype.moveSelectedRangeForward = function() {
                return this.selectedRange[0] += 1, this.selectedRange[1] += 1;
              }, t7;
            }();
          }.call(this), function() {
            var t6 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            };
            e12.Editor = function() {
              function n9(n10, o11, r7) {
                this.composition = n10, this.selectionManager = o11, this.element = r7, this.insertFiles = t6(this.insertFiles, this), this.undoManager = new e12.UndoManager(this.composition), this.filters = i6.slice(0);
              }
              var i6;
              return i6 = [e12.attachmentGalleryFilter], n9.prototype.loadDocument = function(t7) {
                return this.loadSnapshot({ document: t7, selectedRange: [0, 0] });
              }, n9.prototype.loadHTML = function(t7) {
                return null == t7 && (t7 = ""), this.loadDocument(e12.Document.fromHTML(t7, { referenceElement: this.element }));
              }, n9.prototype.loadJSON = function(t7) {
                var n10, i7;
                return n10 = t7.document, i7 = t7.selectedRange, n10 = e12.Document.fromJSON(n10), this.loadSnapshot({ document: n10, selectedRange: i7 });
              }, n9.prototype.loadSnapshot = function(t7) {
                return this.undoManager = new e12.UndoManager(this.composition), this.composition.loadSnapshot(t7);
              }, n9.prototype.getDocument = function() {
                return this.composition.document;
              }, n9.prototype.getSelectedDocument = function() {
                return this.composition.getSelectedDocument();
              }, n9.prototype.getSnapshot = function() {
                return this.composition.getSnapshot();
              }, n9.prototype.toJSON = function() {
                return this.getSnapshot();
              }, n9.prototype.deleteInDirection = function(t7) {
                return this.composition.deleteInDirection(t7);
              }, n9.prototype.insertAttachment = function(t7) {
                return this.composition.insertAttachment(t7);
              }, n9.prototype.insertAttachments = function(t7) {
                return this.composition.insertAttachments(t7);
              }, n9.prototype.insertDocument = function(t7) {
                return this.composition.insertDocument(t7);
              }, n9.prototype.insertFile = function(t7) {
                return this.composition.insertFile(t7);
              }, n9.prototype.insertFiles = function(t7) {
                return this.composition.insertFiles(t7);
              }, n9.prototype.insertHTML = function(t7) {
                return this.composition.insertHTML(t7);
              }, n9.prototype.insertString = function(t7) {
                return this.composition.insertString(t7);
              }, n9.prototype.insertText = function(t7) {
                return this.composition.insertText(t7);
              }, n9.prototype.insertLineBreak = function() {
                return this.composition.insertLineBreak();
              }, n9.prototype.getSelectedRange = function() {
                return this.composition.getSelectedRange();
              }, n9.prototype.getPosition = function() {
                return this.composition.getPosition();
              }, n9.prototype.getClientRectAtPosition = function(t7) {
                var e13;
                return e13 = this.getDocument().locationRangeFromRange([t7, t7 + 1]), this.selectionManager.getClientRectAtLocationRange(e13);
              }, n9.prototype.expandSelectionInDirection = function(t7) {
                return this.composition.expandSelectionInDirection(t7);
              }, n9.prototype.moveCursorInDirection = function(t7) {
                return this.composition.moveCursorInDirection(t7);
              }, n9.prototype.setSelectedRange = function(t7) {
                return this.composition.setSelectedRange(t7);
              }, n9.prototype.activateAttribute = function(t7, e13) {
                return null == e13 && (e13 = true), this.composition.setCurrentAttribute(t7, e13);
              }, n9.prototype.attributeIsActive = function(t7) {
                return this.composition.hasCurrentAttribute(t7);
              }, n9.prototype.canActivateAttribute = function(t7) {
                return this.composition.canSetCurrentAttribute(t7);
              }, n9.prototype.deactivateAttribute = function(t7) {
                return this.composition.removeCurrentAttribute(t7);
              }, n9.prototype.canDecreaseNestingLevel = function() {
                return this.composition.canDecreaseNestingLevel();
              }, n9.prototype.canIncreaseNestingLevel = function() {
                return this.composition.canIncreaseNestingLevel();
              }, n9.prototype.decreaseNestingLevel = function() {
                return this.canDecreaseNestingLevel() ? this.composition.decreaseNestingLevel() : void 0;
              }, n9.prototype.increaseNestingLevel = function() {
                return this.canIncreaseNestingLevel() ? this.composition.increaseNestingLevel() : void 0;
              }, n9.prototype.canRedo = function() {
                return this.undoManager.canRedo();
              }, n9.prototype.canUndo = function() {
                return this.undoManager.canUndo();
              }, n9.prototype.recordUndoEntry = function(t7, e13) {
                var n10, i7, o11;
                return o11 = null != e13 ? e13 : {}, i7 = o11.context, n10 = o11.consolidatable, this.undoManager.recordUndoEntry(t7, { context: i7, consolidatable: n10 });
              }, n9.prototype.redo = function() {
                return this.canRedo() ? this.undoManager.redo() : void 0;
              }, n9.prototype.undo = function() {
                return this.canUndo() ? this.undoManager.undo() : void 0;
              }, n9;
            }();
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.ManagedAttachment = function(e13) {
              function n10(t7, e14) {
                var n11;
                this.attachmentManager = t7, this.attachment = e14, n11 = this.attachment, this.id = n11.id, this.file = n11.file;
              }
              return t6(n10, e13), n10.prototype.remove = function() {
                return this.attachmentManager.requestRemovalOfAttachment(this.attachment);
              }, n10.proxyMethod("attachment.getAttribute"), n10.proxyMethod("attachment.hasAttribute"), n10.proxyMethod("attachment.setAttribute"), n10.proxyMethod("attachment.getAttributes"), n10.proxyMethod("attachment.setAttributes"), n10.proxyMethod("attachment.isPending"), n10.proxyMethod("attachment.isPreviewable"), n10.proxyMethod("attachment.getURL"), n10.proxyMethod("attachment.getHref"), n10.proxyMethod("attachment.getFilename"), n10.proxyMethod("attachment.getFilesize"), n10.proxyMethod("attachment.getFormattedFilesize"), n10.proxyMethod("attachment.getExtension"), n10.proxyMethod("attachment.getContentType"), n10.proxyMethod("attachment.getFile"), n10.proxyMethod("attachment.setFile"), n10.proxyMethod("attachment.releaseFile"), n10.proxyMethod("attachment.getUploadProgress"), n10.proxyMethod("attachment.setUploadProgress"), n10;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6 = function(t7, e13) {
              function i6() {
                this.constructor = t7;
              }
              for (var o11 in e13)
                n9.call(e13, o11) && (t7[o11] = e13[o11]);
              return i6.prototype = e13.prototype, t7.prototype = new i6(), t7.__super__ = e13.prototype, t7;
            }, n9 = {}.hasOwnProperty;
            e12.AttachmentManager = function(n10) {
              function i6(t7) {
                var e13, n11, i7;
                for (null == t7 && (t7 = []), this.managedAttachments = {}, n11 = 0, i7 = t7.length; i7 > n11; n11++)
                  e13 = t7[n11], this.manageAttachment(e13);
              }
              return t6(i6, n10), i6.prototype.getAttachments = function() {
                var t7, e13, n11, i7;
                n11 = this.managedAttachments, i7 = [];
                for (e13 in n11)
                  t7 = n11[e13], i7.push(t7);
                return i7;
              }, i6.prototype.manageAttachment = function(t7) {
                var n11, i7;
                return null != (n11 = this.managedAttachments)[i7 = t7.id] ? n11[i7] : n11[i7] = new e12.ManagedAttachment(this, t7);
              }, i6.prototype.attachmentIsManaged = function(t7) {
                return t7.id in this.managedAttachments;
              }, i6.prototype.requestRemovalOfAttachment = function(t7) {
                var e13;
                return this.attachmentIsManaged(t7) && null != (e13 = this.delegate) && "function" == typeof e13.attachmentManagerDidRequestRemovalOfAttachment ? e13.attachmentManagerDidRequestRemovalOfAttachment(t7) : void 0;
              }, i6.prototype.unmanageAttachment = function(t7) {
                var e13;
                return e13 = this.managedAttachments[t7.id], delete this.managedAttachments[t7.id], e13;
              }, i6;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6, l9, h6;
            t6 = e12.elementContainsNode, n9 = e12.findChildIndexOfNode, r7 = e12.nodeIsBlockStart, s8 = e12.nodeIsBlockStartComment, o11 = e12.nodeIsBlockContainer, a4 = e12.nodeIsCursorTarget, u4 = e12.nodeIsEmptyTextNode, c6 = e12.nodeIsTextNode, i6 = e12.nodeIsAttachmentElement, l9 = e12.tagName, h6 = e12.walkTree, e12.LocationMapper = function() {
              function e13(t7) {
                this.element = t7;
              }
              var p3, d3, f3, g2;
              return e13.prototype.findLocationFromContainerAndOffset = function(e14, i7, o12) {
                var s9, u5, l10, p4, g3, m3, v2;
                for (m3 = (null != o12 ? o12 : { strict: true }).strict, u5 = 0, l10 = false, p4 = { index: 0, offset: 0 }, (s9 = this.findAttachmentElementParentForNode(e14)) && (e14 = s9.parentNode, i7 = n9(s9)), v2 = h6(this.element, { usingFilter: f3 }); v2.nextNode(); ) {
                  if (g3 = v2.currentNode, g3 === e14 && c6(e14)) {
                    a4(g3) || (p4.offset += i7);
                    break;
                  }
                  if (g3.parentNode === e14) {
                    if (u5++ === i7)
                      break;
                  } else if (!t6(e14, g3) && u5 > 0)
                    break;
                  r7(g3, { strict: m3 }) ? (l10 && p4.index++, p4.offset = 0, l10 = true) : p4.offset += d3(g3);
                }
                return p4;
              }, e13.prototype.findContainerAndOffsetFromLocation = function(t7) {
                var e14, i7, s9, u5, l10;
                if (0 === t7.index && 0 === t7.offset) {
                  for (e14 = this.element, u5 = 0; e14.firstChild; )
                    if (e14 = e14.firstChild, o11(e14)) {
                      u5 = 1;
                      break;
                    }
                  return [e14, u5];
                }
                if (l10 = this.findNodeAndOffsetFromLocation(t7), i7 = l10[0], s9 = l10[1], i7) {
                  if (c6(i7))
                    0 === d3(i7) ? (e14 = i7.parentNode.parentNode, u5 = n9(i7.parentNode), a4(i7, { name: "right" }) && u5++) : (e14 = i7, u5 = t7.offset - s9);
                  else {
                    if (e14 = i7.parentNode, !r7(i7.previousSibling) && !o11(e14))
                      for (; i7 === e14.lastChild && (i7 = e14, e14 = e14.parentNode, !o11(e14)); )
                        ;
                    u5 = n9(i7), 0 !== t7.offset && u5++;
                  }
                  return [e14, u5];
                }
              }, e13.prototype.findNodeAndOffsetFromLocation = function(t7) {
                var e14, n10, i7, o12, r8, s9, u5, l10;
                for (u5 = 0, l10 = this.getSignificantNodesForIndex(t7.index), n10 = 0, i7 = l10.length; i7 > n10; n10++) {
                  if (e14 = l10[n10], o12 = d3(e14), t7.offset <= u5 + o12)
                    if (c6(e14)) {
                      if (r8 = e14, s9 = u5, t7.offset === s9 && a4(r8))
                        break;
                    } else
                      r8 || (r8 = e14, s9 = u5);
                  if (u5 += o12, u5 > t7.offset)
                    break;
                }
                return [r8, s9];
              }, e13.prototype.findAttachmentElementParentForNode = function(t7) {
                for (; t7 && t7 !== this.element; ) {
                  if (i6(t7))
                    return t7;
                  t7 = t7.parentNode;
                }
              }, e13.prototype.getSignificantNodesForIndex = function(t7) {
                var e14, n10, i7, o12, r8;
                for (i7 = [], r8 = h6(this.element, { usingFilter: p3 }), o12 = false; r8.nextNode(); )
                  if (n10 = r8.currentNode, s8(n10)) {
                    if ("undefined" != typeof e14 && null !== e14 ? e14++ : e14 = 0, e14 === t7)
                      o12 = true;
                    else if (o12)
                      break;
                  } else
                    o12 && i7.push(n10);
                return i7;
              }, d3 = function(t7) {
                var e14;
                return t7.nodeType === Node.TEXT_NODE ? a4(t7) ? 0 : (e14 = t7.textContent, e14.length) : "br" === l9(t7) || i6(t7) ? 1 : 0;
              }, p3 = function(t7) {
                return g2(t7) === NodeFilter.FILTER_ACCEPT ? f3(t7) : NodeFilter.FILTER_REJECT;
              }, g2 = function(t7) {
                return u4(t7) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, f3 = function(t7) {
                return i6(t7.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
              }, e13;
            }();
          }.call(this), function() {
            var t6, n9, i6 = [].slice;
            t6 = e12.getDOMRange, n9 = e12.setDOMRange, e12.PointMapper = function() {
              function e13() {
              }
              return e13.prototype.createDOMRangeFromPoint = function(e14) {
                var i7, o11, r7, s8, a4, u4, c6, l9;
                if (c6 = e14.x, l9 = e14.y, document.caretPositionFromPoint)
                  return a4 = document.caretPositionFromPoint(c6, l9), r7 = a4.offsetNode, o11 = a4.offset, i7 = document.createRange(), i7.setStart(r7, o11), i7;
                if (document.caretRangeFromPoint)
                  return document.caretRangeFromPoint(c6, l9);
                if (document.body.createTextRange) {
                  s8 = t6();
                  try {
                    u4 = document.body.createTextRange(), u4.moveToPoint(c6, l9), u4.select();
                  } catch (h6) {
                  }
                  return i7 = t6(), n9(s8), i7;
                }
              }, e13.prototype.getClientRectsForDOMRange = function(t7) {
                var e14, n10, o11;
                return n10 = i6.call(t7.getClientRects()), o11 = n10[0], e14 = n10[n10.length - 1], [o11, e14];
              }, e13;
            }();
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, i6 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                o11.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, o11 = {}.hasOwnProperty, r7 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            t6 = e12.getDOMRange, e12.SelectionChangeObserver = function(e13) {
              function o12() {
                this.run = n9(this.run, this), this.update = n9(this.update, this), this.selectionManagers = [];
              }
              var s8;
              return i6(o12, e13), o12.prototype.start = function() {
                return this.started ? void 0 : (this.started = true, "onselectionchange" in document ? document.addEventListener("selectionchange", this.update, true) : this.run());
              }, o12.prototype.stop = function() {
                return this.started ? (this.started = false, document.removeEventListener("selectionchange", this.update, true)) : void 0;
              }, o12.prototype.registerSelectionManager = function(t7) {
                return r7.call(this.selectionManagers, t7) < 0 ? (this.selectionManagers.push(t7), this.start()) : void 0;
              }, o12.prototype.unregisterSelectionManager = function(t7) {
                var e14;
                return this.selectionManagers = function() {
                  var n10, i7, o13, r8;
                  for (o13 = this.selectionManagers, r8 = [], n10 = 0, i7 = o13.length; i7 > n10; n10++)
                    e14 = o13[n10], e14 !== t7 && r8.push(e14);
                  return r8;
                }.call(this), 0 === this.selectionManagers.length ? this.stop() : void 0;
              }, o12.prototype.notifySelectionManagersOfSelectionChange = function() {
                var t7, e14, n10, i7, o13;
                for (n10 = this.selectionManagers, i7 = [], t7 = 0, e14 = n10.length; e14 > t7; t7++)
                  o13 = n10[t7], i7.push(o13.selectionDidChange());
                return i7;
              }, o12.prototype.update = function() {
                var e14;
                return e14 = t6(), s8(e14, this.domRange) ? void 0 : (this.domRange = e14, this.notifySelectionManagersOfSelectionChange());
              }, o12.prototype.reset = function() {
                return this.domRange = null, this.update();
              }, o12.prototype.run = function() {
                return this.started ? (this.update(), requestAnimationFrame(this.run)) : void 0;
              }, s8 = function(t7, e14) {
                return (null != t7 ? t7.startContainer : void 0) === (null != e14 ? e14.startContainer : void 0) && (null != t7 ? t7.startOffset : void 0) === (null != e14 ? e14.startOffset : void 0) && (null != t7 ? t7.endContainer : void 0) === (null != e14 ? e14.endContainer : void 0) && (null != t7 ? t7.endOffset : void 0) === (null != e14 ? e14.endOffset : void 0);
              }, o12;
            }(e12.BasicObject), null == e12.selectionChangeObserver && (e12.selectionChangeObserver = new e12.SelectionChangeObserver());
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4, c6, l9, h6 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            }, p3 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                d3.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, d3 = {}.hasOwnProperty;
            i6 = e12.getDOMSelection, n9 = e12.getDOMRange, l9 = e12.setDOMRange, t6 = e12.elementContainsNode, s8 = e12.nodeIsCursorTarget, r7 = e12.innerElementIsActive, o11 = e12.handleEvent, a4 = e12.normalizeRange, u4 = e12.rangeIsCollapsed, c6 = e12.rangesAreEqual, e12.SelectionManager = function(d4) {
              function f3(t7) {
                this.element = t7, this.selectionDidChange = h6(this.selectionDidChange, this), this.didMouseDown = h6(this.didMouseDown, this), this.locationMapper = new e12.LocationMapper(this.element), this.pointMapper = new e12.PointMapper(), this.lockCount = 0, o11("mousedown", { onElement: this.element, withCallback: this.didMouseDown });
              }
              return p3(f3, d4), f3.prototype.getLocationRange = function(t7) {
                var e13, i7;
                return null == t7 && (t7 = {}), e13 = t7.strict === false ? this.createLocationRangeFromDOMRange(n9(), { strict: false }) : t7.ignoreLock ? this.currentLocationRange : null != (i7 = this.lockedLocationRange) ? i7 : this.currentLocationRange;
              }, f3.prototype.setLocationRange = function(t7) {
                var e13;
                if (!this.lockedLocationRange)
                  return t7 = a4(t7), (e13 = this.createDOMRangeFromLocationRange(t7)) ? (l9(e13), this.updateCurrentLocationRange(t7)) : void 0;
              }, f3.prototype.setLocationRangeFromPointRange = function(t7) {
                var e13, n10;
                return t7 = a4(t7), n10 = this.getLocationAtPoint(t7[0]), e13 = this.getLocationAtPoint(t7[1]), this.setLocationRange([n10, e13]);
              }, f3.prototype.getClientRectAtLocationRange = function(t7) {
                var e13;
                return (e13 = this.createDOMRangeFromLocationRange(t7)) ? this.getClientRectsForDOMRange(e13)[1] : void 0;
              }, f3.prototype.locationIsCursorTarget = function(t7) {
                var e13, n10, i7;
                return i7 = this.findNodeAndOffsetFromLocation(t7), e13 = i7[0], n10 = i7[1], s8(e13);
              }, f3.prototype.lock = function() {
                return 0 === this.lockCount++ ? (this.updateCurrentLocationRange(), this.lockedLocationRange = this.getLocationRange()) : void 0;
              }, f3.prototype.unlock = function() {
                var t7;
                return 0 === --this.lockCount && (t7 = this.lockedLocationRange, this.lockedLocationRange = null, null != t7) ? this.setLocationRange(t7) : void 0;
              }, f3.prototype.clearSelection = function() {
                var t7;
                return null != (t7 = i6()) ? t7.removeAllRanges() : void 0;
              }, f3.prototype.selectionIsCollapsed = function() {
                var t7;
                return (null != (t7 = n9()) ? t7.collapsed : void 0) === true;
              }, f3.prototype.selectionIsExpanded = function() {
                return !this.selectionIsCollapsed();
              }, f3.prototype.createLocationRangeFromDOMRange = function(t7, e13) {
                var n10, i7;
                if (null != t7 && this.domRangeWithinElement(t7) && (i7 = this.findLocationFromContainerAndOffset(t7.startContainer, t7.startOffset, e13)))
                  return t7.collapsed || (n10 = this.findLocationFromContainerAndOffset(t7.endContainer, t7.endOffset, e13)), a4([i7, n10]);
              }, f3.proxyMethod("locationMapper.findLocationFromContainerAndOffset"), f3.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"), f3.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"), f3.proxyMethod("pointMapper.createDOMRangeFromPoint"), f3.proxyMethod("pointMapper.getClientRectsForDOMRange"), f3.prototype.didMouseDown = function() {
                return this.pauseTemporarily();
              }, f3.prototype.pauseTemporarily = function() {
                var e13, n10, i7, r8;
                return this.paused = true, n10 = function(e14) {
                  return function() {
                    var n11, o12, s9;
                    for (e14.paused = false, clearTimeout(r8), o12 = 0, s9 = i7.length; s9 > o12; o12++)
                      n11 = i7[o12], n11.destroy();
                    return t6(document, e14.element) ? e14.selectionDidChange() : void 0;
                  };
                }(this), r8 = setTimeout(n10, 200), i7 = function() {
                  var t7, i8, r9, s9;
                  for (r9 = ["mousemove", "keydown"], s9 = [], t7 = 0, i8 = r9.length; i8 > t7; t7++)
                    e13 = r9[t7], s9.push(o11(e13, { onElement: document, withCallback: n10 }));
                  return s9;
                }();
              }, f3.prototype.selectionDidChange = function() {
                return this.paused || r7(this.element) ? void 0 : this.updateCurrentLocationRange();
              }, f3.prototype.updateCurrentLocationRange = function(t7) {
                var e13;
                return (null != t7 ? t7 : t7 = this.createLocationRangeFromDOMRange(n9())) && !c6(t7, this.currentLocationRange) ? (this.currentLocationRange = t7, null != (e13 = this.delegate) && "function" == typeof e13.locationRangeDidChange ? e13.locationRangeDidChange(this.currentLocationRange.slice(0)) : void 0) : void 0;
              }, f3.prototype.createDOMRangeFromLocationRange = function(t7) {
                var e13, n10, i7, o12;
                return i7 = this.findContainerAndOffsetFromLocation(t7[0]), n10 = u4(t7) ? i7 : null != (o12 = this.findContainerAndOffsetFromLocation(t7[1])) ? o12 : i7, null != i7 && null != n10 ? (e13 = document.createRange(), e13.setStart.apply(e13, i7), e13.setEnd.apply(e13, n10), e13) : void 0;
              }, f3.prototype.getLocationAtPoint = function(t7) {
                var e13, n10;
                return (e13 = this.createDOMRangeFromPoint(t7)) && null != (n10 = this.createLocationRangeFromDOMRange(e13)) ? n10[0] : void 0;
              }, f3.prototype.domRangeWithinElement = function(e13) {
                return e13.collapsed ? t6(this.element, e13.startContainer) : t6(this.element, e13.startContainer) && t6(this.element, e13.endContainer);
              }, f3;
            }(e12.BasicObject);
          }.call(this), function() {
            var t6, n9, i6, o11, r7 = function(t7, e13) {
              function n10() {
                this.constructor = t7;
              }
              for (var i7 in e13)
                s8.call(e13, i7) && (t7[i7] = e13[i7]);
              return n10.prototype = e13.prototype, t7.prototype = new n10(), t7.__super__ = e13.prototype, t7;
            }, s8 = {}.hasOwnProperty, a4 = [].slice;
            i6 = e12.rangeIsCollapsed, o11 = e12.rangesAreEqual, n9 = e12.objectsAreEqual, t6 = e12.getBlockConfig, e12.EditorController = function(s9) {
              function u4(t7) {
                var n10, i7;
                this.editorElement = t7.editorElement, n10 = t7.document, i7 = t7.html, this.selectionManager = new e12.SelectionManager(this.editorElement), this.selectionManager.delegate = this, this.composition = new e12.Composition(), this.composition.delegate = this, this.attachmentManager = new e12.AttachmentManager(this.composition.getAttachments()), this.attachmentManager.delegate = this, this.inputController = new e12["Level" + e12.config.input.getLevel() + "InputController"](this.editorElement), this.inputController.delegate = this, this.inputController.responder = this.composition, this.compositionController = new e12.CompositionController(this.editorElement, this.composition), this.compositionController.delegate = this, this.toolbarController = new e12.ToolbarController(this.editorElement.toolbarElement), this.toolbarController.delegate = this, this.editor = new e12.Editor(this.composition, this.selectionManager, this.editorElement), null != n10 ? this.editor.loadDocument(n10) : this.editor.loadHTML(i7);
              }
              var c6;
              return r7(u4, s9), u4.prototype.registerSelectionManager = function() {
                return e12.selectionChangeObserver.registerSelectionManager(this.selectionManager);
              }, u4.prototype.unregisterSelectionManager = function() {
                return e12.selectionChangeObserver.unregisterSelectionManager(this.selectionManager);
              }, u4.prototype.render = function() {
                return this.compositionController.render();
              }, u4.prototype.reparse = function() {
                return this.composition.replaceHTML(this.editorElement.innerHTML);
              }, u4.prototype.compositionDidChangeDocument = function() {
                return this.notifyEditorElement("document-change"), this.handlingInput ? void 0 : this.render();
              }, u4.prototype.compositionDidChangeCurrentAttributes = function(t7) {
                return this.currentAttributes = t7, this.toolbarController.updateAttributes(this.currentAttributes), this.updateCurrentActions(), this.notifyEditorElement("attributes-change", { attributes: this.currentAttributes });
              }, u4.prototype.compositionDidPerformInsertionAtRange = function(t7) {
                return this.pasting ? this.pastedRange = t7 : void 0;
              }, u4.prototype.compositionShouldAcceptFile = function(t7) {
                return this.notifyEditorElement("file-accept", { file: t7 });
              }, u4.prototype.compositionDidAddAttachment = function(t7) {
                var e13;
                return e13 = this.attachmentManager.manageAttachment(t7), this.notifyEditorElement("attachment-add", { attachment: e13 });
              }, u4.prototype.compositionDidEditAttachment = function(t7) {
                var e13;
                return this.compositionController.rerenderViewForObject(t7), e13 = this.attachmentManager.manageAttachment(t7), this.notifyEditorElement("attachment-edit", { attachment: e13 }), this.notifyEditorElement("change");
              }, u4.prototype.compositionDidChangeAttachmentPreviewURL = function(t7) {
                return this.compositionController.invalidateViewForObject(t7), this.notifyEditorElement("change");
              }, u4.prototype.compositionDidRemoveAttachment = function(t7) {
                var e13;
                return e13 = this.attachmentManager.unmanageAttachment(t7), this.notifyEditorElement("attachment-remove", { attachment: e13 });
              }, u4.prototype.compositionDidStartEditingAttachment = function(t7, e13) {
                return this.attachmentLocationRange = this.composition.document.getLocationRangeOfAttachment(t7), this.compositionController.installAttachmentEditorForAttachment(t7, e13), this.selectionManager.setLocationRange(this.attachmentLocationRange);
              }, u4.prototype.compositionDidStopEditingAttachment = function() {
                return this.compositionController.uninstallAttachmentEditor(), this.attachmentLocationRange = null;
              }, u4.prototype.compositionDidRequestChangingSelectionToLocationRange = function(t7) {
                return !this.loadingSnapshot || this.isFocused() ? (this.requestedLocationRange = t7, this.compositionRevisionWhenLocationRangeRequested = this.composition.revision, this.handlingInput ? void 0 : this.render()) : void 0;
              }, u4.prototype.compositionWillLoadSnapshot = function() {
                return this.loadingSnapshot = true;
              }, u4.prototype.compositionDidLoadSnapshot = function() {
                return this.compositionController.refreshViewCache(), this.render(), this.loadingSnapshot = false;
              }, u4.prototype.getSelectionManager = function() {
                return this.selectionManager;
              }, u4.proxyMethod("getSelectionManager().setLocationRange"), u4.proxyMethod("getSelectionManager().getLocationRange"), u4.prototype.attachmentManagerDidRequestRemovalOfAttachment = function(t7) {
                return this.removeAttachment(t7);
              }, u4.prototype.compositionControllerWillSyncDocumentView = function() {
                return this.inputController.editorWillSyncDocumentView(), this.selectionManager.lock(), this.selectionManager.clearSelection();
              }, u4.prototype.compositionControllerDidSyncDocumentView = function() {
                return this.inputController.editorDidSyncDocumentView(), this.selectionManager.unlock(), this.updateCurrentActions(), this.notifyEditorElement("sync");
              }, u4.prototype.compositionControllerDidRender = function() {
                return null != this.requestedLocationRange && (this.compositionRevisionWhenLocationRangeRequested === this.composition.revision && this.selectionManager.setLocationRange(this.requestedLocationRange), this.requestedLocationRange = null, this.compositionRevisionWhenLocationRangeRequested = null), this.renderedCompositionRevision !== this.composition.revision && (this.runEditorFilters(), this.composition.updateCurrentAttributes(), this.notifyEditorElement("render")), this.renderedCompositionRevision = this.composition.revision;
              }, u4.prototype.compositionControllerDidFocus = function() {
                return this.isFocusedInvisibly() && this.setLocationRange({ index: 0, offset: 0 }), this.toolbarController.hideDialog(), this.notifyEditorElement("focus");
              }, u4.prototype.compositionControllerDidBlur = function() {
                return this.notifyEditorElement("blur");
              }, u4.prototype.compositionControllerDidSelectAttachment = function(t7, e13) {
                return this.toolbarController.hideDialog(), this.composition.editAttachment(t7, e13);
              }, u4.prototype.compositionControllerDidRequestDeselectingAttachment = function(t7) {
                var e13, n10;
                return e13 = null != (n10 = this.attachmentLocationRange) ? n10 : this.composition.document.getLocationRangeOfAttachment(t7), this.selectionManager.setLocationRange(e13[1]);
              }, u4.prototype.compositionControllerWillUpdateAttachment = function(t7) {
                return this.editor.recordUndoEntry("Edit Attachment", { context: t7.id, consolidatable: true });
              }, u4.prototype.compositionControllerDidRequestRemovalOfAttachment = function(t7) {
                return this.removeAttachment(t7);
              }, u4.prototype.inputControllerWillHandleInput = function() {
                return this.handlingInput = true, this.requestedRender = false;
              }, u4.prototype.inputControllerDidRequestRender = function() {
                return this.requestedRender = true;
              }, u4.prototype.inputControllerDidHandleInput = function() {
                return this.handlingInput = false, this.requestedRender ? (this.requestedRender = false, this.render()) : void 0;
              }, u4.prototype.inputControllerDidAllowUnhandledInput = function() {
                return this.notifyEditorElement("change");
              }, u4.prototype.inputControllerDidRequestReparse = function() {
                return this.reparse();
              }, u4.prototype.inputControllerWillPerformTyping = function() {
                return this.recordTypingUndoEntry();
              }, u4.prototype.inputControllerWillPerformFormatting = function(t7) {
                return this.recordFormattingUndoEntry(t7);
              }, u4.prototype.inputControllerWillCutText = function() {
                return this.editor.recordUndoEntry("Cut");
              }, u4.prototype.inputControllerWillPaste = function(t7) {
                return this.editor.recordUndoEntry("Paste"), this.pasting = true, this.notifyEditorElement("before-paste", { paste: t7 });
              }, u4.prototype.inputControllerDidPaste = function(t7) {
                return t7.range = this.pastedRange, this.pastedRange = null, this.pasting = null, this.notifyEditorElement("paste", { paste: t7 });
              }, u4.prototype.inputControllerWillMoveText = function() {
                return this.editor.recordUndoEntry("Move");
              }, u4.prototype.inputControllerWillAttachFiles = function() {
                return this.editor.recordUndoEntry("Drop Files");
              }, u4.prototype.inputControllerWillPerformUndo = function() {
                return this.editor.undo();
              }, u4.prototype.inputControllerWillPerformRedo = function() {
                return this.editor.redo();
              }, u4.prototype.inputControllerDidReceiveKeyboardCommand = function(t7) {
                return this.toolbarController.applyKeyboardCommand(t7);
              }, u4.prototype.inputControllerDidStartDrag = function() {
                return this.locationRangeBeforeDrag = this.selectionManager.getLocationRange();
              }, u4.prototype.inputControllerDidReceiveDragOverPoint = function(t7) {
                return this.selectionManager.setLocationRangeFromPointRange(t7);
              }, u4.prototype.inputControllerDidCancelDrag = function() {
                return this.selectionManager.setLocationRange(this.locationRangeBeforeDrag), this.locationRangeBeforeDrag = null;
              }, u4.prototype.locationRangeDidChange = function(t7) {
                return this.composition.updateCurrentAttributes(), this.updateCurrentActions(), this.attachmentLocationRange && !o11(this.attachmentLocationRange, t7) && this.composition.stopEditingAttachment(), this.notifyEditorElement("selection-change");
              }, u4.prototype.toolbarDidClickButton = function() {
                return this.getLocationRange() ? void 0 : this.setLocationRange({ index: 0, offset: 0 });
              }, u4.prototype.toolbarDidInvokeAction = function(t7) {
                return this.invokeAction(t7);
              }, u4.prototype.toolbarDidToggleAttribute = function(t7) {
                return this.recordFormattingUndoEntry(t7), this.composition.toggleCurrentAttribute(t7), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u4.prototype.toolbarDidUpdateAttribute = function(t7, e13) {
                return this.recordFormattingUndoEntry(t7), this.composition.setCurrentAttribute(t7, e13), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u4.prototype.toolbarDidRemoveAttribute = function(t7) {
                return this.recordFormattingUndoEntry(t7), this.composition.removeCurrentAttribute(t7), this.render(), this.selectionFrozen ? void 0 : this.editorElement.focus();
              }, u4.prototype.toolbarWillShowDialog = function() {
                return this.composition.expandSelectionForEditing(), this.freezeSelection();
              }, u4.prototype.toolbarDidShowDialog = function(t7) {
                return this.notifyEditorElement("toolbar-dialog-show", { dialogName: t7 });
              }, u4.prototype.toolbarDidHideDialog = function(t7) {
                return this.thawSelection(), this.editorElement.focus(), this.notifyEditorElement("toolbar-dialog-hide", { dialogName: t7 });
              }, u4.prototype.freezeSelection = function() {
                return this.selectionFrozen ? void 0 : (this.selectionManager.lock(), this.composition.freezeSelection(), this.selectionFrozen = true, this.render());
              }, u4.prototype.thawSelection = function() {
                return this.selectionFrozen ? (this.composition.thawSelection(), this.selectionManager.unlock(), this.selectionFrozen = false, this.render()) : void 0;
              }, u4.prototype.actions = { undo: { test: function() {
                return this.editor.canUndo();
              }, perform: function() {
                return this.editor.undo();
              } }, redo: { test: function() {
                return this.editor.canRedo();
              }, perform: function() {
                return this.editor.redo();
              } }, link: { test: function() {
                return this.editor.canActivateAttribute("href");
              } }, increaseNestingLevel: { test: function() {
                return this.editor.canIncreaseNestingLevel();
              }, perform: function() {
                return this.editor.increaseNestingLevel() && this.render();
              } }, decreaseNestingLevel: { test: function() {
                return this.editor.canDecreaseNestingLevel();
              }, perform: function() {
                return this.editor.decreaseNestingLevel() && this.render();
              } }, attachFiles: { test: function() {
                return true;
              }, perform: function() {
                return e12.config.input.pickFiles(this.editor.insertFiles);
              } } }, u4.prototype.canInvokeAction = function(t7) {
                var e13, n10;
                return this.actionIsExternal(t7) ? true : !!(null != (e13 = this.actions[t7]) && null != (n10 = e13.test) ? n10.call(this) : void 0);
              }, u4.prototype.invokeAction = function(t7) {
                var e13, n10;
                return this.actionIsExternal(t7) ? this.notifyEditorElement("action-invoke", { actionName: t7 }) : null != (e13 = this.actions[t7]) && null != (n10 = e13.perform) ? n10.call(this) : void 0;
              }, u4.prototype.actionIsExternal = function(t7) {
                return /^x-./.test(t7);
              }, u4.prototype.getCurrentActions = function() {
                var t7, e13;
                e13 = {};
                for (t7 in this.actions)
                  e13[t7] = this.canInvokeAction(t7);
                return e13;
              }, u4.prototype.updateCurrentActions = function() {
                var t7;
                return t7 = this.getCurrentActions(), n9(t7, this.currentActions) ? void 0 : (this.currentActions = t7, this.toolbarController.updateActions(this.currentActions), this.notifyEditorElement("actions-change", { actions: this.currentActions }));
              }, u4.prototype.runEditorFilters = function() {
                var t7, e13, n10, i7, o12, r8, s10, a5;
                for (a5 = this.composition.getSnapshot(), o12 = this.editor.filters, n10 = 0, i7 = o12.length; i7 > n10; n10++)
                  e13 = o12[n10], t7 = a5.document, s10 = a5.selectedRange, a5 = null != (r8 = e13.call(this.editor, a5)) ? r8 : {}, null == a5.document && (a5.document = t7), null == a5.selectedRange && (a5.selectedRange = s10);
                return c6(a5, this.composition.getSnapshot()) ? void 0 : this.composition.loadSnapshot(a5);
              }, c6 = function(t7, e13) {
                return o11(t7.selectedRange, e13.selectedRange) && t7.document.isEqualTo(e13.document);
              }, u4.prototype.updateInputElement = function() {
                var t7, n10;
                return t7 = this.compositionController.getSerializableElement(), n10 = e12.serializeToContentType(t7, "text/html"), this.editorElement.setInputElementValue(n10);
              }, u4.prototype.notifyEditorElement = function(t7, e13) {
                switch (t7) {
                  case "document-change":
                    this.documentChangedSinceLastRender = true;
                    break;
                  case "render":
                    this.documentChangedSinceLastRender && (this.documentChangedSinceLastRender = false, this.notifyEditorElement("change"));
                    break;
                  case "change":
                  case "attachment-add":
                  case "attachment-edit":
                  case "attachment-remove":
                    this.updateInputElement();
                }
                return this.editorElement.notify(t7, e13);
              }, u4.prototype.removeAttachment = function(t7) {
                return this.editor.recordUndoEntry("Delete Attachment"), this.composition.removeAttachment(t7), this.render();
              }, u4.prototype.recordFormattingUndoEntry = function(e13) {
                var n10, o12;
                return n10 = t6(e13), o12 = this.selectionManager.getLocationRange(), n10 || !i6(o12) ? this.editor.recordUndoEntry("Formatting", { context: this.getUndoContext(), consolidatable: true }) : void 0;
              }, u4.prototype.recordTypingUndoEntry = function() {
                return this.editor.recordUndoEntry("Typing", { context: this.getUndoContext(this.currentAttributes), consolidatable: true });
              }, u4.prototype.getUndoContext = function() {
                var t7;
                return t7 = 1 <= arguments.length ? a4.call(arguments, 0) : [], [this.getLocationContext(), this.getTimeContext()].concat(a4.call(t7));
              }, u4.prototype.getLocationContext = function() {
                var t7;
                return t7 = this.selectionManager.getLocationRange(), i6(t7) ? t7[0].index : t7;
              }, u4.prototype.getTimeContext = function() {
                return e12.config.undoInterval > 0 ? Math.floor(new Date().getTime() / e12.config.undoInterval) : 0;
              }, u4.prototype.isFocused = function() {
                var t7;
                return this.editorElement === (null != (t7 = this.editorElement.ownerDocument) ? t7.activeElement : void 0);
              }, u4.prototype.isFocusedInvisibly = function() {
                return this.isFocused() && !this.getLocationRange();
              }, u4;
            }(e12.Controller);
          }.call(this), function() {
            var t6, n9, i6, o11, r7, s8, a4, u4 = [].indexOf || function(t7) {
              for (var e13 = 0, n10 = this.length; n10 > e13; e13++)
                if (e13 in this && this[e13] === t7)
                  return e13;
              return -1;
            };
            n9 = e12.browser, s8 = e12.makeElement, a4 = e12.triggerEvent, o11 = e12.handleEvent, r7 = e12.handleEventOnce, i6 = e12.findClosestElementFromNode, t6 = e12.AttachmentView.attachmentSelector, e12.registerElement("trix-editor", function() {
              var c6, l9, h6, p3, d3, f3, g2, m3, v2;
              return g2 = 0, l9 = function(t7) {
                return !document.querySelector(":focus") && t7.hasAttribute("autofocus") && document.querySelector("[autofocus]") === t7 ? t7.focus() : void 0;
              }, m3 = function(t7) {
                return t7.hasAttribute("contenteditable") ? void 0 : (t7.setAttribute("contenteditable", ""), r7("focus", { onElement: t7, withCallback: function() {
                  return h6(t7);
                } }));
              }, h6 = function(t7) {
                return d3(t7), v2(t7);
              }, d3 = function(t7) {
                return ("function" == typeof document.queryCommandSupported ? document.queryCommandSupported("enableObjectResizing") : void 0) ? (document.execCommand("enableObjectResizing", false, false), o11("mscontrolselect", { onElement: t7, preventDefault: true })) : void 0;
              }, v2 = function() {
                var t7;
                return ("function" == typeof document.queryCommandSupported ? document.queryCommandSupported("DefaultParagraphSeparator") : void 0) && (t7 = e12.config.blockAttributes["default"].tagName, "div" === t7 || "p" === t7) ? document.execCommand("DefaultParagraphSeparator", false, t7) : void 0;
              }, c6 = function(t7) {
                return t7.hasAttribute("role") ? void 0 : t7.setAttribute("role", "textbox");
              }, f3 = function(t7) {
                var e13;
                if (!t7.hasAttribute("aria-label") && !t7.hasAttribute("aria-labelledby"))
                  return (e13 = function() {
                    var e14, n10, i7;
                    return i7 = function() {
                      var n11, i8, o12, r8;
                      for (o12 = t7.labels, r8 = [], n11 = 0, i8 = o12.length; i8 > n11; n11++)
                        e14 = o12[n11], e14.contains(t7) || r8.push(e14.textContent);
                      return r8;
                    }(), (n10 = i7.join(" ")) ? t7.setAttribute("aria-label", n10) : t7.removeAttribute("aria-label");
                  })(), o11("focus", { onElement: t7, withCallback: e13 });
              }, p3 = function() {
                return n9.forcesObjectResizing ? { display: "inline", width: "auto" } : { display: "inline-block", width: "1px" };
              }(), { defaultCSS: "%t {\n  display: block;\n}\n\n%t:empty:not(:focus)::before {\n  content: attr(placeholder);\n  color: graytext;\n  cursor: text;\n  pointer-events: none;\n}\n\n%t a[contenteditable=false] {\n  cursor: text;\n}\n\n%t img {\n  max-width: 100%;\n  height: auto;\n}\n\n%t " + t6 + " figcaption textarea {\n  resize: none;\n}\n\n%t " + t6 + " figcaption textarea.trix-autoresize-clone {\n  position: absolute;\n  left: -9999px;\n  max-height: 0px;\n}\n\n%t " + t6 + " figcaption[data-trix-placeholder]:empty::before {\n  content: attr(data-trix-placeholder);\n  color: graytext;\n}\n\n%t [data-trix-cursor-target] {\n  display: " + p3.display + " !important;\n  width: " + p3.width + " !important;\n  padding: 0 !important;\n  margin: 0 !important;\n  border: none !important;\n}\n\n%t [data-trix-cursor-target=left] {\n  vertical-align: top !important;\n  margin-left: -1px !important;\n}\n\n%t [data-trix-cursor-target=right] {\n  vertical-align: bottom !important;\n  margin-right: -1px !important;\n}", trixId: { get: function() {
                return this.hasAttribute("trix-id") ? this.getAttribute("trix-id") : (this.setAttribute("trix-id", ++g2), this.trixId);
              } }, labels: { get: function() {
                var t7, e13, n10;
                return e13 = [], this.id && this.ownerDocument && e13.push.apply(e13, this.ownerDocument.querySelectorAll("label[for='" + this.id + "']")), (t7 = i6(this, { matchingSelector: "label" })) && ((n10 = t7.control) === this || null === n10) && e13.push(t7), e13;
              } }, toolbarElement: { get: function() {
                var t7, e13, n10;
                return this.hasAttribute("toolbar") ? null != (e13 = this.ownerDocument) ? e13.getElementById(this.getAttribute("toolbar")) : void 0 : this.parentNode ? (n10 = "trix-toolbar-" + this.trixId, this.setAttribute("toolbar", n10), t7 = s8("trix-toolbar", { id: n10 }), this.parentNode.insertBefore(t7, this), t7) : void 0;
              } }, inputElement: { get: function() {
                var t7, e13, n10;
                return this.hasAttribute("input") ? null != (n10 = this.ownerDocument) ? n10.getElementById(this.getAttribute("input")) : void 0 : this.parentNode ? (e13 = "trix-input-" + this.trixId, this.setAttribute("input", e13), t7 = s8("input", { type: "hidden", id: e13 }), this.parentNode.insertBefore(t7, this.nextElementSibling), t7) : void 0;
              } }, editor: { get: function() {
                var t7;
                return null != (t7 = this.editorController) ? t7.editor : void 0;
              } }, name: { get: function() {
                var t7;
                return null != (t7 = this.inputElement) ? t7.name : void 0;
              } }, value: { get: function() {
                var t7;
                return null != (t7 = this.inputElement) ? t7.value : void 0;
              }, set: function(t7) {
                var e13;
                return this.defaultValue = t7, null != (e13 = this.editor) ? e13.loadHTML(this.defaultValue) : void 0;
              } }, notify: function(t7, e13) {
                return this.editorController ? a4("trix-" + t7, { onElement: this, attributes: e13 }) : void 0;
              }, setInputElementValue: function(t7) {
                var e13;
                return null != (e13 = this.inputElement) ? e13.value = t7 : void 0;
              }, initialize: function() {
                return this.hasAttribute("data-trix-internal") ? void 0 : (m3(this), c6(this), f3(this));
              }, connect: function() {
                return this.hasAttribute("data-trix-internal") ? void 0 : (this.editorController || (a4("trix-before-initialize", { onElement: this }), this.editorController = new e12.EditorController({ editorElement: this, html: this.defaultValue = this.value }), requestAnimationFrame(function(t7) {
                  return function() {
                    return a4("trix-initialize", { onElement: t7 });
                  };
                }(this))), this.editorController.registerSelectionManager(), this.registerResetListener(), this.registerClickListener(), l9(this));
              }, disconnect: function() {
                var t7;
                return null != (t7 = this.editorController) && t7.unregisterSelectionManager(), this.unregisterResetListener(), this.unregisterClickListener();
              }, registerResetListener: function() {
                return this.resetListener = this.resetBubbled.bind(this), window.addEventListener("reset", this.resetListener, false);
              }, unregisterResetListener: function() {
                return window.removeEventListener("reset", this.resetListener, false);
              }, registerClickListener: function() {
                return this.clickListener = this.clickBubbled.bind(this), window.addEventListener("click", this.clickListener, false);
              }, unregisterClickListener: function() {
                return window.removeEventListener("click", this.clickListener, false);
              }, resetBubbled: function(t7) {
                var e13;
                if (!t7.defaultPrevented && t7.target === (null != (e13 = this.inputElement) ? e13.form : void 0))
                  return this.reset();
              }, clickBubbled: function(t7) {
                var e13;
                if (!(t7.defaultPrevented || this.contains(t7.target) || !(e13 = i6(t7.target, { matchingSelector: "label" })) || u4.call(this.labels, e13) < 0))
                  return this.focus();
              }, reset: function() {
                return this.value = this.defaultValue;
              } };
            }());
          }.call(this), function() {
          }.call(this);
        }).call(this), "object" == typeof module4 && module4.exports ? module4.exports = e12 : "function" == typeof define && define.amd && define(e12);
      }.call(exports2);
    }
  });

  // src/confirm.js
  var require_confirm = __commonJS({
    "src/confirm.js"() {
      function insertConfirmModal(message, element) {
        let content = `
    <div id="confirm-modal" class="z-50 animated fadeIn fixed top-0 left-0 w-full h-full table" style="background-color: rgba(0, 0, 0, 0.8);">
      <div class="table-cell align-middle">

        <div class="bg-white mx-auto rounded shadow p-8 max-w-sm">
          <h4>${message}</h4>

          <div class="flex justify-end items-center flex-wrap mt-6">
            <button data-behavior="cancel" class="btn btn-light-gray mr-2">Cancel</button>
            <button data-behavior="commit" class="btn btn-danger focus:outline-none">Confirm</button>
          </div>
        </div>
      </div>
    </div>
  `;
        document.body.insertAdjacentHTML("beforeend", content);
        document.activeElement.blur();
        return document.getElementById("confirm-modal");
      }
      Turbo.setConfirmMethod((message, element) => {
        let dialog = insertConfirmModal(message, element);
        return new Promise((resolve, reject) => {
          dialog.querySelector("[data-behavior='cancel']").addEventListener("click", (event) => {
            dialog.remove();
            resolve(false);
          }, { once: true });
          dialog.querySelector("[data-behavior='commit']").addEventListener("click", (event) => {
            dialog.remove();
            resolve(true);
          }, { once: true });
        });
      });
    }
  });

  // src/direct_uploads.js
  var require_direct_uploads = __commonJS({
    "src/direct_uploads.js"() {
      addEventListener("direct-upload:initialize", (event) => {
        const { target, detail } = event;
        const { id, file } = detail;
        target.insertAdjacentHTML("beforebegin", `
    <div id="direct-upload-${id}" class="direct-upload direct-upload--pending">
      <div id="direct-upload-progress-${id}" class="direct-upload__progress" style="width: 0%"></div>
      <span class="direct-upload__filename">${file.name}</span>
    </div>
  `);
      });
      addEventListener("direct-upload:start", (event) => {
        const { id } = event.detail;
        const element = document.getElementById(`direct-upload-${id}`);
        element.classList.remove("direct-upload--pending");
      });
      addEventListener("direct-upload:progress", (event) => {
        const { id, progress } = event.detail;
        const progressElement = document.getElementById(`direct-upload-progress-${id}`);
        progressElement.style.width = `${progress}%`;
      });
      addEventListener("direct-upload:error", (event) => {
        event.preventDefault();
        const { id, error: error2 } = event.detail;
        const element = document.getElementById(`direct-upload-${id}`);
        element.classList.add("direct-upload--error");
        element.setAttribute("title", error2);
      });
      addEventListener("direct-upload:end", (event) => {
        const { id } = event.detail;
        const element = document.getElementById(`direct-upload-${id}`);
        element.classList.add("direct-upload--complete");
      });
    }
  });

  // src/lazysrc.js
  var require_lazysrc = __commonJS({
    "src/lazysrc.js"() {
      document.addEventListener("turbo:load", () => {
        document.querySelectorAll("[data-src]").forEach((element) => {
          element.setAttribute("src", element.getAttribute("data-src"));
        });
      });
    }
  });

  // ../../node_modules/jstz/dist/jstz.js
  var require_jstz = __commonJS({
    "../../node_modules/jstz/dist/jstz.js"(exports2, module4) {
      (function(root) {
        var jstz2 = function() {
          "use strict";
          var HEMISPHERE_SOUTH = "s", consts = {
            DAY: 864e5,
            HOUR: 36e5,
            MINUTE: 6e4,
            SECOND: 1e3,
            BASELINE_YEAR: 2014,
            MAX_SCORE: 864e6,
            AMBIGUITIES: {
              "America/Denver": ["America/Mazatlan"],
              "Europe/London": ["Africa/Casablanca"],
              "America/Chicago": ["America/Mexico_City"],
              "America/Asuncion": ["America/Campo_Grande", "America/Santiago"],
              "America/Montevideo": ["America/Sao_Paulo", "America/Santiago"],
              "Asia/Beirut": ["Asia/Amman", "Asia/Jerusalem", "Europe/Helsinki", "Asia/Damascus", "Africa/Cairo", "Asia/Gaza", "Europe/Minsk"],
              "Pacific/Auckland": ["Pacific/Fiji"],
              "America/Los_Angeles": ["America/Santa_Isabel"],
              "America/New_York": ["America/Havana"],
              "America/Halifax": ["America/Goose_Bay"],
              "America/Godthab": ["America/Miquelon"],
              "Asia/Dubai": ["Asia/Yerevan"],
              "Asia/Jakarta": ["Asia/Krasnoyarsk"],
              "Asia/Shanghai": ["Asia/Irkutsk", "Australia/Perth"],
              "Australia/Sydney": ["Australia/Lord_Howe"],
              "Asia/Tokyo": ["Asia/Yakutsk"],
              "Asia/Dhaka": ["Asia/Omsk"],
              "Asia/Baku": ["Asia/Yerevan"],
              "Australia/Brisbane": ["Asia/Vladivostok"],
              "Pacific/Noumea": ["Asia/Vladivostok"],
              "Pacific/Majuro": ["Asia/Kamchatka", "Pacific/Fiji"],
              "Pacific/Tongatapu": ["Pacific/Apia"],
              "Asia/Baghdad": ["Europe/Minsk", "Europe/Moscow"],
              "Asia/Karachi": ["Asia/Yekaterinburg"],
              "Africa/Johannesburg": ["Asia/Gaza", "Africa/Cairo"]
            }
          }, get_date_offset = function get_date_offset2(date) {
            var offset2 = -date.getTimezoneOffset();
            return offset2 !== null ? offset2 : 0;
          }, lookup_key = function lookup_key2() {
            var january_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 0, 2)), june_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 5, 2)), diff = january_offset - june_offset;
            if (diff < 0) {
              return january_offset + ",1";
            } else if (diff > 0) {
              return june_offset + ",1," + HEMISPHERE_SOUTH;
            }
            return january_offset + ",0";
          }, get_from_internationalization_api = function get_from_internationalization_api2() {
            var format2, timezone;
            if (typeof Intl === "undefined" || typeof Intl.DateTimeFormat === "undefined") {
              return;
            }
            format2 = Intl.DateTimeFormat();
            if (typeof format2 === "undefined" || typeof format2.resolvedOptions === "undefined") {
              return;
            }
            timezone = format2.resolvedOptions().timeZone;
            if (timezone && (timezone.indexOf("/") > -1 || timezone === "UTC") && timezone.indexOf("Etc") != 0) {
              return timezone;
            }
          }, dst_dates = function dst_dates2(year) {
            var yearstart = new Date(year, 0, 1, 0, 0, 1, 0).getTime();
            var yearend = new Date(year, 12, 31, 23, 59, 59).getTime();
            var current = yearstart;
            var offset2 = new Date(current).getTimezoneOffset();
            var dst_start = null;
            var dst_end = null;
            while (current < yearend - 864e5) {
              var dateToCheck = new Date(current);
              var dateToCheckOffset = dateToCheck.getTimezoneOffset();
              if (dateToCheckOffset !== offset2) {
                if (dateToCheckOffset < offset2) {
                  dst_start = dateToCheck;
                }
                if (dateToCheckOffset > offset2) {
                  dst_end = dateToCheck;
                }
                offset2 = dateToCheckOffset;
              }
              current += 864e5;
            }
            if (dst_start && dst_end) {
              return {
                s: find_dst_fold(dst_start).getTime(),
                e: find_dst_fold(dst_end).getTime()
              };
            }
            return false;
          }, find_dst_fold = function find_dst_fold2(a_date, padding, iterator) {
            if (typeof padding === "undefined") {
              padding = consts.DAY;
              iterator = consts.HOUR;
            }
            var date_start = new Date(a_date.getTime() - padding).getTime();
            var date_end = a_date.getTime() + padding;
            var offset2 = new Date(date_start).getTimezoneOffset();
            var current = date_start;
            var dst_change = null;
            while (current < date_end - iterator) {
              var dateToCheck = new Date(current);
              var dateToCheckOffset = dateToCheck.getTimezoneOffset();
              if (dateToCheckOffset !== offset2) {
                dst_change = dateToCheck;
                break;
              }
              current += iterator;
            }
            if (padding === consts.DAY) {
              return find_dst_fold2(dst_change, consts.HOUR, consts.MINUTE);
            }
            if (padding === consts.HOUR) {
              return find_dst_fold2(dst_change, consts.MINUTE, consts.SECOND);
            }
            return dst_change;
          }, windows7_adaptations = function windows7_adaptions(rule_list, preliminary_timezone, score, sample) {
            if (score !== "N/A") {
              return score;
            }
            if (preliminary_timezone === "Asia/Beirut") {
              if (sample.name === "Africa/Cairo") {
                if (rule_list[6].s === 13983768e5 && rule_list[6].e === 14116788e5) {
                  return 0;
                }
              }
              if (sample.name === "Asia/Jerusalem") {
                if (rule_list[6].s === 13959648e5 && rule_list[6].e === 14118588e5) {
                  return 0;
                }
              }
            } else if (preliminary_timezone === "America/Santiago") {
              if (sample.name === "America/Asuncion") {
                if (rule_list[6].s === 14124816e5 && rule_list[6].e === 1397358e6) {
                  return 0;
                }
              }
              if (sample.name === "America/Campo_Grande") {
                if (rule_list[6].s === 14136912e5 && rule_list[6].e === 13925196e5) {
                  return 0;
                }
              }
            } else if (preliminary_timezone === "America/Montevideo") {
              if (sample.name === "America/Sao_Paulo") {
                if (rule_list[6].s === 14136876e5 && rule_list[6].e === 1392516e6) {
                  return 0;
                }
              }
            } else if (preliminary_timezone === "Pacific/Auckland") {
              if (sample.name === "Pacific/Fiji") {
                if (rule_list[6].s === 14142456e5 && rule_list[6].e === 13961016e5) {
                  return 0;
                }
              }
            }
            return score;
          }, best_dst_match = function best_dst_match2(rule_list, preliminary_timezone) {
            var score_sample = function score_sample2(sample2) {
              var score2 = 0;
              for (var j2 = 0; j2 < rule_list.length; j2++) {
                if (!!sample2.rules[j2] && !!rule_list[j2]) {
                  if (rule_list[j2].s >= sample2.rules[j2].s && rule_list[j2].e <= sample2.rules[j2].e) {
                    score2 = 0;
                    score2 += Math.abs(rule_list[j2].s - sample2.rules[j2].s);
                    score2 += Math.abs(sample2.rules[j2].e - rule_list[j2].e);
                  } else {
                    score2 = "N/A";
                    break;
                  }
                  if (score2 > consts.MAX_SCORE) {
                    score2 = "N/A";
                    break;
                  }
                }
              }
              score2 = windows7_adaptations(rule_list, preliminary_timezone, score2, sample2);
              return score2;
            };
            var scoreboard = {};
            var dst_zones = jstz2.olson.dst_rules.zones;
            var dst_zones_length = dst_zones.length;
            var ambiguities = consts.AMBIGUITIES[preliminary_timezone];
            for (var i6 = 0; i6 < dst_zones_length; i6++) {
              var sample = dst_zones[i6];
              var score = score_sample(dst_zones[i6]);
              if (score !== "N/A") {
                scoreboard[sample.name] = score;
              }
            }
            for (var tz in scoreboard) {
              if (scoreboard.hasOwnProperty(tz)) {
                for (var j = 0; j < ambiguities.length; j++) {
                  if (ambiguities[j] === tz) {
                    return tz;
                  }
                }
              }
            }
            return preliminary_timezone;
          }, get_by_dst = function get_by_dst2(preliminary_timezone) {
            var get_rules = function get_rules2() {
              var rule_list = [];
              for (var i6 = 0; i6 < jstz2.olson.dst_rules.years.length; i6++) {
                var year_rules = dst_dates(jstz2.olson.dst_rules.years[i6]);
                rule_list.push(year_rules);
              }
              return rule_list;
            };
            var check_has_dst = function check_has_dst2(rules2) {
              for (var i6 = 0; i6 < rules2.length; i6++) {
                if (rules2[i6] !== false) {
                  return true;
                }
              }
              return false;
            };
            var rules = get_rules();
            var has_dst = check_has_dst(rules);
            if (has_dst) {
              return best_dst_match(rules, preliminary_timezone);
            }
            return preliminary_timezone;
          }, determine = function determine2() {
            var preliminary_tz = get_from_internationalization_api();
            if (!preliminary_tz) {
              preliminary_tz = jstz2.olson.timezones[lookup_key()];
              if (typeof consts.AMBIGUITIES[preliminary_tz] !== "undefined") {
                preliminary_tz = get_by_dst(preliminary_tz);
              }
            }
            return {
              name: function() {
                return preliminary_tz;
              },
              stdTimezoneOffset: function() {
                return -lookup_key().split(",")[0];
              },
              timezoneOffset: function() {
                return -get_date_offset(new Date());
              }
            };
          };
          return {
            determine
          };
        }();
        jstz2.olson = jstz2.olson || {};
        jstz2.olson.timezones = {
          "-720,0": "Etc/GMT+12",
          "-660,0": "Pacific/Pago_Pago",
          "-660,1,s": "Pacific/Apia",
          "-600,1": "America/Adak",
          "-600,0": "Pacific/Honolulu",
          "-570,0": "Pacific/Marquesas",
          "-540,0": "Pacific/Gambier",
          "-540,1": "America/Anchorage",
          "-480,1": "America/Los_Angeles",
          "-480,0": "Pacific/Pitcairn",
          "-420,0": "America/Phoenix",
          "-420,1": "America/Denver",
          "-360,0": "America/Guatemala",
          "-360,1": "America/Chicago",
          "-360,1,s": "Pacific/Easter",
          "-300,0": "America/Bogota",
          "-300,1": "America/New_York",
          "-270,0": "America/Caracas",
          "-240,1": "America/Halifax",
          "-240,0": "America/Santo_Domingo",
          "-240,1,s": "America/Asuncion",
          "-210,1": "America/St_Johns",
          "-180,1": "America/Godthab",
          "-180,0": "America/Argentina/Buenos_Aires",
          "-180,1,s": "America/Montevideo",
          "-120,0": "America/Noronha",
          "-120,1": "America/Noronha",
          "-60,1": "Atlantic/Azores",
          "-60,0": "Atlantic/Cape_Verde",
          "0,0": "UTC",
          "0,1": "Europe/London",
          "60,1": "Europe/Berlin",
          "60,0": "Africa/Lagos",
          "60,1,s": "Africa/Windhoek",
          "120,1": "Asia/Beirut",
          "120,0": "Africa/Johannesburg",
          "180,0": "Asia/Baghdad",
          "180,1": "Europe/Moscow",
          "210,1": "Asia/Tehran",
          "240,0": "Asia/Dubai",
          "240,1": "Asia/Baku",
          "270,0": "Asia/Kabul",
          "300,1": "Asia/Yekaterinburg",
          "300,0": "Asia/Karachi",
          "330,0": "Asia/Kolkata",
          "345,0": "Asia/Kathmandu",
          "360,0": "Asia/Dhaka",
          "360,1": "Asia/Omsk",
          "390,0": "Asia/Rangoon",
          "420,1": "Asia/Krasnoyarsk",
          "420,0": "Asia/Jakarta",
          "480,0": "Asia/Shanghai",
          "480,1": "Asia/Irkutsk",
          "525,0": "Australia/Eucla",
          "525,1,s": "Australia/Eucla",
          "540,1": "Asia/Yakutsk",
          "540,0": "Asia/Tokyo",
          "570,0": "Australia/Darwin",
          "570,1,s": "Australia/Adelaide",
          "600,0": "Australia/Brisbane",
          "600,1": "Asia/Vladivostok",
          "600,1,s": "Australia/Sydney",
          "630,1,s": "Australia/Lord_Howe",
          "660,1": "Asia/Kamchatka",
          "660,0": "Pacific/Noumea",
          "690,0": "Pacific/Norfolk",
          "720,1,s": "Pacific/Auckland",
          "720,0": "Pacific/Majuro",
          "765,1,s": "Pacific/Chatham",
          "780,0": "Pacific/Tongatapu",
          "780,1,s": "Pacific/Apia",
          "840,0": "Pacific/Kiritimati"
        };
        jstz2.olson.dst_rules = {
          "years": [
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014
          ],
          "zones": [
            {
              "name": "Africa/Cairo",
              "rules": [
                {
                  "e": 12199572e5,
                  "s": 12090744e5
                },
                {
                  "e": 1250802e6,
                  "s": 1240524e6
                },
                {
                  "e": 12858804e5,
                  "s": 12840696e5
                },
                false,
                false,
                false,
                {
                  "e": 14116788e5,
                  "s": 1406844e6
                }
              ]
            },
            {
              "name": "Africa/Casablanca",
              "rules": [
                {
                  "e": 12202236e5,
                  "s": 12122784e5
                },
                {
                  "e": 12508092e5,
                  "s": 12438144e5
                },
                {
                  "e": 1281222e6,
                  "s": 12727584e5
                },
                {
                  "e": 13120668e5,
                  "s": 13017888e5
                },
                {
                  "e": 13489704e5,
                  "s": 1345428e6
                },
                {
                  "e": 13828392e5,
                  "s": 13761e8
                },
                {
                  "e": 14142888e5,
                  "s": 14069448e5
                }
              ]
            },
            {
              "name": "America/Asuncion",
              "rules": [
                {
                  "e": 12050316e5,
                  "s": 12243888e5
                },
                {
                  "e": 12364812e5,
                  "s": 12558384e5
                },
                {
                  "e": 12709548e5,
                  "s": 12860784e5
                },
                {
                  "e": 13024044e5,
                  "s": 1317528e6
                },
                {
                  "e": 1333854e6,
                  "s": 13495824e5
                },
                {
                  "e": 1364094e6,
                  "s": 1381032e6
                },
                {
                  "e": 13955436e5,
                  "s": 14124816e5
                }
              ]
            },
            {
              "name": "America/Campo_Grande",
              "rules": [
                {
                  "e": 12032172e5,
                  "s": 12243888e5
                },
                {
                  "e": 12346668e5,
                  "s": 12558384e5
                },
                {
                  "e": 12667212e5,
                  "s": 1287288e6
                },
                {
                  "e": 12981708e5,
                  "s": 13187376e5
                },
                {
                  "e": 13302252e5,
                  "s": 1350792e6
                },
                {
                  "e": 136107e7,
                  "s": 13822416e5
                },
                {
                  "e": 13925196e5,
                  "s": 14136912e5
                }
              ]
            },
            {
              "name": "America/Goose_Bay",
              "rules": [
                {
                  "e": 122559486e4,
                  "s": 120503526e4
                },
                {
                  "e": 125704446e4,
                  "s": 123648486e4
                },
                {
                  "e": 128909886e4,
                  "s": 126853926e4
                },
                {
                  "e": 13205556e5,
                  "s": 129998886e4
                },
                {
                  "e": 13520052e5,
                  "s": 13314456e5
                },
                {
                  "e": 13834548e5,
                  "s": 13628952e5
                },
                {
                  "e": 14149044e5,
                  "s": 13943448e5
                }
              ]
            },
            {
              "name": "America/Havana",
              "rules": [
                {
                  "e": 12249972e5,
                  "s": 12056436e5
                },
                {
                  "e": 12564468e5,
                  "s": 12364884e5
                },
                {
                  "e": 12885012e5,
                  "s": 12685428e5
                },
                {
                  "e": 13211604e5,
                  "s": 13005972e5
                },
                {
                  "e": 13520052e5,
                  "s": 13332564e5
                },
                {
                  "e": 13834548e5,
                  "s": 13628916e5
                },
                {
                  "e": 14149044e5,
                  "s": 13943412e5
                }
              ]
            },
            {
              "name": "America/Mazatlan",
              "rules": [
                {
                  "e": 1225008e6,
                  "s": 12074724e5
                },
                {
                  "e": 12564576e5,
                  "s": 1238922e6
                },
                {
                  "e": 1288512e6,
                  "s": 12703716e5
                },
                {
                  "e": 13199616e5,
                  "s": 13018212e5
                },
                {
                  "e": 13514112e5,
                  "s": 13332708e5
                },
                {
                  "e": 13828608e5,
                  "s": 13653252e5
                },
                {
                  "e": 14143104e5,
                  "s": 13967748e5
                }
              ]
            },
            {
              "name": "America/Mexico_City",
              "rules": [
                {
                  "e": 12250044e5,
                  "s": 12074688e5
                },
                {
                  "e": 1256454e6,
                  "s": 12389184e5
                },
                {
                  "e": 12885084e5,
                  "s": 1270368e6
                },
                {
                  "e": 1319958e6,
                  "s": 13018176e5
                },
                {
                  "e": 13514076e5,
                  "s": 13332672e5
                },
                {
                  "e": 13828572e5,
                  "s": 13653216e5
                },
                {
                  "e": 14143068e5,
                  "s": 13967712e5
                }
              ]
            },
            {
              "name": "America/Miquelon",
              "rules": [
                {
                  "e": 12255984e5,
                  "s": 12050388e5
                },
                {
                  "e": 1257048e6,
                  "s": 12364884e5
                },
                {
                  "e": 12891024e5,
                  "s": 12685428e5
                },
                {
                  "e": 1320552e6,
                  "s": 12999924e5
                },
                {
                  "e": 13520016e5,
                  "s": 1331442e6
                },
                {
                  "e": 13834512e5,
                  "s": 13628916e5
                },
                {
                  "e": 14149008e5,
                  "s": 13943412e5
                }
              ]
            },
            {
              "name": "America/Santa_Isabel",
              "rules": [
                {
                  "e": 12250116e5,
                  "s": 1207476e6
                },
                {
                  "e": 12564612e5,
                  "s": 12389256e5
                },
                {
                  "e": 12885156e5,
                  "s": 12703752e5
                },
                {
                  "e": 13199652e5,
                  "s": 13018248e5
                },
                {
                  "e": 13514148e5,
                  "s": 13332744e5
                },
                {
                  "e": 13828644e5,
                  "s": 13653288e5
                },
                {
                  "e": 1414314e6,
                  "s": 13967784e5
                }
              ]
            },
            {
              "name": "America/Santiago",
              "rules": [
                {
                  "e": 1206846e6,
                  "s": 1223784e6
                },
                {
                  "e": 1237086e6,
                  "s": 12552336e5
                },
                {
                  "e": 127035e7,
                  "s": 12866832e5
                },
                {
                  "e": 13048236e5,
                  "s": 13138992e5
                },
                {
                  "e": 13356684e5,
                  "s": 13465584e5
                },
                {
                  "e": 1367118e6,
                  "s": 13786128e5
                },
                {
                  "e": 13985676e5,
                  "s": 14100624e5
                }
              ]
            },
            {
              "name": "America/Sao_Paulo",
              "rules": [
                {
                  "e": 12032136e5,
                  "s": 12243852e5
                },
                {
                  "e": 12346632e5,
                  "s": 12558348e5
                },
                {
                  "e": 12667176e5,
                  "s": 12872844e5
                },
                {
                  "e": 12981672e5,
                  "s": 1318734e6
                },
                {
                  "e": 13302216e5,
                  "s": 13507884e5
                },
                {
                  "e": 13610664e5,
                  "s": 1382238e6
                },
                {
                  "e": 1392516e6,
                  "s": 14136876e5
                }
              ]
            },
            {
              "name": "Asia/Amman",
              "rules": [
                {
                  "e": 1225404e6,
                  "s": 12066552e5
                },
                {
                  "e": 12568536e5,
                  "s": 12381048e5
                },
                {
                  "e": 12883032e5,
                  "s": 12695544e5
                },
                {
                  "e": 13197528e5,
                  "s": 13016088e5
                },
                false,
                false,
                {
                  "e": 14147064e5,
                  "s": 13959576e5
                }
              ]
            },
            {
              "name": "Asia/Damascus",
              "rules": [
                {
                  "e": 12254868e5,
                  "s": 120726e7
                },
                {
                  "e": 125685e7,
                  "s": 12381048e5
                },
                {
                  "e": 12882996e5,
                  "s": 12701592e5
                },
                {
                  "e": 13197492e5,
                  "s": 13016088e5
                },
                {
                  "e": 13511988e5,
                  "s": 13330584e5
                },
                {
                  "e": 13826484e5,
                  "s": 1364508e6
                },
                {
                  "e": 14147028e5,
                  "s": 13959576e5
                }
              ]
            },
            {
              "name": "Asia/Dubai",
              "rules": [
                false,
                false,
                false,
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Gaza",
              "rules": [
                {
                  "e": 12199572e5,
                  "s": 12066552e5
                },
                {
                  "e": 12520152e5,
                  "s": 12381048e5
                },
                {
                  "e": 1281474e6,
                  "s": 126964086e4
                },
                {
                  "e": 1312146e6,
                  "s": 130160886e4
                },
                {
                  "e": 13481784e5,
                  "s": 13330584e5
                },
                {
                  "e": 13802292e5,
                  "s": 1364508e6
                },
                {
                  "e": 1414098e6,
                  "s": 13959576e5
                }
              ]
            },
            {
              "name": "Asia/Irkutsk",
              "rules": [
                {
                  "e": 12249576e5,
                  "s": 12068136e5
                },
                {
                  "e": 12564072e5,
                  "s": 12382632e5
                },
                {
                  "e": 12884616e5,
                  "s": 12697128e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Jerusalem",
              "rules": [
                {
                  "e": 12231612e5,
                  "s": 12066624e5
                },
                {
                  "e": 1254006e6,
                  "s": 1238112e6
                },
                {
                  "e": 1284246e6,
                  "s": 12695616e5
                },
                {
                  "e": 131751e7,
                  "s": 1301616e6
                },
                {
                  "e": 13483548e5,
                  "s": 13330656e5
                },
                {
                  "e": 13828284e5,
                  "s": 13645152e5
                },
                {
                  "e": 1414278e6,
                  "s": 13959648e5
                }
              ]
            },
            {
              "name": "Asia/Kamchatka",
              "rules": [
                {
                  "e": 12249432e5,
                  "s": 12067992e5
                },
                {
                  "e": 12563928e5,
                  "s": 12382488e5
                },
                {
                  "e": 12884508e5,
                  "s": 12696984e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Krasnoyarsk",
              "rules": [
                {
                  "e": 12249612e5,
                  "s": 12068172e5
                },
                {
                  "e": 12564108e5,
                  "s": 12382668e5
                },
                {
                  "e": 12884652e5,
                  "s": 12697164e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Omsk",
              "rules": [
                {
                  "e": 12249648e5,
                  "s": 12068208e5
                },
                {
                  "e": 12564144e5,
                  "s": 12382704e5
                },
                {
                  "e": 12884688e5,
                  "s": 126972e7
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Vladivostok",
              "rules": [
                {
                  "e": 12249504e5,
                  "s": 12068064e5
                },
                {
                  "e": 12564e8,
                  "s": 1238256e6
                },
                {
                  "e": 12884544e5,
                  "s": 12697056e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Yakutsk",
              "rules": [
                {
                  "e": 1224954e6,
                  "s": 120681e7
                },
                {
                  "e": 12564036e5,
                  "s": 12382596e5
                },
                {
                  "e": 1288458e6,
                  "s": 12697092e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Yekaterinburg",
              "rules": [
                {
                  "e": 12249684e5,
                  "s": 12068244e5
                },
                {
                  "e": 1256418e6,
                  "s": 1238274e6
                },
                {
                  "e": 12884724e5,
                  "s": 12697236e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Asia/Yerevan",
              "rules": [
                {
                  "e": 1224972e6,
                  "s": 1206828e6
                },
                {
                  "e": 12564216e5,
                  "s": 12382776e5
                },
                {
                  "e": 1288476e6,
                  "s": 12697272e5
                },
                {
                  "e": 13199256e5,
                  "s": 13011768e5
                },
                false,
                false,
                false
              ]
            },
            {
              "name": "Australia/Lord_Howe",
              "rules": [
                {
                  "e": 12074076e5,
                  "s": 12231342e5
                },
                {
                  "e": 12388572e5,
                  "s": 12545838e5
                },
                {
                  "e": 12703068e5,
                  "s": 12860334e5
                },
                {
                  "e": 13017564e5,
                  "s": 1317483e6
                },
                {
                  "e": 1333206e6,
                  "s": 13495374e5
                },
                {
                  "e": 13652604e5,
                  "s": 1380987e6
                },
                {
                  "e": 139671e7,
                  "s": 14124366e5
                }
              ]
            },
            {
              "name": "Australia/Perth",
              "rules": [
                {
                  "e": 12068136e5,
                  "s": 12249576e5
                },
                false,
                false,
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Europe/Helsinki",
              "rules": [
                {
                  "e": 12249828e5,
                  "s": 12068388e5
                },
                {
                  "e": 12564324e5,
                  "s": 12382884e5
                },
                {
                  "e": 12884868e5,
                  "s": 1269738e6
                },
                {
                  "e": 13199364e5,
                  "s": 13011876e5
                },
                {
                  "e": 1351386e6,
                  "s": 13326372e5
                },
                {
                  "e": 13828356e5,
                  "s": 13646916e5
                },
                {
                  "e": 14142852e5,
                  "s": 13961412e5
                }
              ]
            },
            {
              "name": "Europe/Minsk",
              "rules": [
                {
                  "e": 12249792e5,
                  "s": 12068352e5
                },
                {
                  "e": 12564288e5,
                  "s": 12382848e5
                },
                {
                  "e": 12884832e5,
                  "s": 12697344e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Europe/Moscow",
              "rules": [
                {
                  "e": 12249756e5,
                  "s": 12068316e5
                },
                {
                  "e": 12564252e5,
                  "s": 12382812e5
                },
                {
                  "e": 12884796e5,
                  "s": 12697308e5
                },
                false,
                false,
                false,
                false
              ]
            },
            {
              "name": "Pacific/Apia",
              "rules": [
                false,
                false,
                false,
                {
                  "e": 13017528e5,
                  "s": 13168728e5
                },
                {
                  "e": 13332024e5,
                  "s": 13489272e5
                },
                {
                  "e": 13652568e5,
                  "s": 13803768e5
                },
                {
                  "e": 13967064e5,
                  "s": 14118264e5
                }
              ]
            },
            {
              "name": "Pacific/Fiji",
              "rules": [
                false,
                false,
                {
                  "e": 12696984e5,
                  "s": 12878424e5
                },
                {
                  "e": 13271544e5,
                  "s": 1319292e6
                },
                {
                  "e": 1358604e6,
                  "s": 13507416e5
                },
                {
                  "e": 139005e7,
                  "s": 1382796e6
                },
                {
                  "e": 14215032e5,
                  "s": 14148504e5
                }
              ]
            },
            {
              "name": "Europe/London",
              "rules": [
                {
                  "e": 12249828e5,
                  "s": 12068388e5
                },
                {
                  "e": 12564324e5,
                  "s": 12382884e5
                },
                {
                  "e": 12884868e5,
                  "s": 1269738e6
                },
                {
                  "e": 13199364e5,
                  "s": 13011876e5
                },
                {
                  "e": 1351386e6,
                  "s": 13326372e5
                },
                {
                  "e": 13828356e5,
                  "s": 13646916e5
                },
                {
                  "e": 14142852e5,
                  "s": 13961412e5
                }
              ]
            }
          ]
        };
        if (typeof module4 !== "undefined" && typeof module4.exports !== "undefined") {
          module4.exports = jstz2;
        } else if (typeof define !== "undefined" && define !== null && define.amd != null) {
          define([], function() {
            return jstz2;
          });
        } else {
          if (typeof root === "undefined") {
            window.jstz = jstz2;
          } else {
            root.jstz = jstz2;
          }
        }
      })();
    }
  });

  // ../../node_modules/jstz/index.js
  var require_jstz2 = __commonJS({
    "../../node_modules/jstz/index.js"(exports2, module4) {
      module4.exports = require_jstz();
    }
  });

  // ../../node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js
  var require_activestorage = __commonJS({
    "../../node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js"(exports2, module4) {
      (function(global2, factory) {
        typeof exports2 === "object" && typeof module4 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ActiveStorage = {}));
      })(exports2, function(exports3) {
        "use strict";
        var sparkMd5 = {
          exports: {}
        };
        (function(module5, exports4) {
          (function(factory) {
            {
              module5.exports = factory();
            }
          })(function(undefined$1) {
            var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            function md5cycle(x2, k2) {
              var a4 = x2[0], b2 = x2[1], c6 = x2[2], d3 = x2[3];
              a4 += (b2 & c6 | ~b2 & d3) + k2[0] - 680876936 | 0;
              a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
              d3 += (a4 & b2 | ~a4 & c6) + k2[1] - 389564586 | 0;
              d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
              c6 += (d3 & a4 | ~d3 & b2) + k2[2] + 606105819 | 0;
              c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
              b2 += (c6 & d3 | ~c6 & a4) + k2[3] - 1044525330 | 0;
              b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
              a4 += (b2 & c6 | ~b2 & d3) + k2[4] - 176418897 | 0;
              a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
              d3 += (a4 & b2 | ~a4 & c6) + k2[5] + 1200080426 | 0;
              d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
              c6 += (d3 & a4 | ~d3 & b2) + k2[6] - 1473231341 | 0;
              c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
              b2 += (c6 & d3 | ~c6 & a4) + k2[7] - 45705983 | 0;
              b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
              a4 += (b2 & c6 | ~b2 & d3) + k2[8] + 1770035416 | 0;
              a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
              d3 += (a4 & b2 | ~a4 & c6) + k2[9] - 1958414417 | 0;
              d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
              c6 += (d3 & a4 | ~d3 & b2) + k2[10] - 42063 | 0;
              c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
              b2 += (c6 & d3 | ~c6 & a4) + k2[11] - 1990404162 | 0;
              b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
              a4 += (b2 & c6 | ~b2 & d3) + k2[12] + 1804603682 | 0;
              a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
              d3 += (a4 & b2 | ~a4 & c6) + k2[13] - 40341101 | 0;
              d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
              c6 += (d3 & a4 | ~d3 & b2) + k2[14] - 1502002290 | 0;
              c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
              b2 += (c6 & d3 | ~c6 & a4) + k2[15] + 1236535329 | 0;
              b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
              a4 += (b2 & d3 | c6 & ~d3) + k2[1] - 165796510 | 0;
              a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
              d3 += (a4 & c6 | b2 & ~c6) + k2[6] - 1069501632 | 0;
              d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
              c6 += (d3 & b2 | a4 & ~b2) + k2[11] + 643717713 | 0;
              c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
              b2 += (c6 & a4 | d3 & ~a4) + k2[0] - 373897302 | 0;
              b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
              a4 += (b2 & d3 | c6 & ~d3) + k2[5] - 701558691 | 0;
              a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
              d3 += (a4 & c6 | b2 & ~c6) + k2[10] + 38016083 | 0;
              d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
              c6 += (d3 & b2 | a4 & ~b2) + k2[15] - 660478335 | 0;
              c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
              b2 += (c6 & a4 | d3 & ~a4) + k2[4] - 405537848 | 0;
              b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
              a4 += (b2 & d3 | c6 & ~d3) + k2[9] + 568446438 | 0;
              a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
              d3 += (a4 & c6 | b2 & ~c6) + k2[14] - 1019803690 | 0;
              d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
              c6 += (d3 & b2 | a4 & ~b2) + k2[3] - 187363961 | 0;
              c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
              b2 += (c6 & a4 | d3 & ~a4) + k2[8] + 1163531501 | 0;
              b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
              a4 += (b2 & d3 | c6 & ~d3) + k2[13] - 1444681467 | 0;
              a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
              d3 += (a4 & c6 | b2 & ~c6) + k2[2] - 51403784 | 0;
              d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
              c6 += (d3 & b2 | a4 & ~b2) + k2[7] + 1735328473 | 0;
              c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
              b2 += (c6 & a4 | d3 & ~a4) + k2[12] - 1926607734 | 0;
              b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
              a4 += (b2 ^ c6 ^ d3) + k2[5] - 378558 | 0;
              a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
              d3 += (a4 ^ b2 ^ c6) + k2[8] - 2022574463 | 0;
              d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
              c6 += (d3 ^ a4 ^ b2) + k2[11] + 1839030562 | 0;
              c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
              b2 += (c6 ^ d3 ^ a4) + k2[14] - 35309556 | 0;
              b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
              a4 += (b2 ^ c6 ^ d3) + k2[1] - 1530992060 | 0;
              a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
              d3 += (a4 ^ b2 ^ c6) + k2[4] + 1272893353 | 0;
              d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
              c6 += (d3 ^ a4 ^ b2) + k2[7] - 155497632 | 0;
              c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
              b2 += (c6 ^ d3 ^ a4) + k2[10] - 1094730640 | 0;
              b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
              a4 += (b2 ^ c6 ^ d3) + k2[13] + 681279174 | 0;
              a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
              d3 += (a4 ^ b2 ^ c6) + k2[0] - 358537222 | 0;
              d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
              c6 += (d3 ^ a4 ^ b2) + k2[3] - 722521979 | 0;
              c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
              b2 += (c6 ^ d3 ^ a4) + k2[6] + 76029189 | 0;
              b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
              a4 += (b2 ^ c6 ^ d3) + k2[9] - 640364487 | 0;
              a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
              d3 += (a4 ^ b2 ^ c6) + k2[12] - 421815835 | 0;
              d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
              c6 += (d3 ^ a4 ^ b2) + k2[15] + 530742520 | 0;
              c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
              b2 += (c6 ^ d3 ^ a4) + k2[2] - 995338651 | 0;
              b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
              a4 += (c6 ^ (b2 | ~d3)) + k2[0] - 198630844 | 0;
              a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
              d3 += (b2 ^ (a4 | ~c6)) + k2[7] + 1126891415 | 0;
              d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
              c6 += (a4 ^ (d3 | ~b2)) + k2[14] - 1416354905 | 0;
              c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
              b2 += (d3 ^ (c6 | ~a4)) + k2[5] - 57434055 | 0;
              b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
              a4 += (c6 ^ (b2 | ~d3)) + k2[12] + 1700485571 | 0;
              a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
              d3 += (b2 ^ (a4 | ~c6)) + k2[3] - 1894986606 | 0;
              d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
              c6 += (a4 ^ (d3 | ~b2)) + k2[10] - 1051523 | 0;
              c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
              b2 += (d3 ^ (c6 | ~a4)) + k2[1] - 2054922799 | 0;
              b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
              a4 += (c6 ^ (b2 | ~d3)) + k2[8] + 1873313359 | 0;
              a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
              d3 += (b2 ^ (a4 | ~c6)) + k2[15] - 30611744 | 0;
              d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
              c6 += (a4 ^ (d3 | ~b2)) + k2[6] - 1560198380 | 0;
              c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
              b2 += (d3 ^ (c6 | ~a4)) + k2[13] + 1309151649 | 0;
              b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
              a4 += (c6 ^ (b2 | ~d3)) + k2[4] - 145523070 | 0;
              a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
              d3 += (b2 ^ (a4 | ~c6)) + k2[11] - 1120210379 | 0;
              d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
              c6 += (a4 ^ (d3 | ~b2)) + k2[2] + 718787259 | 0;
              c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
              b2 += (d3 ^ (c6 | ~a4)) + k2[9] - 343485551 | 0;
              b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
              x2[0] = a4 + x2[0] | 0;
              x2[1] = b2 + x2[1] | 0;
              x2[2] = c6 + x2[2] | 0;
              x2[3] = d3 + x2[3] | 0;
            }
            function md5blk(s8) {
              var md5blks = [], i6;
              for (i6 = 0; i6 < 64; i6 += 4) {
                md5blks[i6 >> 2] = s8.charCodeAt(i6) + (s8.charCodeAt(i6 + 1) << 8) + (s8.charCodeAt(i6 + 2) << 16) + (s8.charCodeAt(i6 + 3) << 24);
              }
              return md5blks;
            }
            function md5blk_array(a4) {
              var md5blks = [], i6;
              for (i6 = 0; i6 < 64; i6 += 4) {
                md5blks[i6 >> 2] = a4[i6] + (a4[i6 + 1] << 8) + (a4[i6 + 2] << 16) + (a4[i6 + 3] << 24);
              }
              return md5blks;
            }
            function md51(s8) {
              var n9 = s8.length, state = [1732584193, -271733879, -1732584194, 271733878], i6, length, tail, tmp, lo, hi;
              for (i6 = 64; i6 <= n9; i6 += 64) {
                md5cycle(state, md5blk(s8.substring(i6 - 64, i6)));
              }
              s8 = s8.substring(i6 - 64);
              length = s8.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i6 = 0; i6 < length; i6 += 1) {
                tail[i6 >> 2] |= s8.charCodeAt(i6) << (i6 % 4 << 3);
              }
              tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
              if (i6 > 55) {
                md5cycle(state, tail);
                for (i6 = 0; i6 < 16; i6 += 1) {
                  tail[i6] = 0;
                }
              }
              tmp = n9 * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function md51_array(a4) {
              var n9 = a4.length, state = [1732584193, -271733879, -1732584194, 271733878], i6, length, tail, tmp, lo, hi;
              for (i6 = 64; i6 <= n9; i6 += 64) {
                md5cycle(state, md5blk_array(a4.subarray(i6 - 64, i6)));
              }
              a4 = i6 - 64 < n9 ? a4.subarray(i6 - 64) : new Uint8Array(0);
              length = a4.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i6 = 0; i6 < length; i6 += 1) {
                tail[i6 >> 2] |= a4[i6] << (i6 % 4 << 3);
              }
              tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
              if (i6 > 55) {
                md5cycle(state, tail);
                for (i6 = 0; i6 < 16; i6 += 1) {
                  tail[i6] = 0;
                }
              }
              tmp = n9 * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function rhex(n9) {
              var s8 = "", j;
              for (j = 0; j < 4; j += 1) {
                s8 += hex_chr[n9 >> j * 8 + 4 & 15] + hex_chr[n9 >> j * 8 & 15];
              }
              return s8;
            }
            function hex(x2) {
              var i6;
              for (i6 = 0; i6 < x2.length; i6 += 1) {
                x2[i6] = rhex(x2[i6]);
              }
              return x2.join("");
            }
            if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
              ;
            if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
              (function() {
                function clamp(val, length) {
                  val = val | 0 || 0;
                  if (val < 0) {
                    return Math.max(val + length, 0);
                  }
                  return Math.min(val, length);
                }
                ArrayBuffer.prototype.slice = function(from, to) {
                  var length = this.byteLength, begin = clamp(from, length), end2 = length, num, target, targetArray, sourceArray;
                  if (to !== undefined$1) {
                    end2 = clamp(to, length);
                  }
                  if (begin > end2) {
                    return new ArrayBuffer(0);
                  }
                  num = end2 - begin;
                  target = new ArrayBuffer(num);
                  targetArray = new Uint8Array(target);
                  sourceArray = new Uint8Array(this, begin, num);
                  targetArray.set(sourceArray);
                  return target;
                };
              })();
            }
            function toUtf8(str) {
              if (/[\u0080-\uFFFF]/.test(str)) {
                str = unescape(encodeURIComponent(str));
              }
              return str;
            }
            function utf8Str2ArrayBuffer(str, returnUInt8Array) {
              var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i6;
              for (i6 = 0; i6 < length; i6 += 1) {
                arr[i6] = str.charCodeAt(i6);
              }
              return returnUInt8Array ? arr : buff;
            }
            function arrayBuffer2Utf8Str(buff) {
              return String.fromCharCode.apply(null, new Uint8Array(buff));
            }
            function concatenateArrayBuffers(first, second, returnUInt8Array) {
              var result = new Uint8Array(first.byteLength + second.byteLength);
              result.set(new Uint8Array(first));
              result.set(new Uint8Array(second), first.byteLength);
              return returnUInt8Array ? result : result.buffer;
            }
            function hexToBinaryString(hex2) {
              var bytes = [], length = hex2.length, x2;
              for (x2 = 0; x2 < length - 1; x2 += 2) {
                bytes.push(parseInt(hex2.substr(x2, 2), 16));
              }
              return String.fromCharCode.apply(String, bytes);
            }
            function SparkMD52() {
              this.reset();
            }
            SparkMD52.prototype.append = function(str) {
              this.appendBinary(toUtf8(str));
              return this;
            };
            SparkMD52.prototype.appendBinary = function(contents) {
              this._buff += contents;
              this._length += contents.length;
              var length = this._buff.length, i6;
              for (i6 = 64; i6 <= length; i6 += 64) {
                md5cycle(this._hash, md5blk(this._buff.substring(i6 - 64, i6)));
              }
              this._buff = this._buff.substring(i6 - 64);
              return this;
            };
            SparkMD52.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, i6, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
              for (i6 = 0; i6 < length; i6 += 1) {
                tail[i6 >> 2] |= buff.charCodeAt(i6) << (i6 % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.prototype.reset = function() {
              this._buff = "";
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.prototype.getState = function() {
              return {
                buff: this._buff,
                length: this._length,
                hash: this._hash.slice()
              };
            };
            SparkMD52.prototype.setState = function(state) {
              this._buff = state.buff;
              this._length = state.length;
              this._hash = state.hash;
              return this;
            };
            SparkMD52.prototype.destroy = function() {
              delete this._hash;
              delete this._buff;
              delete this._length;
            };
            SparkMD52.prototype._finish = function(tail, length) {
              var i6 = length, tmp, lo, hi;
              tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
              if (i6 > 55) {
                md5cycle(this._hash, tail);
                for (i6 = 0; i6 < 16; i6 += 1) {
                  tail[i6] = 0;
                }
              }
              tmp = this._length * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(this._hash, tail);
            };
            SparkMD52.hash = function(str, raw) {
              return SparkMD52.hashBinary(toUtf8(str), raw);
            };
            SparkMD52.hashBinary = function(content, raw) {
              var hash3 = md51(content), ret = hex(hash3);
              return raw ? hexToBinaryString(ret) : ret;
            };
            SparkMD52.ArrayBuffer = function() {
              this.reset();
            };
            SparkMD52.ArrayBuffer.prototype.append = function(arr) {
              var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i6;
              this._length += arr.byteLength;
              for (i6 = 64; i6 <= length; i6 += 64) {
                md5cycle(this._hash, md5blk_array(buff.subarray(i6 - 64, i6)));
              }
              this._buff = i6 - 64 < length ? new Uint8Array(buff.buffer.slice(i6 - 64)) : new Uint8Array(0);
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i6, ret;
              for (i6 = 0; i6 < length; i6 += 1) {
                tail[i6 >> 2] |= buff[i6] << (i6 % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.ArrayBuffer.prototype.reset = function() {
              this._buff = new Uint8Array(0);
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.getState = function() {
              var state = SparkMD52.prototype.getState.call(this);
              state.buff = arrayBuffer2Utf8Str(state.buff);
              return state;
            };
            SparkMD52.ArrayBuffer.prototype.setState = function(state) {
              state.buff = utf8Str2ArrayBuffer(state.buff, true);
              return SparkMD52.prototype.setState.call(this, state);
            };
            SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
            SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
            SparkMD52.ArrayBuffer.hash = function(arr, raw) {
              var hash3 = md51_array(new Uint8Array(arr)), ret = hex(hash3);
              return raw ? hexToBinaryString(ret) : ret;
            };
            return SparkMD52;
          });
        })(sparkMd5);
        var SparkMD5 = sparkMd5.exports;
        const fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
        class FileChecksum {
          static create(file, callback) {
            const instance = new FileChecksum(file);
            instance.create(callback);
          }
          constructor(file) {
            this.file = file;
            this.chunkSize = 2097152;
            this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
            this.chunkIndex = 0;
          }
          create(callback) {
            this.callback = callback;
            this.md5Buffer = new SparkMD5.ArrayBuffer();
            this.fileReader = new FileReader();
            this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
            this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
            this.readNextChunk();
          }
          fileReaderDidLoad(event) {
            this.md5Buffer.append(event.target.result);
            if (!this.readNextChunk()) {
              const binaryDigest = this.md5Buffer.end(true);
              const base64digest = btoa(binaryDigest);
              this.callback(null, base64digest);
            }
          }
          fileReaderDidError(event) {
            this.callback(`Error reading ${this.file.name}`);
          }
          readNextChunk() {
            if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
              const start4 = this.chunkIndex * this.chunkSize;
              const end2 = Math.min(start4 + this.chunkSize, this.file.size);
              const bytes = fileSlice.call(this.file, start4, end2);
              this.fileReader.readAsArrayBuffer(bytes);
              this.chunkIndex++;
              return true;
            } else {
              return false;
            }
          }
        }
        function getMetaValue(name) {
          const element = findElement(document.head, `meta[name="${name}"]`);
          if (element) {
            return element.getAttribute("content");
          }
        }
        function findElements(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          const elements2 = root.querySelectorAll(selector);
          return toArray(elements2);
        }
        function findElement(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          return root.querySelector(selector);
        }
        function dispatchEvent2(element, type, eventInit = {}) {
          const { disabled } = element;
          const { bubbles, cancelable, detail } = eventInit;
          const event = document.createEvent("Event");
          event.initEvent(type, bubbles || true, cancelable || true);
          event.detail = detail || {};
          try {
            element.disabled = false;
            element.dispatchEvent(event);
          } finally {
            element.disabled = disabled;
          }
          return event;
        }
        function toArray(value) {
          if (Array.isArray(value)) {
            return value;
          } else if (Array.from) {
            return Array.from(value);
          } else {
            return [].slice.call(value);
          }
        }
        class BlobRecord {
          constructor(file, checksum, url) {
            this.file = file;
            this.attributes = {
              filename: file.name,
              content_type: file.type || "application/octet-stream",
              byte_size: file.size,
              checksum
            };
            this.xhr = new XMLHttpRequest();
            this.xhr.open("POST", url, true);
            this.xhr.responseType = "json";
            this.xhr.setRequestHeader("Content-Type", "application/json");
            this.xhr.setRequestHeader("Accept", "application/json");
            this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            const csrfToken = getMetaValue("csrf-token");
            if (csrfToken != void 0) {
              this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          get status() {
            return this.xhr.status;
          }
          get response() {
            const { responseType, response } = this.xhr;
            if (responseType == "json") {
              return response;
            } else {
              return JSON.parse(response);
            }
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(JSON.stringify({
              blob: this.attributes
            }));
          }
          requestDidLoad(event) {
            if (this.status >= 200 && this.status < 300) {
              const { response } = this;
              const { direct_upload } = response;
              delete response.direct_upload;
              this.attributes = response;
              this.directUploadData = direct_upload;
              this.callback(null, this.toJSON());
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
          }
          toJSON() {
            const result = {};
            for (const key in this.attributes) {
              result[key] = this.attributes[key];
            }
            return result;
          }
        }
        class BlobUpload {
          constructor(blob) {
            this.blob = blob;
            this.file = blob.file;
            const { url, headers } = blob.directUploadData;
            this.xhr = new XMLHttpRequest();
            this.xhr.open("PUT", url, true);
            this.xhr.responseType = "text";
            for (const key in headers) {
              this.xhr.setRequestHeader(key, headers[key]);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(this.file.slice());
          }
          requestDidLoad(event) {
            const { status, response } = this.xhr;
            if (status >= 200 && status < 300) {
              this.callback(null, response);
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
          }
        }
        let id = 0;
        class DirectUpload {
          constructor(file, url, delegate) {
            this.id = ++id;
            this.file = file;
            this.url = url;
            this.delegate = delegate;
          }
          create(callback) {
            FileChecksum.create(this.file, (error2, checksum) => {
              if (error2) {
                callback(error2);
                return;
              }
              const blob = new BlobRecord(this.file, checksum, this.url);
              notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
              blob.create((error3) => {
                if (error3) {
                  callback(error3);
                } else {
                  const upload = new BlobUpload(blob);
                  notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                  upload.create((error4) => {
                    if (error4) {
                      callback(error4);
                    } else {
                      callback(null, blob.toJSON());
                    }
                  });
                }
              });
            });
          }
        }
        function notify(object, methodName, ...messages) {
          if (object && typeof object[methodName] == "function") {
            return object[methodName](...messages);
          }
        }
        class DirectUploadController {
          constructor(input, file) {
            this.input = input;
            this.file = file;
            this.directUpload = new DirectUpload(this.file, this.url, this);
            this.dispatch("initialize");
          }
          start(callback) {
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = this.input.name;
            this.input.insertAdjacentElement("beforebegin", hiddenInput);
            this.dispatch("start");
            this.directUpload.create((error2, attributes) => {
              if (error2) {
                hiddenInput.parentNode.removeChild(hiddenInput);
                this.dispatchError(error2);
              } else {
                hiddenInput.value = attributes.signed_id;
              }
              this.dispatch("end");
              callback(error2);
            });
          }
          uploadRequestDidProgress(event) {
            const progress = event.loaded / event.total * 100;
            if (progress) {
              this.dispatch("progress", {
                progress
              });
            }
          }
          get url() {
            return this.input.getAttribute("data-direct-upload-url");
          }
          dispatch(name, detail = {}) {
            detail.file = this.file;
            detail.id = this.directUpload.id;
            return dispatchEvent2(this.input, `direct-upload:${name}`, {
              detail
            });
          }
          dispatchError(error2) {
            const event = this.dispatch("error", {
              error: error2
            });
            if (!event.defaultPrevented) {
              alert(error2);
            }
          }
          directUploadWillCreateBlobWithXHR(xhr) {
            this.dispatch("before-blob-request", {
              xhr
            });
          }
          directUploadWillStoreFileWithXHR(xhr) {
            this.dispatch("before-storage-request", {
              xhr
            });
            xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
          }
        }
        const inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
        class DirectUploadsController {
          constructor(form) {
            this.form = form;
            this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
          }
          start(callback) {
            const controllers = this.createDirectUploadControllers();
            const startNextController = () => {
              const controller = controllers.shift();
              if (controller) {
                controller.start((error2) => {
                  if (error2) {
                    callback(error2);
                    this.dispatch("end");
                  } else {
                    startNextController();
                  }
                });
              } else {
                callback();
                this.dispatch("end");
              }
            };
            this.dispatch("start");
            startNextController();
          }
          createDirectUploadControllers() {
            const controllers = [];
            this.inputs.forEach((input) => {
              toArray(input.files).forEach((file) => {
                const controller = new DirectUploadController(input, file);
                controllers.push(controller);
              });
            });
            return controllers;
          }
          dispatch(name, detail = {}) {
            return dispatchEvent2(this.form, `direct-uploads:${name}`, {
              detail
            });
          }
        }
        const processingAttribute = "data-direct-uploads-processing";
        const submitButtonsByForm = /* @__PURE__ */ new WeakMap();
        let started = false;
        function start3() {
          if (!started) {
            started = true;
            document.addEventListener("click", didClick, true);
            document.addEventListener("submit", didSubmitForm, true);
            document.addEventListener("ajax:before", didSubmitRemoteElement);
          }
        }
        function didClick(event) {
          const { target } = event;
          if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
            submitButtonsByForm.set(target.form, target);
          }
        }
        function didSubmitForm(event) {
          handleFormSubmissionEvent(event);
        }
        function didSubmitRemoteElement(event) {
          if (event.target.tagName == "FORM") {
            handleFormSubmissionEvent(event);
          }
        }
        function handleFormSubmissionEvent(event) {
          const form = event.target;
          if (form.hasAttribute(processingAttribute)) {
            event.preventDefault();
            return;
          }
          const controller = new DirectUploadsController(form);
          const { inputs } = controller;
          if (inputs.length) {
            event.preventDefault();
            form.setAttribute(processingAttribute, "");
            inputs.forEach(disable);
            controller.start((error2) => {
              form.removeAttribute(processingAttribute);
              if (error2) {
                inputs.forEach(enable);
              } else {
                submitForm(form);
              }
            });
          }
        }
        function submitForm(form) {
          let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
          if (button) {
            const { disabled } = button;
            button.disabled = false;
            button.focus();
            button.click();
            button.disabled = disabled;
          } else {
            button = document.createElement("input");
            button.type = "submit";
            button.style.display = "none";
            form.appendChild(button);
            button.click();
            form.removeChild(button);
          }
          submitButtonsByForm.delete(form);
        }
        function disable(input) {
          input.disabled = true;
        }
        function enable(input) {
          input.disabled = false;
        }
        function autostart() {
          if (window.ActiveStorage) {
            start3();
          }
        }
        setTimeout(autostart, 1);
        exports3.DirectUpload = DirectUpload;
        exports3.start = start3;
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
      });
    }
  });

  // ../../node_modules/local-time/app/assets/javascripts/local-time.js
  var require_local_time = __commonJS({
    "../../node_modules/local-time/app/assets/javascripts/local-time.js"(exports2, module4) {
      (function() {
        var t5 = this;
        (function() {
          (function() {
            var t6 = [].slice;
            this.LocalTime = { config: {}, run: function() {
              return this.getController().processElements();
            }, process: function() {
              var e13, n9, r7, a4;
              for (n9 = 1 <= arguments.length ? t6.call(arguments, 0) : [], r7 = 0, a4 = n9.length; r7 < a4; r7++)
                e13 = n9[r7], this.getController().processElement(e13);
              return n9.length;
            }, getController: function() {
              return null != this.controller ? this.controller : this.controller = new e12.Controller();
            } };
          }).call(this);
        }).call(t5);
        var e12 = t5.LocalTime;
        (function() {
          (function() {
            e12.config.i18n = { en: { date: { dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], yesterday: "yesterday", today: "today", tomorrow: "tomorrow", on: "on {date}", formats: { "default": "%b %e, %Y", thisYear: "%b %e" } }, time: { am: "am", pm: "pm", singular: "a {time}", singularAn: "an {time}", elapsed: "{time} ago", second: "second", seconds: "seconds", minute: "minute", minutes: "minutes", hour: "hour", hours: "hours", formats: { "default": "%l:%M%P" } }, datetime: { at: "{date} at {time}", formats: { "default": "%B %e, %Y at %l:%M%P %Z" } } } };
          }).call(this), function() {
            e12.config.locale = "en", e12.config.defaultLocale = "en";
          }.call(this), function() {
            e12.config.timerInterval = 6e4;
          }.call(this), function() {
            var t6, n9, r7;
            r7 = !isNaN(Date.parse("2011-01-01T12:00:00-05:00")), e12.parseDate = function(t7) {
              return t7 = t7.toString(), r7 || (t7 = n9(t7)), new Date(Date.parse(t7));
            }, t6 = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(Z|[-+]?[\d:]+)$/, n9 = function(e13) {
              var n10, r8, a4, i6, o11, s8, u4, c6, l9;
              if (a4 = e13.match(t6))
                return a4[0], c6 = a4[1], o11 = a4[2], n10 = a4[3], r8 = a4[4], i6 = a4[5], u4 = a4[6], l9 = a4[7], "Z" !== l9 && (s8 = l9.replace(":", "")), c6 + "/" + o11 + "/" + n10 + " " + r8 + ":" + i6 + ":" + u4 + " GMT" + [s8];
            };
          }.call(this), function() {
            e12.elementMatchesSelector = function() {
              var t6, e13, n9, r7, a4, i6;
              return t6 = document.documentElement, e13 = null != (n9 = null != (r7 = null != (a4 = null != (i6 = t6.matches) ? i6 : t6.matchesSelector) ? a4 : t6.webkitMatchesSelector) ? r7 : t6.mozMatchesSelector) ? n9 : t6.msMatchesSelector, function(t7, n10) {
                if ((null != t7 ? t7.nodeType : void 0) === Node.ELEMENT_NODE)
                  return e13.call(t7, n10);
              };
            }();
          }.call(this), function() {
            var t6, n9, r7;
            t6 = e12.config, r7 = t6.i18n, e12.getI18nValue = function(a4, i6) {
              var o11, s8;
              return null == a4 && (a4 = ""), o11 = (null != i6 ? i6 : { locale: t6.locale }).locale, s8 = n9(r7[o11], a4), null != s8 ? s8 : o11 !== t6.defaultLocale ? e12.getI18nValue(a4, { locale: t6.defaultLocale }) : void 0;
            }, e12.translate = function(t7, n10, r8) {
              var a4, i6, o11;
              null == n10 && (n10 = {}), o11 = e12.getI18nValue(t7, r8);
              for (a4 in n10)
                i6 = n10[a4], o11 = o11.replace("{" + a4 + "}", i6);
              return o11;
            }, n9 = function(t7, e13) {
              var n10, r8, a4, i6, o11;
              for (o11 = t7, i6 = e13.split("."), n10 = 0, a4 = i6.length; n10 < a4; n10++) {
                if (r8 = i6[n10], null == o11[r8])
                  return null;
                o11 = o11[r8];
              }
              return o11;
            };
          }.call(this), function() {
            var t6, n9, r7, a4, i6;
            t6 = e12.getI18nValue, i6 = e12.translate, e12.strftime = a4 = function(e13, o11) {
              var s8, u4, c6, l9, d3, h6, f3;
              return u4 = e13.getDay(), s8 = e13.getDate(), d3 = e13.getMonth(), f3 = e13.getFullYear(), c6 = e13.getHours(), l9 = e13.getMinutes(), h6 = e13.getSeconds(), o11.replace(/%(-?)([%aAbBcdeHIlmMpPSwyYZ])/g, function(o12, m3, p3) {
                switch (p3) {
                  case "%":
                    return "%";
                  case "a":
                    return t6("date.abbrDayNames")[u4];
                  case "A":
                    return t6("date.dayNames")[u4];
                  case "b":
                    return t6("date.abbrMonthNames")[d3];
                  case "B":
                    return t6("date.monthNames")[d3];
                  case "c":
                    return e13.toString();
                  case "d":
                    return n9(s8, m3);
                  case "e":
                    return s8;
                  case "H":
                    return n9(c6, m3);
                  case "I":
                    return n9(a4(e13, "%l"), m3);
                  case "l":
                    return 0 === c6 || 12 === c6 ? 12 : (c6 + 12) % 12;
                  case "m":
                    return n9(d3 + 1, m3);
                  case "M":
                    return n9(l9, m3);
                  case "p":
                    return i6("time." + (c6 > 11 ? "pm" : "am")).toUpperCase();
                  case "P":
                    return i6("time." + (c6 > 11 ? "pm" : "am"));
                  case "S":
                    return n9(h6, m3);
                  case "w":
                    return u4;
                  case "y":
                    return n9(f3 % 100, m3);
                  case "Y":
                    return f3;
                  case "Z":
                    return r7(e13);
                }
              });
            }, n9 = function(t7, e13) {
              switch (e13) {
                case "-":
                  return t7;
                default:
                  return ("0" + t7).slice(-2);
              }
            }, r7 = function(t7) {
              var e13, n10, r8, a5, i7;
              return i7 = t7.toString(), (e13 = null != (n10 = i7.match(/\(([\w\s]+)\)$/)) ? n10[1] : void 0) ? /\s/.test(e13) ? e13.match(/\b(\w)/g).join("") : e13 : (e13 = null != (r8 = i7.match(/(\w{3,4})\s\d{4}$/)) ? r8[1] : void 0) ? e13 : (e13 = null != (a5 = i7.match(/(UTC[\+\-]\d+)/)) ? a5[1] : void 0) ? e13 : "";
            };
          }.call(this), function() {
            e12.CalendarDate = function() {
              function t6(t7, e13, n9) {
                this.date = new Date(Date.UTC(t7, e13 - 1)), this.date.setUTCDate(n9), this.year = this.date.getUTCFullYear(), this.month = this.date.getUTCMonth() + 1, this.day = this.date.getUTCDate(), this.value = this.date.getTime();
              }
              return t6.fromDate = function(t7) {
                return new this(t7.getFullYear(), t7.getMonth() + 1, t7.getDate());
              }, t6.today = function() {
                return this.fromDate(new Date());
              }, t6.prototype.equals = function(t7) {
                return (null != t7 ? t7.value : void 0) === this.value;
              }, t6.prototype.is = function(t7) {
                return this.equals(t7);
              }, t6.prototype.isToday = function() {
                return this.is(this.constructor.today());
              }, t6.prototype.occursOnSameYearAs = function(t7) {
                return this.year === (null != t7 ? t7.year : void 0);
              }, t6.prototype.occursThisYear = function() {
                return this.occursOnSameYearAs(this.constructor.today());
              }, t6.prototype.daysSince = function(t7) {
                if (t7)
                  return (this.date - t7.date) / 864e5;
              }, t6.prototype.daysPassed = function() {
                return this.constructor.today().daysSince(this);
              }, t6;
            }();
          }.call(this), function() {
            var t6, n9, r7;
            n9 = e12.strftime, r7 = e12.translate, t6 = e12.getI18nValue, e12.RelativeTime = function() {
              function a4(t7) {
                this.date = t7, this.calendarDate = e12.CalendarDate.fromDate(this.date);
              }
              return a4.prototype.toString = function() {
                var t7, e13;
                return (e13 = this.toTimeElapsedString()) ? r7("time.elapsed", { time: e13 }) : (t7 = this.toWeekdayString()) ? (e13 = this.toTimeString(), r7("datetime.at", { date: t7, time: e13 })) : r7("date.on", { date: this.toDateString() });
              }, a4.prototype.toTimeOrDateString = function() {
                return this.calendarDate.isToday() ? this.toTimeString() : this.toDateString();
              }, a4.prototype.toTimeElapsedString = function() {
                var t7, e13, n10, a5, i6;
                return n10 = new Date().getTime() - this.date.getTime(), a5 = Math.round(n10 / 1e3), e13 = Math.round(a5 / 60), t7 = Math.round(e13 / 60), n10 < 0 ? null : a5 < 10 ? (i6 = r7("time.second"), r7("time.singular", { time: i6 })) : a5 < 45 ? a5 + " " + r7("time.seconds") : a5 < 90 ? (i6 = r7("time.minute"), r7("time.singular", { time: i6 })) : e13 < 45 ? e13 + " " + r7("time.minutes") : e13 < 90 ? (i6 = r7("time.hour"), r7("time.singularAn", { time: i6 })) : t7 < 24 ? t7 + " " + r7("time.hours") : "";
              }, a4.prototype.toWeekdayString = function() {
                switch (this.calendarDate.daysPassed()) {
                  case 0:
                    return r7("date.today");
                  case 1:
                    return r7("date.yesterday");
                  case -1:
                    return r7("date.tomorrow");
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                    return n9(this.date, "%A");
                  default:
                    return "";
                }
              }, a4.prototype.toDateString = function() {
                var e13;
                return e13 = t6(this.calendarDate.occursThisYear() ? "date.formats.thisYear" : "date.formats.default"), n9(this.date, e13);
              }, a4.prototype.toTimeString = function() {
                return n9(this.date, t6("time.formats.default"));
              }, a4;
            }();
          }.call(this), function() {
            var t6, n9 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            };
            t6 = e12.elementMatchesSelector, e12.PageObserver = function() {
              function e13(t7, e14) {
                this.selector = t7, this.callback = e14, this.processInsertion = n9(this.processInsertion, this), this.processMutations = n9(this.processMutations, this);
              }
              return e13.prototype.start = function() {
                if (!this.started)
                  return this.observeWithMutationObserver() || this.observeWithMutationEvent(), this.started = true;
              }, e13.prototype.observeWithMutationObserver = function() {
                var t7;
                if ("undefined" != typeof MutationObserver && null !== MutationObserver)
                  return t7 = new MutationObserver(this.processMutations), t7.observe(document.documentElement, { childList: true, subtree: true }), true;
              }, e13.prototype.observeWithMutationEvent = function() {
                return addEventListener("DOMNodeInserted", this.processInsertion, false), true;
              }, e13.prototype.findSignificantElements = function(e14) {
                var n10;
                return n10 = [], (null != e14 ? e14.nodeType : void 0) === Node.ELEMENT_NODE && (t6(e14, this.selector) && n10.push(e14), n10.push.apply(n10, e14.querySelectorAll(this.selector))), n10;
              }, e13.prototype.processMutations = function(t7) {
                var e14, n10, r7, a4, i6, o11, s8, u4;
                for (e14 = [], n10 = 0, a4 = t7.length; n10 < a4; n10++)
                  switch (o11 = t7[n10], o11.type) {
                    case "childList":
                      for (u4 = o11.addedNodes, r7 = 0, i6 = u4.length; r7 < i6; r7++)
                        s8 = u4[r7], e14.push.apply(e14, this.findSignificantElements(s8));
                  }
                return this.notify(e14);
              }, e13.prototype.processInsertion = function(t7) {
                var e14;
                return e14 = this.findSignificantElements(t7.target), this.notify(e14);
              }, e13.prototype.notify = function(t7) {
                if (null != t7 ? t7.length : void 0)
                  return "function" == typeof this.callback ? this.callback(t7) : void 0;
              }, e13;
            }();
          }.call(this), function() {
            var t6, n9, r7, a4, i6 = function(t7, e13) {
              return function() {
                return t7.apply(e13, arguments);
              };
            };
            r7 = e12.parseDate, a4 = e12.strftime, n9 = e12.getI18nValue, t6 = e12.config, e12.Controller = function() {
              function o11() {
                this.processElements = i6(this.processElements, this), this.pageObserver = new e12.PageObserver(s8, this.processElements);
              }
              var s8, u4, c6;
              return s8 = "time[data-local]:not([data-localized])", o11.prototype.start = function() {
                if (!this.started)
                  return this.processElements(), this.startTimer(), this.pageObserver.start(), this.started = true;
              }, o11.prototype.startTimer = function() {
                var e13;
                if (e13 = t6.timerInterval)
                  return null != this.timer ? this.timer : this.timer = setInterval(this.processElements, e13);
              }, o11.prototype.processElements = function(t7) {
                var e13, n10, r8;
                for (null == t7 && (t7 = document.querySelectorAll(s8)), n10 = 0, r8 = t7.length; n10 < r8; n10++)
                  e13 = t7[n10], this.processElement(e13);
                return t7.length;
              }, o11.prototype.processElement = function(t7) {
                var e13, i7, o12, s9, l9, d3;
                if (i7 = t7.getAttribute("datetime"), o12 = t7.getAttribute("data-format"), s9 = t7.getAttribute("data-local"), l9 = r7(i7), !isNaN(l9))
                  return t7.hasAttribute("title") || (d3 = a4(l9, n9("datetime.formats.default")), t7.setAttribute("title", d3)), t7.textContent = e13 = function() {
                    switch (s9) {
                      case "time":
                        return u4(t7), a4(l9, o12);
                      case "date":
                        return u4(t7), c6(l9).toDateString();
                      case "time-ago":
                        return c6(l9).toString();
                      case "time-or-date":
                        return c6(l9).toTimeOrDateString();
                      case "weekday":
                        return c6(l9).toWeekdayString();
                      case "weekday-or-date":
                        return c6(l9).toWeekdayString() || c6(l9).toDateString();
                    }
                  }(), t7.hasAttribute("aria-label") ? void 0 : t7.setAttribute("aria-label", e13);
              }, u4 = function(t7) {
                return t7.setAttribute("data-localized", "");
              }, c6 = function(t7) {
                return new e12.RelativeTime(t7);
              }, o11;
            }();
          }.call(this), function() {
            var t6, n9, r7, a4;
            a4 = false, t6 = function() {
              return document.attachEvent ? "complete" === document.readyState : "loading" !== document.readyState;
            }, n9 = function(t7) {
              var e13;
              return null != (e13 = "function" == typeof requestAnimationFrame ? requestAnimationFrame(t7) : void 0) ? e13 : setTimeout(t7, 17);
            }, r7 = function() {
              var t7;
              return t7 = e12.getController(), t7.start();
            }, e12.start = function() {
              if (!a4)
                return a4 = true, "undefined" != typeof MutationObserver && null !== MutationObserver || t6() ? r7() : n9(r7);
            }, window.LocalTime === e12 && e12.start();
          }.call(this);
        }).call(this), "object" == typeof module4 && module4.exports ? module4.exports = e12 : "function" == typeof define && define.amd && define(e12);
      }).call(exports2);
    }
  });

  // application.js
  var import_ujs = __toESM(require_rails_ujs());

  // ../../node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  var turbo_es2017_esm_exports = {};
  __export(turbo_es2017_esm_exports, {
    FrameElement: () => FrameElement,
    FrameLoadingStyle: () => FrameLoadingStyle,
    FrameRenderer: () => FrameRenderer,
    PageRenderer: () => PageRenderer,
    PageSnapshot: () => PageSnapshot,
    StreamActions: () => StreamActions,
    StreamElement: () => StreamElement,
    StreamSourceElement: () => StreamSourceElement,
    cache: () => cache,
    clearCache: () => clearCache,
    connectStreamSource: () => connectStreamSource,
    disconnectStreamSource: () => disconnectStreamSource,
    navigator: () => navigator$1,
    registerAdapter: () => registerAdapter,
    renderStreamMessage: () => renderStreamMessage,
    session: () => session,
    setConfirmMethod: () => setConfirmMethod,
    setFormMode: () => setFormMode,
    setProgressBarDelay: () => setProgressBarDelay,
    start: () => start,
    visit: () => visit
  });
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    } else {
      prototype = window.Event.prototype;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class extends HTMLElement {
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new FrameElement.delegateConstructor(this);
    }
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      const { src } = this;
      this.removeAttribute("complete");
      this.src = null;
      this.src = src;
      return this.loaded;
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left2, right2) {
    return expandURL(left2).href == expandURL(right2).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce = getMetaContent("csp-nonce");
      if (cspNonce) {
        createdScriptElement.nonce = cspNonce;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i6) => {
      const value = values[i6] == void 0 ? "" : values[i6];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_2, i6) => {
      if (i6 == 8 || i6 == 13 || i6 == 18 || i6 == 23) {
        return "-";
      } else if (i6 == 14) {
        return "4";
      } else if (i6 == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements2) {
    for (const value of elements2.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements2) {
    return elements2.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements2) {
    for (const element of elements2) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements2) {
    for (const element of elements2) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function getVisitAction(...elements2) {
    const action = getAttribute("data-turbo-action", ...elements2);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate, method, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate;
      this.method = method;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      var _a, _b;
      const { fetchOptions } = this;
      (_b = (_a = this.delegate).prepareHeadersForRequest) === null || _b === void 0 ? void 0 : _b.call(_a, this.headers, this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error2) {
        if (error2.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error2)) {
            this.delegate.requestErrored(this, error2);
          }
          throw error2;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isIdempotent ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isIdempotent() {
      return this.method == FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class {
    constructor(delegate, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    get method() {
      var _a;
      const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isIdempotent() {
      return this.fetchRequest.isIdempotent;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareHeadersForRequest(headers, request) {
      if (!request.isIdempotent) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    requestMustRedirect(request) {
      return !request.isIdempotent && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isIdempotent || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
    for (const element of document.getElementsByName(target)) {
      if (element instanceof HTMLIFrameElement)
        return false;
    }
    return true;
  }
  var View = class {
    constructor(delegate, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x: x2, y: y2 }) {
      this.scrollRoot.scrollTo(x2, y2);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options2 = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options2);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    invalidate() {
      this.element.innerHTML = "";
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkClickObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      if (target instanceof Element) {
        return target.closest("a[href]:not([target^=_]):not([download])");
      }
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    for (const element of document.getElementsByName(anchor.target)) {
      if (element instanceof HTMLIFrameElement)
        return false;
    }
    return true;
  }
  var FormLinkClickObserver = class {
    constructor(delegate, element) {
      this.delegate = delegate;
      this.linkClickObserver = new LinkClickObserver(this, element);
    }
    start() {
      this.linkClickObserver.start();
    }
    stop() {
      this.linkClickObserver.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const action = location2.href;
      const form = document.createElement("form");
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action);
      form.setAttribute("hidden", "");
      const method = link.getAttribute("data-turbo-method");
      if (method)
        form.setAttribute("method", method);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = link.getAttribute("data-turbo-action");
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    constructor(delegate, permanentElementMap) {
      this.delegate = delegate;
      this.permanentElementMap = permanentElementMap;
    }
    static preservingPermanentElements(delegate, permanentElementMap, callback) {
      const bardo = new this(delegate, permanentElementMap);
      bardo.enter();
      callback();
      bardo.leave();
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    preservingPermanentElements(callback) {
      Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate;
    }
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class {
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${ProgressBar.animationDuration}ms ease-out,
          opacity ${ProgressBar.animationDuration / 2}ms ${ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements: elements2 } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements2];
        } else if (elements2.length > 1) {
          return [...result, ...elements2.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class extends Snapshot {
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate, location2, restorationIdentifier, options2 = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options2);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method = getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareHeadersForRequest(headers, request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = new Date().getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot().then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options2) {
      this.navigator.startVisit(location2, (options2 === null || options2 === void 0 ? void 0 : options2.restorationIdentifier) || uuid(), options2);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      dispatch("turbo:reload", { detail: reason });
      if (!this.location)
        return;
      window.location.href = this.location.toString();
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.started = false;
      this.removeStaleElements = (_event) => {
        const staleElements = [...document.querySelectorAll('[data-turbo-cache="false"]')];
        for (const element of staleElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkClickObserver = new LinkClickObserver(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkClickObserver.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkClickObserver.stop();
      this.formSubmitObserver.stop();
    }
    willFollowLinkToLocation(element, location2, event) {
      return this.shouldRedirect(element) && this.frameAllowsVisitingLocation(element, location2, event);
    }
    followedLinkToLocation(element, url) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.followedLinkToLocation(element, url);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    frameAllowsVisitingLocation(target, { href: url }, originalEvent) {
      const event = dispatch("turbo:click", {
        target,
        detail: { url, originalEvent },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate) {
      this.delegate = delegate;
    }
    proposeVisit(location2, options2 = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options2.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options2);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options2 = {}) {
      this.lastVisit = this.currentVisit;
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options2));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.method == FetchMethod.get;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      var _a;
      const anchor = getAnchor(location2);
      const lastLocation = ((_a = this.lastVisit) === null || _a === void 0 ? void 0 : _a.location) || this.view.lastRenderedLocation;
      const currentAnchor = getAnchor(lastLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(lastLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission(formSubmission) {
      const { formElement, submitter } = formSubmission;
      const action = getAttribute("data-turbo-action", submitter, formElement);
      return isAction(action) ? action : "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      this.removeCurrentHeadProvisionalElements();
      this.copyNewHeadProvisionalElements();
      await newStylesheetElements;
    }
    replaceBody() {
      this.preservingPermanentElements(() => {
        this.activateNewBody();
        this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    assignNewBody() {
      this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index = this.keys.indexOf(key);
      if (index > -1)
        this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot() {
      if (this.shouldCacheSnapshot) {
        this.delegate.viewWillCacheSnapshot();
        const { snapshot, lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
    get shouldCacheSnapshot() {
      return this.snapshot.isCacheable;
    }
  };
  var Preloader = class {
    constructor(delegate) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_2) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options2 = {}) {
      const frameElement = options2.frame ? document.getElementById(options2.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options2);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options2) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options2);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options2) {
      const event = this.notifyApplicationBeforeRender(element, options2);
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options2) {
      return dispatch("turbo:before-render", {
        detail: Object.assign({ newBody }, options2),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = element.closest("[data-turbo]");
      const withinFrame = element.closest("turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      const action = link.getAttribute("data-turbo-action");
      return isAction(action) ? action : "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e12) => {
        var _a;
        return (_a = e12.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e12.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e12) => e12.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e12) => {
        var _a;
        return (_a = e12.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e12);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e12) => e12.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e12) => e12.remove());
    },
    replace() {
      this.targetElements.forEach((e12) => e12.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((e12) => e12.replaceChildren(this.templateContent));
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options2) {
    session.visit(location2, options2);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkClickObserver = new LinkClickObserver(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const { body } = parseHTMLDocument(html);
          const newFrameElement = await this.extractForeignFrameElement(body);
          if (newFrameElement) {
            const snapshot = new Snapshot(newFrameElement);
            const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
            if (this.view.renderPromise)
              await this.view.renderPromise;
            this.changeHistory();
            await this.view.render(renderer);
            this.complete = true;
            session.frameRendered(fetchResponse, this.element);
            session.frameLoaded(this.element);
            this.fetchResponseLoaded(fetchResponse);
          } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
            console.warn(`A matching frame for #${this.element.id} was missing from the response, transforming into full-page Visit.`);
            this.visitResponse(fetchResponse.response);
          }
        }
      } catch (error2) {
        console.error(error2);
        this.view.invalidate();
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(_element) {
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return link.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    willFollowLinkToLocation(element, location2, event) {
      return this.shouldInterceptNavigation(element) && this.frameAllowsVisitingLocation(element, location2, event);
    }
    followedLinkToLocation(element, location2) {
      this.navigateFrame(element, location2.href);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareHeadersForRequest(fetchRequest.headers, fetchRequest);
      this.formSubmission.start();
    }
    prepareHeadersForRequest(headers, request) {
      var _a;
      headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      console.error(response);
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      this.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options2) {
      const event = dispatch("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options2),
        cancelable: true
      });
      const { defaultPrevented, detail: { render: render2 } } = event;
      if (this.view.renderer && render2) {
        this.view.renderer.renderElement = render2;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async visit(url) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      this.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      this.frame = frame;
      if (isAction(this.action)) {
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options2 = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier
            };
            if (this.action)
              options2.action = this.action;
            session.visit(frame.src, options2);
          }
        };
      }
    }
    changeHistory() {
      if (this.action && this.frame) {
        const method = getHistoryMethodForAction(this.action);
        session.history.update(method, expandURL(this.frame.src || ""), this.restorationIdentifier);
      }
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url, options2 = {}) => {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options2);
        }
      };
      const event = dispatch("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error2) {
        console.error(error2);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    frameAllowsVisitingLocation(target, { href: url }, originalEvent) {
      const event = dispatch("turbo:click", {
        target,
        detail: { url, originalEvent },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error2) {
        console.error(error2);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c6) => c6.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e12) => [...e12.children]).filter((c6) => !!c6.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c6) => !!c6.id).map((c6) => c6.id);
      return existingChildren.filter((c6) => newChildrenIds.includes(c6.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements2 = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements2.length !== 0) {
        return Array.prototype.slice.call(elements2);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo2;
  start();

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer4 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer4();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m3, x2) {
        return "_" + x2.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, { received: this.dispatchMessageEvent.bind(this) });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const method = submitter && submitter.formMethod || fetchOptions.body && fetchOptions.body.get("_method") || form.getAttribute("method");
        if (!/get/i.test(method)) {
          if (/post/i.test(method)) {
            fetchOptions.body.delete("_method");
          } else {
            fetchOptions.body.set("_method", method);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // ../../node_modules/@rails/actiontext/app/assets/javascripts/actiontext.js
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var activestorage = { exports: {} };
  (function(module4, exports2) {
    (function(global2, factory) {
      factory(exports2);
    })(commonjsGlobal, function(exports3) {
      var sparkMd5 = {
        exports: {}
      };
      (function(module5, exports4) {
        (function(factory) {
          {
            module5.exports = factory();
          }
        })(function(undefined$1) {
          var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
          function md5cycle(x2, k2) {
            var a4 = x2[0], b2 = x2[1], c6 = x2[2], d3 = x2[3];
            a4 += (b2 & c6 | ~b2 & d3) + k2[0] - 680876936 | 0;
            a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
            d3 += (a4 & b2 | ~a4 & c6) + k2[1] - 389564586 | 0;
            d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
            c6 += (d3 & a4 | ~d3 & b2) + k2[2] + 606105819 | 0;
            c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
            b2 += (c6 & d3 | ~c6 & a4) + k2[3] - 1044525330 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
            a4 += (b2 & c6 | ~b2 & d3) + k2[4] - 176418897 | 0;
            a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
            d3 += (a4 & b2 | ~a4 & c6) + k2[5] + 1200080426 | 0;
            d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
            c6 += (d3 & a4 | ~d3 & b2) + k2[6] - 1473231341 | 0;
            c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
            b2 += (c6 & d3 | ~c6 & a4) + k2[7] - 45705983 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
            a4 += (b2 & c6 | ~b2 & d3) + k2[8] + 1770035416 | 0;
            a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
            d3 += (a4 & b2 | ~a4 & c6) + k2[9] - 1958414417 | 0;
            d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
            c6 += (d3 & a4 | ~d3 & b2) + k2[10] - 42063 | 0;
            c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
            b2 += (c6 & d3 | ~c6 & a4) + k2[11] - 1990404162 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
            a4 += (b2 & c6 | ~b2 & d3) + k2[12] + 1804603682 | 0;
            a4 = (a4 << 7 | a4 >>> 25) + b2 | 0;
            d3 += (a4 & b2 | ~a4 & c6) + k2[13] - 40341101 | 0;
            d3 = (d3 << 12 | d3 >>> 20) + a4 | 0;
            c6 += (d3 & a4 | ~d3 & b2) + k2[14] - 1502002290 | 0;
            c6 = (c6 << 17 | c6 >>> 15) + d3 | 0;
            b2 += (c6 & d3 | ~c6 & a4) + k2[15] + 1236535329 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c6 | 0;
            a4 += (b2 & d3 | c6 & ~d3) + k2[1] - 165796510 | 0;
            a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
            d3 += (a4 & c6 | b2 & ~c6) + k2[6] - 1069501632 | 0;
            d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
            c6 += (d3 & b2 | a4 & ~b2) + k2[11] + 643717713 | 0;
            c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
            b2 += (c6 & a4 | d3 & ~a4) + k2[0] - 373897302 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
            a4 += (b2 & d3 | c6 & ~d3) + k2[5] - 701558691 | 0;
            a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
            d3 += (a4 & c6 | b2 & ~c6) + k2[10] + 38016083 | 0;
            d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
            c6 += (d3 & b2 | a4 & ~b2) + k2[15] - 660478335 | 0;
            c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
            b2 += (c6 & a4 | d3 & ~a4) + k2[4] - 405537848 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
            a4 += (b2 & d3 | c6 & ~d3) + k2[9] + 568446438 | 0;
            a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
            d3 += (a4 & c6 | b2 & ~c6) + k2[14] - 1019803690 | 0;
            d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
            c6 += (d3 & b2 | a4 & ~b2) + k2[3] - 187363961 | 0;
            c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
            b2 += (c6 & a4 | d3 & ~a4) + k2[8] + 1163531501 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
            a4 += (b2 & d3 | c6 & ~d3) + k2[13] - 1444681467 | 0;
            a4 = (a4 << 5 | a4 >>> 27) + b2 | 0;
            d3 += (a4 & c6 | b2 & ~c6) + k2[2] - 51403784 | 0;
            d3 = (d3 << 9 | d3 >>> 23) + a4 | 0;
            c6 += (d3 & b2 | a4 & ~b2) + k2[7] + 1735328473 | 0;
            c6 = (c6 << 14 | c6 >>> 18) + d3 | 0;
            b2 += (c6 & a4 | d3 & ~a4) + k2[12] - 1926607734 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c6 | 0;
            a4 += (b2 ^ c6 ^ d3) + k2[5] - 378558 | 0;
            a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
            d3 += (a4 ^ b2 ^ c6) + k2[8] - 2022574463 | 0;
            d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
            c6 += (d3 ^ a4 ^ b2) + k2[11] + 1839030562 | 0;
            c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
            b2 += (c6 ^ d3 ^ a4) + k2[14] - 35309556 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
            a4 += (b2 ^ c6 ^ d3) + k2[1] - 1530992060 | 0;
            a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
            d3 += (a4 ^ b2 ^ c6) + k2[4] + 1272893353 | 0;
            d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
            c6 += (d3 ^ a4 ^ b2) + k2[7] - 155497632 | 0;
            c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
            b2 += (c6 ^ d3 ^ a4) + k2[10] - 1094730640 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
            a4 += (b2 ^ c6 ^ d3) + k2[13] + 681279174 | 0;
            a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
            d3 += (a4 ^ b2 ^ c6) + k2[0] - 358537222 | 0;
            d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
            c6 += (d3 ^ a4 ^ b2) + k2[3] - 722521979 | 0;
            c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
            b2 += (c6 ^ d3 ^ a4) + k2[6] + 76029189 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
            a4 += (b2 ^ c6 ^ d3) + k2[9] - 640364487 | 0;
            a4 = (a4 << 4 | a4 >>> 28) + b2 | 0;
            d3 += (a4 ^ b2 ^ c6) + k2[12] - 421815835 | 0;
            d3 = (d3 << 11 | d3 >>> 21) + a4 | 0;
            c6 += (d3 ^ a4 ^ b2) + k2[15] + 530742520 | 0;
            c6 = (c6 << 16 | c6 >>> 16) + d3 | 0;
            b2 += (c6 ^ d3 ^ a4) + k2[2] - 995338651 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c6 | 0;
            a4 += (c6 ^ (b2 | ~d3)) + k2[0] - 198630844 | 0;
            a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
            d3 += (b2 ^ (a4 | ~c6)) + k2[7] + 1126891415 | 0;
            d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
            c6 += (a4 ^ (d3 | ~b2)) + k2[14] - 1416354905 | 0;
            c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
            b2 += (d3 ^ (c6 | ~a4)) + k2[5] - 57434055 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
            a4 += (c6 ^ (b2 | ~d3)) + k2[12] + 1700485571 | 0;
            a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
            d3 += (b2 ^ (a4 | ~c6)) + k2[3] - 1894986606 | 0;
            d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
            c6 += (a4 ^ (d3 | ~b2)) + k2[10] - 1051523 | 0;
            c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
            b2 += (d3 ^ (c6 | ~a4)) + k2[1] - 2054922799 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
            a4 += (c6 ^ (b2 | ~d3)) + k2[8] + 1873313359 | 0;
            a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
            d3 += (b2 ^ (a4 | ~c6)) + k2[15] - 30611744 | 0;
            d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
            c6 += (a4 ^ (d3 | ~b2)) + k2[6] - 1560198380 | 0;
            c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
            b2 += (d3 ^ (c6 | ~a4)) + k2[13] + 1309151649 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
            a4 += (c6 ^ (b2 | ~d3)) + k2[4] - 145523070 | 0;
            a4 = (a4 << 6 | a4 >>> 26) + b2 | 0;
            d3 += (b2 ^ (a4 | ~c6)) + k2[11] - 1120210379 | 0;
            d3 = (d3 << 10 | d3 >>> 22) + a4 | 0;
            c6 += (a4 ^ (d3 | ~b2)) + k2[2] + 718787259 | 0;
            c6 = (c6 << 15 | c6 >>> 17) + d3 | 0;
            b2 += (d3 ^ (c6 | ~a4)) + k2[9] - 343485551 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c6 | 0;
            x2[0] = a4 + x2[0] | 0;
            x2[1] = b2 + x2[1] | 0;
            x2[2] = c6 + x2[2] | 0;
            x2[3] = d3 + x2[3] | 0;
          }
          function md5blk(s8) {
            var md5blks = [], i6;
            for (i6 = 0; i6 < 64; i6 += 4) {
              md5blks[i6 >> 2] = s8.charCodeAt(i6) + (s8.charCodeAt(i6 + 1) << 8) + (s8.charCodeAt(i6 + 2) << 16) + (s8.charCodeAt(i6 + 3) << 24);
            }
            return md5blks;
          }
          function md5blk_array(a4) {
            var md5blks = [], i6;
            for (i6 = 0; i6 < 64; i6 += 4) {
              md5blks[i6 >> 2] = a4[i6] + (a4[i6 + 1] << 8) + (a4[i6 + 2] << 16) + (a4[i6 + 3] << 24);
            }
            return md5blks;
          }
          function md51(s8) {
            var n9 = s8.length, state = [1732584193, -271733879, -1732584194, 271733878], i6, length, tail, tmp, lo, hi;
            for (i6 = 64; i6 <= n9; i6 += 64) {
              md5cycle(state, md5blk(s8.substring(i6 - 64, i6)));
            }
            s8 = s8.substring(i6 - 64);
            length = s8.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i6 = 0; i6 < length; i6 += 1) {
              tail[i6 >> 2] |= s8.charCodeAt(i6) << (i6 % 4 << 3);
            }
            tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
            if (i6 > 55) {
              md5cycle(state, tail);
              for (i6 = 0; i6 < 16; i6 += 1) {
                tail[i6] = 0;
              }
            }
            tmp = n9 * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi;
            md5cycle(state, tail);
            return state;
          }
          function md51_array(a4) {
            var n9 = a4.length, state = [1732584193, -271733879, -1732584194, 271733878], i6, length, tail, tmp, lo, hi;
            for (i6 = 64; i6 <= n9; i6 += 64) {
              md5cycle(state, md5blk_array(a4.subarray(i6 - 64, i6)));
            }
            a4 = i6 - 64 < n9 ? a4.subarray(i6 - 64) : new Uint8Array(0);
            length = a4.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i6 = 0; i6 < length; i6 += 1) {
              tail[i6 >> 2] |= a4[i6] << (i6 % 4 << 3);
            }
            tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
            if (i6 > 55) {
              md5cycle(state, tail);
              for (i6 = 0; i6 < 16; i6 += 1) {
                tail[i6] = 0;
              }
            }
            tmp = n9 * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi;
            md5cycle(state, tail);
            return state;
          }
          function rhex(n9) {
            var s8 = "", j;
            for (j = 0; j < 4; j += 1) {
              s8 += hex_chr[n9 >> j * 8 + 4 & 15] + hex_chr[n9 >> j * 8 & 15];
            }
            return s8;
          }
          function hex(x2) {
            var i6;
            for (i6 = 0; i6 < x2.length; i6 += 1) {
              x2[i6] = rhex(x2[i6]);
            }
            return x2.join("");
          }
          if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
            ;
          if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
            (function() {
              function clamp(val, length) {
                val = val | 0 || 0;
                if (val < 0) {
                  return Math.max(val + length, 0);
                }
                return Math.min(val, length);
              }
              ArrayBuffer.prototype.slice = function(from, to) {
                var length = this.byteLength, begin = clamp(from, length), end2 = length, num, target, targetArray, sourceArray;
                if (to !== undefined$1) {
                  end2 = clamp(to, length);
                }
                if (begin > end2) {
                  return new ArrayBuffer(0);
                }
                num = end2 - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);
                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);
                return target;
              };
            })();
          }
          function toUtf8(str) {
            if (/[\u0080-\uFFFF]/.test(str)) {
              str = unescape(encodeURIComponent(str));
            }
            return str;
          }
          function utf8Str2ArrayBuffer(str, returnUInt8Array) {
            var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i6;
            for (i6 = 0; i6 < length; i6 += 1) {
              arr[i6] = str.charCodeAt(i6);
            }
            return returnUInt8Array ? arr : buff;
          }
          function arrayBuffer2Utf8Str(buff) {
            return String.fromCharCode.apply(null, new Uint8Array(buff));
          }
          function concatenateArrayBuffers(first, second, returnUInt8Array) {
            var result = new Uint8Array(first.byteLength + second.byteLength);
            result.set(new Uint8Array(first));
            result.set(new Uint8Array(second), first.byteLength);
            return returnUInt8Array ? result : result.buffer;
          }
          function hexToBinaryString(hex2) {
            var bytes = [], length = hex2.length, x2;
            for (x2 = 0; x2 < length - 1; x2 += 2) {
              bytes.push(parseInt(hex2.substr(x2, 2), 16));
            }
            return String.fromCharCode.apply(String, bytes);
          }
          function SparkMD52() {
            this.reset();
          }
          SparkMD52.prototype.append = function(str) {
            this.appendBinary(toUtf8(str));
            return this;
          };
          SparkMD52.prototype.appendBinary = function(contents) {
            this._buff += contents;
            this._length += contents.length;
            var length = this._buff.length, i6;
            for (i6 = 64; i6 <= length; i6 += 64) {
              md5cycle(this._hash, md5blk(this._buff.substring(i6 - 64, i6)));
            }
            this._buff = this._buff.substring(i6 - 64);
            return this;
          };
          SparkMD52.prototype.end = function(raw) {
            var buff = this._buff, length = buff.length, i6, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
            for (i6 = 0; i6 < length; i6 += 1) {
              tail[i6 >> 2] |= buff.charCodeAt(i6) << (i6 % 4 << 3);
            }
            this._finish(tail, length);
            ret = hex(this._hash);
            if (raw) {
              ret = hexToBinaryString(ret);
            }
            this.reset();
            return ret;
          };
          SparkMD52.prototype.reset = function() {
            this._buff = "";
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];
            return this;
          };
          SparkMD52.prototype.getState = function() {
            return {
              buff: this._buff,
              length: this._length,
              hash: this._hash.slice()
            };
          };
          SparkMD52.prototype.setState = function(state) {
            this._buff = state.buff;
            this._length = state.length;
            this._hash = state.hash;
            return this;
          };
          SparkMD52.prototype.destroy = function() {
            delete this._hash;
            delete this._buff;
            delete this._length;
          };
          SparkMD52.prototype._finish = function(tail, length) {
            var i6 = length, tmp, lo, hi;
            tail[i6 >> 2] |= 128 << (i6 % 4 << 3);
            if (i6 > 55) {
              md5cycle(this._hash, tail);
              for (i6 = 0; i6 < 16; i6 += 1) {
                tail[i6] = 0;
              }
            }
            tmp = this._length * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi;
            md5cycle(this._hash, tail);
          };
          SparkMD52.hash = function(str, raw) {
            return SparkMD52.hashBinary(toUtf8(str), raw);
          };
          SparkMD52.hashBinary = function(content, raw) {
            var hash3 = md51(content), ret = hex(hash3);
            return raw ? hexToBinaryString(ret) : ret;
          };
          SparkMD52.ArrayBuffer = function() {
            this.reset();
          };
          SparkMD52.ArrayBuffer.prototype.append = function(arr) {
            var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i6;
            this._length += arr.byteLength;
            for (i6 = 64; i6 <= length; i6 += 64) {
              md5cycle(this._hash, md5blk_array(buff.subarray(i6 - 64, i6)));
            }
            this._buff = i6 - 64 < length ? new Uint8Array(buff.buffer.slice(i6 - 64)) : new Uint8Array(0);
            return this;
          };
          SparkMD52.ArrayBuffer.prototype.end = function(raw) {
            var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i6, ret;
            for (i6 = 0; i6 < length; i6 += 1) {
              tail[i6 >> 2] |= buff[i6] << (i6 % 4 << 3);
            }
            this._finish(tail, length);
            ret = hex(this._hash);
            if (raw) {
              ret = hexToBinaryString(ret);
            }
            this.reset();
            return ret;
          };
          SparkMD52.ArrayBuffer.prototype.reset = function() {
            this._buff = new Uint8Array(0);
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];
            return this;
          };
          SparkMD52.ArrayBuffer.prototype.getState = function() {
            var state = SparkMD52.prototype.getState.call(this);
            state.buff = arrayBuffer2Utf8Str(state.buff);
            return state;
          };
          SparkMD52.ArrayBuffer.prototype.setState = function(state) {
            state.buff = utf8Str2ArrayBuffer(state.buff, true);
            return SparkMD52.prototype.setState.call(this, state);
          };
          SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
          SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
          SparkMD52.ArrayBuffer.hash = function(arr, raw) {
            var hash3 = md51_array(new Uint8Array(arr)), ret = hex(hash3);
            return raw ? hexToBinaryString(ret) : ret;
          };
          return SparkMD52;
        });
      })(sparkMd5);
      var SparkMD5 = sparkMd5.exports;
      const fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
      class FileChecksum {
        static create(file, callback) {
          const instance = new FileChecksum(file);
          instance.create(callback);
        }
        constructor(file) {
          this.file = file;
          this.chunkSize = 2097152;
          this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
          this.chunkIndex = 0;
        }
        create(callback) {
          this.callback = callback;
          this.md5Buffer = new SparkMD5.ArrayBuffer();
          this.fileReader = new FileReader();
          this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
          this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
          this.readNextChunk();
        }
        fileReaderDidLoad(event) {
          this.md5Buffer.append(event.target.result);
          if (!this.readNextChunk()) {
            const binaryDigest = this.md5Buffer.end(true);
            const base64digest = btoa(binaryDigest);
            this.callback(null, base64digest);
          }
        }
        fileReaderDidError(event) {
          this.callback(`Error reading ${this.file.name}`);
        }
        readNextChunk() {
          if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
            const start4 = this.chunkIndex * this.chunkSize;
            const end2 = Math.min(start4 + this.chunkSize, this.file.size);
            const bytes = fileSlice.call(this.file, start4, end2);
            this.fileReader.readAsArrayBuffer(bytes);
            this.chunkIndex++;
            return true;
          } else {
            return false;
          }
        }
      }
      function getMetaValue(name) {
        const element = findElement(document.head, `meta[name="${name}"]`);
        if (element) {
          return element.getAttribute("content");
        }
      }
      function findElements(root, selector) {
        if (typeof root == "string") {
          selector = root;
          root = document;
        }
        const elements2 = root.querySelectorAll(selector);
        return toArray(elements2);
      }
      function findElement(root, selector) {
        if (typeof root == "string") {
          selector = root;
          root = document;
        }
        return root.querySelector(selector);
      }
      function dispatchEvent2(element, type, eventInit = {}) {
        const { disabled } = element;
        const { bubbles, cancelable, detail } = eventInit;
        const event = document.createEvent("Event");
        event.initEvent(type, bubbles || true, cancelable || true);
        event.detail = detail || {};
        try {
          element.disabled = false;
          element.dispatchEvent(event);
        } finally {
          element.disabled = disabled;
        }
        return event;
      }
      function toArray(value) {
        if (Array.isArray(value)) {
          return value;
        } else if (Array.from) {
          return Array.from(value);
        } else {
          return [].slice.call(value);
        }
      }
      class BlobRecord {
        constructor(file, checksum, url) {
          this.file = file;
          this.attributes = {
            filename: file.name,
            content_type: file.type || "application/octet-stream",
            byte_size: file.size,
            checksum
          };
          this.xhr = new XMLHttpRequest();
          this.xhr.open("POST", url, true);
          this.xhr.responseType = "json";
          this.xhr.setRequestHeader("Content-Type", "application/json");
          this.xhr.setRequestHeader("Accept", "application/json");
          this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
          const csrfToken = getMetaValue("csrf-token");
          if (csrfToken != void 0) {
            this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
          }
          this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
          this.xhr.addEventListener("error", (event) => this.requestDidError(event));
        }
        get status() {
          return this.xhr.status;
        }
        get response() {
          const { responseType, response } = this.xhr;
          if (responseType == "json") {
            return response;
          } else {
            return JSON.parse(response);
          }
        }
        create(callback) {
          this.callback = callback;
          this.xhr.send(JSON.stringify({
            blob: this.attributes
          }));
        }
        requestDidLoad(event) {
          if (this.status >= 200 && this.status < 300) {
            const { response } = this;
            const { direct_upload } = response;
            delete response.direct_upload;
            this.attributes = response;
            this.directUploadData = direct_upload;
            this.callback(null, this.toJSON());
          } else {
            this.requestDidError(event);
          }
        }
        requestDidError(event) {
          this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
        }
        toJSON() {
          const result = {};
          for (const key in this.attributes) {
            result[key] = this.attributes[key];
          }
          return result;
        }
      }
      class BlobUpload {
        constructor(blob) {
          this.blob = blob;
          this.file = blob.file;
          const { url, headers } = blob.directUploadData;
          this.xhr = new XMLHttpRequest();
          this.xhr.open("PUT", url, true);
          this.xhr.responseType = "text";
          for (const key in headers) {
            this.xhr.setRequestHeader(key, headers[key]);
          }
          this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
          this.xhr.addEventListener("error", (event) => this.requestDidError(event));
        }
        create(callback) {
          this.callback = callback;
          this.xhr.send(this.file.slice());
        }
        requestDidLoad(event) {
          const { status, response } = this.xhr;
          if (status >= 200 && status < 300) {
            this.callback(null, response);
          } else {
            this.requestDidError(event);
          }
        }
        requestDidError(event) {
          this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
        }
      }
      let id = 0;
      class DirectUpload {
        constructor(file, url, delegate) {
          this.id = ++id;
          this.file = file;
          this.url = url;
          this.delegate = delegate;
        }
        create(callback) {
          FileChecksum.create(this.file, (error2, checksum) => {
            if (error2) {
              callback(error2);
              return;
            }
            const blob = new BlobRecord(this.file, checksum, this.url);
            notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
            blob.create((error3) => {
              if (error3) {
                callback(error3);
              } else {
                const upload = new BlobUpload(blob);
                notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                upload.create((error4) => {
                  if (error4) {
                    callback(error4);
                  } else {
                    callback(null, blob.toJSON());
                  }
                });
              }
            });
          });
        }
      }
      function notify(object, methodName, ...messages) {
        if (object && typeof object[methodName] == "function") {
          return object[methodName](...messages);
        }
      }
      class DirectUploadController {
        constructor(input, file) {
          this.input = input;
          this.file = file;
          this.directUpload = new DirectUpload(this.file, this.url, this);
          this.dispatch("initialize");
        }
        start(callback) {
          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = this.input.name;
          this.input.insertAdjacentElement("beforebegin", hiddenInput);
          this.dispatch("start");
          this.directUpload.create((error2, attributes) => {
            if (error2) {
              hiddenInput.parentNode.removeChild(hiddenInput);
              this.dispatchError(error2);
            } else {
              hiddenInput.value = attributes.signed_id;
            }
            this.dispatch("end");
            callback(error2);
          });
        }
        uploadRequestDidProgress(event) {
          const progress = event.loaded / event.total * 100;
          if (progress) {
            this.dispatch("progress", {
              progress
            });
          }
        }
        get url() {
          return this.input.getAttribute("data-direct-upload-url");
        }
        dispatch(name, detail = {}) {
          detail.file = this.file;
          detail.id = this.directUpload.id;
          return dispatchEvent2(this.input, `direct-upload:${name}`, {
            detail
          });
        }
        dispatchError(error2) {
          const event = this.dispatch("error", {
            error: error2
          });
          if (!event.defaultPrevented) {
            alert(error2);
          }
        }
        directUploadWillCreateBlobWithXHR(xhr) {
          this.dispatch("before-blob-request", {
            xhr
          });
        }
        directUploadWillStoreFileWithXHR(xhr) {
          this.dispatch("before-storage-request", {
            xhr
          });
          xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
        }
      }
      const inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
      class DirectUploadsController {
        constructor(form) {
          this.form = form;
          this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
        }
        start(callback) {
          const controllers = this.createDirectUploadControllers();
          const startNextController = () => {
            const controller = controllers.shift();
            if (controller) {
              controller.start((error2) => {
                if (error2) {
                  callback(error2);
                  this.dispatch("end");
                } else {
                  startNextController();
                }
              });
            } else {
              callback();
              this.dispatch("end");
            }
          };
          this.dispatch("start");
          startNextController();
        }
        createDirectUploadControllers() {
          const controllers = [];
          this.inputs.forEach((input) => {
            toArray(input.files).forEach((file) => {
              const controller = new DirectUploadController(input, file);
              controllers.push(controller);
            });
          });
          return controllers;
        }
        dispatch(name, detail = {}) {
          return dispatchEvent2(this.form, `direct-uploads:${name}`, {
            detail
          });
        }
      }
      const processingAttribute = "data-direct-uploads-processing";
      const submitButtonsByForm = /* @__PURE__ */ new WeakMap();
      let started = false;
      function start3() {
        if (!started) {
          started = true;
          document.addEventListener("click", didClick, true);
          document.addEventListener("submit", didSubmitForm, true);
          document.addEventListener("ajax:before", didSubmitRemoteElement);
        }
      }
      function didClick(event) {
        const { target } = event;
        if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
          submitButtonsByForm.set(target.form, target);
        }
      }
      function didSubmitForm(event) {
        handleFormSubmissionEvent(event);
      }
      function didSubmitRemoteElement(event) {
        if (event.target.tagName == "FORM") {
          handleFormSubmissionEvent(event);
        }
      }
      function handleFormSubmissionEvent(event) {
        const form = event.target;
        if (form.hasAttribute(processingAttribute)) {
          event.preventDefault();
          return;
        }
        const controller = new DirectUploadsController(form);
        const { inputs } = controller;
        if (inputs.length) {
          event.preventDefault();
          form.setAttribute(processingAttribute, "");
          inputs.forEach(disable);
          controller.start((error2) => {
            form.removeAttribute(processingAttribute);
            if (error2) {
              inputs.forEach(enable);
            } else {
              submitForm(form);
            }
          });
        }
      }
      function submitForm(form) {
        let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
        if (button) {
          const { disabled } = button;
          button.disabled = false;
          button.focus();
          button.click();
          button.disabled = disabled;
        } else {
          button = document.createElement("input");
          button.type = "submit";
          button.style.display = "none";
          form.appendChild(button);
          button.click();
          form.removeChild(button);
        }
        submitButtonsByForm.delete(form);
      }
      function disable(input) {
        input.disabled = true;
      }
      function enable(input) {
        input.disabled = false;
      }
      function autostart() {
        if (window.ActiveStorage) {
          start3();
        }
      }
      setTimeout(autostart, 1);
      exports3.DirectUpload = DirectUpload;
      exports3.start = start3;
      Object.defineProperty(exports3, "__esModule", {
        value: true
      });
    });
  })(activestorage, activestorage.exports);
  var AttachmentUpload = class {
    constructor(attachment, element) {
      this.attachment = attachment;
      this.element = element;
      this.directUpload = new activestorage.exports.DirectUpload(attachment.file, this.directUploadUrl, this);
    }
    start() {
      this.directUpload.create(this.directUploadDidComplete.bind(this));
    }
    directUploadWillStoreFileWithXHR(xhr) {
      xhr.upload.addEventListener("progress", (event) => {
        const progress = event.loaded / event.total * 100;
        this.attachment.setUploadProgress(progress);
      });
    }
    directUploadDidComplete(error2, attributes) {
      if (error2) {
        throw new Error(`Direct upload failed: ${error2}`);
      }
      this.attachment.setAttributes({
        sgid: attributes.attachable_sgid,
        url: this.createBlobUrl(attributes.signed_id, attributes.filename)
      });
    }
    createBlobUrl(signedId, filename) {
      return this.blobUrlTemplate.replace(":signed_id", signedId).replace(":filename", encodeURIComponent(filename));
    }
    get directUploadUrl() {
      return this.element.dataset.directUploadUrl;
    }
    get blobUrlTemplate() {
      return this.element.dataset.blobUrlTemplate;
    }
  };
  addEventListener("trix-attachment-add", (event) => {
    const { attachment, target } = event;
    if (attachment.file) {
      const upload = new AttachmentUpload(attachment, target);
      upload.start();
    }
  });

  // ../../node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent);
        }
      }
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left2, right2) => {
        const leftIndex = left2.index, rightIndex = right2.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var descriptorPattern = /^((.+?)(@(window|document))?->)?(.+?)(#([^:]+?))(:(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches = source.match(descriptorPattern) || [];
    return {
      eventTarget: parseEventTarget(matches[4]),
      eventName: matches[2],
      eventOptions: matches[9] ? parseEventOptions(matches[9]) : {},
      identifier: matches[5],
      methodName: matches[7]
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options2, token) => Object.assign(options2, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_2, char) => char.toUpperCase());
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_2, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  var Action = class {
    constructor(element, index, descriptor) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
    }
    static forToken(token) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content));
    }
    toString() {
      const eventNameSuffix = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventNameSuffix}->${this.identifier}#${this.methodName}`;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`);
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
  };
  var defaultEventNames = {
    "a": (e12) => "click",
    "button": (e12) => "click",
    "form": (e12) => "submit",
    "details": (e12) => "toggle",
    "input": (e12) => e12.getAttribute("type") == "submit" ? "click" : "input",
    "select": (e12) => "change",
    "textarea": (e12) => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      if (this.willBeInvokedByEvent(event) && this.shouldBeInvokedPerSelf(event)) {
        this.processStopPropagation(event);
        this.processPreventDefault(event);
        this.invokeWithEvent(event);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    processStopPropagation(event) {
      if (this.eventOptions.stop) {
        event.stopPropagation();
      }
    }
    processPreventDefault(event) {
      if (this.eventOptions.prevent) {
        event.preventDefault();
      }
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        const { params } = this.action;
        const actionEvent = Object.assign(event, { params });
        this.method.call(this.controller, actionEvent);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    shouldBeInvokedPerSelf(event) {
      if (this.action.eventOptions.self === true) {
        return this.action.element === event.target;
      } else {
        return true;
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(node, attributeName) {
      const element = node;
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeName = attributeName;
      this.delegate = delegate;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate) {
      this.element = element;
      this.delegate = delegate;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set) => values.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([key, values]) => values.has(value)).map(([key, values]) => key);
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left2, right2) {
    const length = Math.max(left2.length, right2.length);
    return Array.from({ length }, (_2, index) => [left2[index], right2[index]]);
  }
  function tokensAreEqual(left2, right2) {
    return left2 && right2 && left2.index == right2.index && left2.content == right2.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (!(error2 instanceof TypeError))
            throw error2;
          throw new TypeError(`Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`);
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var Context = class {
    constructor(module4, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module4;
      this.scope = scope;
      this.controller = new module4.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend2(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [
        ...Object.getOwnPropertyNames(object),
        ...Object.getOwnPropertySymbols(object)
      ];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend2 = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a4 = function() {
        this.a.call(this);
      };
      const b2 = extendWithReflect(a4);
      b2.prototype.a = function() {
      };
      return new b2();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger2) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger2;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var Scope = class {
    constructor(schema, element, identifier, logger2) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger2);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module4) => contexts.concat(module4.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module4 = new Module(this.application, definition);
      this.connectModule(module4);
    }
    unloadIdentifier(identifier) {
      const module4 = this.modulesByIdentifier.get(identifier);
      if (module4) {
        this.disconnectModule(module4);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module4 = this.modulesByIdentifier.get(identifier);
      if (module4) {
        return module4.contexts.find((context) => context.element == element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module4 = this.modulesByIdentifier.get(scope.identifier);
      if (module4) {
        module4.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module4 = this.modulesByIdentifier.get(scope.identifier);
      if (module4) {
        module4.disconnectContextForScope(scope);
      }
    }
    connectModule(module4) {
      this.modulesByIdentifier.set(module4.identifier, module4);
      const scopes = this.scopesByIdentifier.getValuesForKey(module4.identifier);
      scopes.forEach((scope) => module4.connectContextForScope(scope));
    }
    disconnectModule(module4) {
      this.modulesByIdentifier.delete(module4.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module4.identifier);
      scopes.forEach((scope) => module4.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`
  };
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
    }
    static start(element, schema) {
      const application2 = new Application(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read2, writer: write2 } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read2(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write2(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const typeFromObject = parseValueTypeConstant(payload.typeObject.type);
    if (!typeFromObject)
      return;
    const defaultValueType = parseValueTypeDefault(payload.typeObject.default);
    if (typeFromObject !== defaultValueType) {
      const propertyPath = payload.controller ? `${payload.controller}.${payload.token}` : payload.token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${payload.typeObject.default}" is of type "${defaultValueType}".`);
    }
    return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const typeFromObject = parseValueTypeObject({
      controller: payload.controller,
      token: payload.token,
      typeObject: payload.typeDefinition
    });
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeDefinition);
    const typeFromConstant = parseValueTypeConstant(payload.typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = payload.controller ? `${payload.controller}.${payload.typeDefinition}` : payload.token;
    throw new Error(`Unknown value type "${propertyPath}" for "${payload.token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const defaultValue = typeDefinition.default;
    if (defaultValue !== void 0)
      return defaultValue;
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const key = `${dasherize(payload.token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(payload.typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(payload.typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value);
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [ClassPropertiesBlessing, TargetPropertiesBlessing, ValuePropertiesBlessing];
  Controller.targets = [];
  Controller.values = {};

  // controllers/application.js
  var application = Application.start();
  application.debug = false;
  window.Stimulus = application;

  // controllers/accounts_controller.js
  var accounts_controller_exports = {};
  __export(accounts_controller_exports, {
    default: () => accounts_controller_default
  });

  // ../../node_modules/@rails/actioncable/app/assets/javascripts/actioncable.esm.js
  var adapters = {
    logger: self.console,
    WebSocket: self.WebSocket
  };
  var logger = {
    log(...messages) {
      if (this.enabled) {
        messages.push(Date.now());
        adapters.logger.log("[ActionCable]", ...messages);
      }
    }
  };
  var now2 = () => new Date().getTime();
  var secondsSince2 = (time) => (now2() - time) / 1e3;
  var ConnectionMonitor2 = class {
    constructor(connection) {
      this.visibilityDidChange = this.visibilityDidChange.bind(this);
      this.connection = connection;
      this.reconnectAttempts = 0;
    }
    start() {
      if (!this.isRunning()) {
        this.startedAt = now2();
        delete this.stoppedAt;
        this.startPolling();
        addEventListener("visibilitychange", this.visibilityDidChange);
        logger.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
      }
    }
    stop() {
      if (this.isRunning()) {
        this.stoppedAt = now2();
        this.stopPolling();
        removeEventListener("visibilitychange", this.visibilityDidChange);
        logger.log("ConnectionMonitor stopped");
      }
    }
    isRunning() {
      return this.startedAt && !this.stoppedAt;
    }
    recordPing() {
      this.pingedAt = now2();
    }
    recordConnect() {
      this.reconnectAttempts = 0;
      this.recordPing();
      delete this.disconnectedAt;
      logger.log("ConnectionMonitor recorded connect");
    }
    recordDisconnect() {
      this.disconnectedAt = now2();
      logger.log("ConnectionMonitor recorded disconnect");
    }
    startPolling() {
      this.stopPolling();
      this.poll();
    }
    stopPolling() {
      clearTimeout(this.pollTimeout);
    }
    poll() {
      this.pollTimeout = setTimeout(() => {
        this.reconnectIfStale();
        this.poll();
      }, this.getPollInterval());
    }
    getPollInterval() {
      const { staleThreshold, reconnectionBackoffRate } = this.constructor;
      const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
      const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
      const jitter = jitterMax * Math.random();
      return staleThreshold * 1e3 * backoff * (1 + jitter);
    }
    reconnectIfStale() {
      if (this.connectionIsStale()) {
        logger.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince2(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
        this.reconnectAttempts++;
        if (this.disconnectedRecently()) {
          logger.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince2(this.disconnectedAt)} s`);
        } else {
          logger.log("ConnectionMonitor reopening");
          this.connection.reopen();
        }
      }
    }
    get refreshedAt() {
      return this.pingedAt ? this.pingedAt : this.startedAt;
    }
    connectionIsStale() {
      return secondsSince2(this.refreshedAt) > this.constructor.staleThreshold;
    }
    disconnectedRecently() {
      return this.disconnectedAt && secondsSince2(this.disconnectedAt) < this.constructor.staleThreshold;
    }
    visibilityDidChange() {
      if (document.visibilityState === "visible") {
        setTimeout(() => {
          if (this.connectionIsStale() || !this.connection.isOpen()) {
            logger.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
            this.connection.reopen();
          }
        }, 200);
      }
    }
  };
  ConnectionMonitor2.staleThreshold = 6;
  ConnectionMonitor2.reconnectionBackoffRate = 0.15;
  var INTERNAL = {
    message_types: {
      welcome: "welcome",
      disconnect: "disconnect",
      ping: "ping",
      confirmation: "confirm_subscription",
      rejection: "reject_subscription"
    },
    disconnect_reasons: {
      unauthorized: "unauthorized",
      invalid_request: "invalid_request",
      server_restart: "server_restart"
    },
    default_mount_path: "/cable",
    protocols: ["actioncable-v1-json", "actioncable-unsupported"]
  };
  var { message_types: message_types2, protocols: protocols2 } = INTERNAL;
  var supportedProtocols2 = protocols2.slice(0, protocols2.length - 1);
  var indexOf2 = [].indexOf;
  var Connection2 = class {
    constructor(consumer2) {
      this.open = this.open.bind(this);
      this.consumer = consumer2;
      this.subscriptions = this.consumer.subscriptions;
      this.monitor = new ConnectionMonitor2(this);
      this.disconnected = true;
    }
    send(data) {
      if (this.isOpen()) {
        this.webSocket.send(JSON.stringify(data));
        return true;
      } else {
        return false;
      }
    }
    open() {
      if (this.isActive()) {
        logger.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
        return false;
      } else {
        logger.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${protocols2}`);
        if (this.webSocket) {
          this.uninstallEventHandlers();
        }
        this.webSocket = new adapters.WebSocket(this.consumer.url, protocols2);
        this.installEventHandlers();
        this.monitor.start();
        return true;
      }
    }
    close({ allowReconnect } = {
      allowReconnect: true
    }) {
      if (!allowReconnect) {
        this.monitor.stop();
      }
      if (this.isOpen()) {
        return this.webSocket.close();
      }
    }
    reopen() {
      logger.log(`Reopening WebSocket, current state is ${this.getState()}`);
      if (this.isActive()) {
        try {
          return this.close();
        } catch (error2) {
          logger.log("Failed to reopen WebSocket", error2);
        } finally {
          logger.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
          setTimeout(this.open, this.constructor.reopenDelay);
        }
      } else {
        return this.open();
      }
    }
    getProtocol() {
      if (this.webSocket) {
        return this.webSocket.protocol;
      }
    }
    isOpen() {
      return this.isState("open");
    }
    isActive() {
      return this.isState("open", "connecting");
    }
    isProtocolSupported() {
      return indexOf2.call(supportedProtocols2, this.getProtocol()) >= 0;
    }
    isState(...states) {
      return indexOf2.call(states, this.getState()) >= 0;
    }
    getState() {
      if (this.webSocket) {
        for (let state in adapters.WebSocket) {
          if (adapters.WebSocket[state] === this.webSocket.readyState) {
            return state.toLowerCase();
          }
        }
      }
      return null;
    }
    installEventHandlers() {
      for (let eventName in this.events) {
        const handler = this.events[eventName].bind(this);
        this.webSocket[`on${eventName}`] = handler;
      }
    }
    uninstallEventHandlers() {
      for (let eventName in this.events) {
        this.webSocket[`on${eventName}`] = function() {
        };
      }
    }
  };
  Connection2.reopenDelay = 500;
  Connection2.prototype.events = {
    message(event) {
      if (!this.isProtocolSupported()) {
        return;
      }
      const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
      switch (type) {
        case message_types2.welcome:
          this.monitor.recordConnect();
          return this.subscriptions.reload();
        case message_types2.disconnect:
          logger.log(`Disconnecting. Reason: ${reason}`);
          return this.close({
            allowReconnect: reconnect
          });
        case message_types2.ping:
          return this.monitor.recordPing();
        case message_types2.confirmation:
          this.subscriptions.confirmSubscription(identifier);
          return this.subscriptions.notify(identifier, "connected");
        case message_types2.rejection:
          return this.subscriptions.reject(identifier);
        default:
          return this.subscriptions.notify(identifier, "received", message);
      }
    },
    open() {
      logger.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
      this.disconnected = false;
      if (!this.isProtocolSupported()) {
        logger.log("Protocol is unsupported. Stopping monitor and disconnecting.");
        return this.close({
          allowReconnect: false
        });
      }
    },
    close(event) {
      logger.log("WebSocket onclose event");
      if (this.disconnected) {
        return;
      }
      this.disconnected = true;
      this.monitor.recordDisconnect();
      return this.subscriptions.notifyAll("disconnected", {
        willAttemptReconnect: this.monitor.isRunning()
      });
    },
    error() {
      logger.log("WebSocket onerror event");
    }
  };
  var extend3 = function(object, properties) {
    if (properties != null) {
      for (let key in properties) {
        const value = properties[key];
        object[key] = value;
      }
    }
    return object;
  };
  var Subscription2 = class {
    constructor(consumer2, params = {}, mixin) {
      this.consumer = consumer2;
      this.identifier = JSON.stringify(params);
      extend3(this, mixin);
    }
    perform(action, data = {}) {
      data.action = action;
      return this.send(data);
    }
    send(data) {
      return this.consumer.send({
        command: "message",
        identifier: this.identifier,
        data: JSON.stringify(data)
      });
    }
    unsubscribe() {
      return this.consumer.subscriptions.remove(this);
    }
  };
  var SubscriptionGuarantor2 = class {
    constructor(subscriptions) {
      this.subscriptions = subscriptions;
      this.pendingSubscriptions = [];
    }
    guarantee(subscription) {
      if (this.pendingSubscriptions.indexOf(subscription) == -1) {
        logger.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
        this.pendingSubscriptions.push(subscription);
      } else {
        logger.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
      }
      this.startGuaranteeing();
    }
    forget(subscription) {
      logger.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
      this.pendingSubscriptions = this.pendingSubscriptions.filter((s8) => s8 !== subscription);
    }
    startGuaranteeing() {
      this.stopGuaranteeing();
      this.retrySubscribing();
    }
    stopGuaranteeing() {
      clearTimeout(this.retryTimeout);
    }
    retrySubscribing() {
      this.retryTimeout = setTimeout(() => {
        if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
          this.pendingSubscriptions.map((subscription) => {
            logger.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
            this.subscriptions.subscribe(subscription);
          });
        }
      }, 500);
    }
  };
  var Subscriptions2 = class {
    constructor(consumer2) {
      this.consumer = consumer2;
      this.guarantor = new SubscriptionGuarantor2(this);
      this.subscriptions = [];
    }
    create(channelName, mixin) {
      const channel = channelName;
      const params = typeof channel === "object" ? channel : {
        channel
      };
      const subscription = new Subscription2(this.consumer, params, mixin);
      return this.add(subscription);
    }
    add(subscription) {
      this.subscriptions.push(subscription);
      this.consumer.ensureActiveConnection();
      this.notify(subscription, "initialized");
      this.subscribe(subscription);
      return subscription;
    }
    remove(subscription) {
      this.forget(subscription);
      if (!this.findAll(subscription.identifier).length) {
        this.sendCommand(subscription, "unsubscribe");
      }
      return subscription;
    }
    reject(identifier) {
      return this.findAll(identifier).map((subscription) => {
        this.forget(subscription);
        this.notify(subscription, "rejected");
        return subscription;
      });
    }
    forget(subscription) {
      this.guarantor.forget(subscription);
      this.subscriptions = this.subscriptions.filter((s8) => s8 !== subscription);
      return subscription;
    }
    findAll(identifier) {
      return this.subscriptions.filter((s8) => s8.identifier === identifier);
    }
    reload() {
      return this.subscriptions.map((subscription) => this.subscribe(subscription));
    }
    notifyAll(callbackName, ...args) {
      return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
    }
    notify(subscription, callbackName, ...args) {
      let subscriptions;
      if (typeof subscription === "string") {
        subscriptions = this.findAll(subscription);
      } else {
        subscriptions = [subscription];
      }
      return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
    }
    subscribe(subscription) {
      if (this.sendCommand(subscription, "subscribe")) {
        this.guarantor.guarantee(subscription);
      }
    }
    confirmSubscription(identifier) {
      logger.log(`Subscription confirmed ${identifier}`);
      this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
    }
    sendCommand(subscription, command) {
      const { identifier } = subscription;
      return this.consumer.send({
        command,
        identifier
      });
    }
  };
  var Consumer2 = class {
    constructor(url) {
      this._url = url;
      this.subscriptions = new Subscriptions2(this);
      this.connection = new Connection2(this);
    }
    get url() {
      return createWebSocketURL2(this._url);
    }
    send(data) {
      return this.connection.send(data);
    }
    connect() {
      return this.connection.open();
    }
    disconnect() {
      return this.connection.close({
        allowReconnect: false
      });
    }
    ensureActiveConnection() {
      if (!this.connection.isActive()) {
        return this.connection.open();
      }
    }
  };
  function createWebSocketURL2(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a4 = document.createElement("a");
      a4.href = url;
      a4.href = a4.href;
      a4.protocol = a4.protocol.replace("http", "ws");
      return a4.href;
    } else {
      return url;
    }
  }
  function createConsumer3(url = getConfig2("url") || INTERNAL.default_mount_path) {
    return new Consumer2(url);
  }
  function getConfig2(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }

  // channels/consumer.js
  var consumer_default = createConsumer3();

  // controllers/accounts_controller.js
  var accounts_controller_default = class extends Controller {
    reconnect(event) {
      if (consumer_default.connection.isActive()) {
        consumer_default.connection.reopen();
      }
    }
  };

  // controllers/braintree_controller.js
  var braintree_controller_exports = {};
  __export(braintree_controller_exports, {
    default: () => braintree_controller_default
  });
  var braintree_controller_default = class extends Controller {
    connect() {
      braintree.dropin.create(
        {
          authorization: this.data.get("clientToken"),
          container: this.dropinTarget,
          paypal: {
            flow: "vault"
          }
        },
        this.clientCreated.bind(this)
      );
    }
    clientCreated(error2, instance) {
      if (error2) {
        console.error("Error setting up Braintree dropin:", error2);
        return;
      }
      this.instance = instance;
    }
    submit(event) {
      event.preventDefault();
      this.instance.requestPaymentMethod(this.paymentMethod.bind(this));
    }
    paymentMethod(error2, payload) {
      if (error2) {
        console.error("Error with payment method:", error2);
        return;
      }
      this.addHiddenField("processor", "braintree");
      this.addHiddenField("payment_method_token", payload.nonce);
      Rails.fire(this.formTarget, "submit");
    }
    addHiddenField(name, value) {
      let hiddenInput = document.createElement("input");
      hiddenInput.setAttribute("type", "hidden");
      hiddenInput.setAttribute("name", name);
      hiddenInput.setAttribute("value", value);
      this.formTarget.appendChild(hiddenInput);
    }
  };
  __publicField(braintree_controller_default, "targets", ["dropin", "form"]);

  // controllers/bulk_controller.js
  var bulk_controller_exports = {};
  __export(bulk_controller_exports, {
    default: () => bulk_controller_default
  });
  var bulk_controller_default = class extends Controller {
    toggleSelectAll(event) {
      !this.allCheckboxesSelected ? this.selectAll() : this.unselectAll();
    }
    selectAll() {
      this.selectAllTarget.checked = true;
      this.selectAllTarget.indeterminate = false;
      this.unselected.forEach((target) => target.checked = true);
    }
    unselectAll() {
      this.selectAllTarget.checked = false;
      this.selectAllTarget.indeterminate = false;
      this.selected.forEach((target) => target.checked = false);
    }
    change(event) {
      if (this.noCheckboxesSelected) {
        this.selectAllTarget.checked = false;
        this.selectAllTarget.indeterminate = false;
      } else if (this.allCheckboxesSelected) {
        this.selectAllTarget.checked = true;
        this.selectAllTarget.indeterminate = false;
      } else {
        this.selectAllTarget.indeterminate = true;
      }
    }
    get selectedAll() {
      return this.selectAllTarget.checked;
    }
    get selected() {
      return this.checkboxTargets.filter((target) => target.checked);
    }
    get unselected() {
      return this.checkboxTargets.filter((target) => !target.checked);
    }
    get selectedIds() {
      return this.selected.map((target) => target.dataset.id);
    }
    get allCheckboxesSelected() {
      return this.checkboxTargets.every((target) => target.checked);
    }
    get noCheckboxesSelected() {
      return this.checkboxTargets.every((target) => !target.checked);
    }
  };
  __publicField(bulk_controller_default, "targets", ["checkbox", "selectAll"]);

  // controllers/clipboard_controller.js
  var clipboard_controller_exports = {};
  __export(clipboard_controller_exports, {
    default: () => clipboard_controller_default
  });
  var import_clipboard = __toESM(require_clipboard());

  // ../../node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start2 = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start2, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start2, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // ../../node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // ../../node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y2,
      right: x2 + width,
      bottom: y2 + height,
      left: x2,
      x: x2,
      y: y2
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // ../../node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v2 = within(min2, value, max2);
    return v2 > max2 ? max2 : v2;
  }

  // ../../node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // ../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options2 = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options2.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options2 = _ref2.options;
    var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref) {
    var x2 = _ref.x, y2 = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x2 * dpr) / dpr || 0,
      y: round(y2 * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x: x2,
      y: y2
    }) : {
      x: x2,
      y: y2
    };
    x2 = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
        x2 -= offsetX - popperRect.width;
        x2 *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x2,
      y: y2
    }) : {
      x: x2,
      y: y2
    };
    x2 = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options2 = _ref5.options;
    var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options2 = _ref.options;
    var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x2 = 0;
    var y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2 + getWindowScrollBarX(element),
      y: y2
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x2 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  // ../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start2:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // ../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a4, b2) {
      return overflows[a4] - overflows[b2];
    });
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options2 = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i6 = 0; i6 < placements2.length; i6++) {
      var placement = placements2[i6];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start2;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
    var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x2;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // ../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // ../../node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // ../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options2 = _ref.options, name = _ref.name;
    var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start2 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start2 ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // ../../node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // ../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // ../../node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // ../../node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p3, c6) {
      return p3.replace(/%s/, c6);
    }, str);
  }

  // ../../node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s8) {
              return '"' + s8 + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn2) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn2(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  // ../../node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // ../../node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options2) {
      if (options2 === void 0) {
        options2 = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options3);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m3) {
            return m3.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy2() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options2).then(function(state2) {
        if (!isDestroyed && options2.onFirstUpdate) {
          options2.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options3 = _ref3$options === void 0 ? {} : _ref3$options, effect5 = _ref3.effect;
          if (typeof effect5 === "function") {
            var cleanupFn = effect5({
              state,
              name,
              instance,
              options: options3
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // ../../node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // ../../node_modules/tippy.js/dist/tippy.esm.js
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO2() {
    return document.body;
  };
  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }
  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v2 = value[index];
      return v2 == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v2;
    }
    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === "function" ? value.apply(void 0, args) : value;
  }
  function debounce2(fn2, ms) {
    if (ms === 0) {
      return fn2;
    }
    var timeout;
    return function(arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        fn2(arg);
      }, ms);
    };
  }
  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function(key) {
      delete clone[key];
    });
    return clone;
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique(arr) {
    return arr.filter(function(item, index) {
      return arr.indexOf(item) === index;
    });
  }
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function(acc, key) {
      if (obj[key] !== void 0) {
        acc[key] = obj[key];
      }
      return acc;
    }, {});
  }
  function div() {
    return document.createElement("div");
  }
  function isElement2(value) {
    return ["Element", "Fragment"].some(function(type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, "NodeList");
  }
  function isMouseEvent(value) {
    return isType(value, "MouseEvent");
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement2(value)) {
      return [value];
    }
    if (isNodeList(value)) {
      return arrayFrom(value);
    }
    if (Array.isArray(value)) {
      return value;
    }
    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function(el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function(el) {
      if (el) {
        el.setAttribute("data-state", state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;
    var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0];
    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX, clientY = event.clientY;
    return popperTreeData.every(function(_ref) {
      var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement2(popperState.placement);
      var offsetData = popperState.modifiersData.offset;
      if (!offsetData) {
        return true;
      }
      var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === "top" ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
      var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener";
    ["transitionend", "webkitTransitionEnd"].forEach(function(event) {
      box[method](event, listener);
    });
  }
  function actualContains(parent, child) {
    var target = child;
    while (target) {
      var _target$getRootNode;
      if (parent.contains(target)) {
        return true;
      }
      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }
    return false;
  }
  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }
    currentInput.isTouch = true;
    if (window.performance) {
      document.addEventListener("mousemove", onDocumentMouseMove);
    }
  }
  function onDocumentMouseMove() {
    var now3 = performance.now();
    if (now3 - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener("mousemove", onDocumentMouseMove);
    }
    lastMouseMoveTime = now3;
  }
  function onWindowBlur() {
    var activeElement = document.activeElement;
    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;
      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener("touchstart", onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener("blur", onWindowBlur);
  }
  var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
  var isIE11 = isBrowser ? !!window.msCrypto : false;
  function createMemoryLeakWarning(method) {
    var txt = method === "destroy" ? "n already-" : " ";
    return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
  }
  function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
  }
  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\u{1F477}\u200D This is a development-only message. It will be removed in production.\n  ");
  }
  function getFormattedMessage(message) {
    return [
      getDevMessage(message),
      "color: #00C584; font-size: 1.3em; font-weight: bold;",
      "line-height: 1.5",
      "color: #a6a095;"
    ];
  }
  var visitedMessages;
  if (true) {
    resetVisitedMessages();
  }
  function resetVisitedMessages() {
    visitedMessages = /* @__PURE__ */ new Set();
  }
  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;
      visitedMessages.add(message);
      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }
  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;
      visitedMessages.add(message);
      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }
  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === "[object Object]" && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ["tippy() was passed", "`" + String(targets) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" "));
    errorWhen(didPassPlainObject, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
  }
  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: "fade",
    arrow: true,
    content: "",
    inertia: false,
    maxWidth: 350,
    role: "tooltip",
    theme: "",
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: "auto",
      expanded: "auto"
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: "",
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {
    },
    onBeforeUpdate: function onBeforeUpdate() {
    },
    onCreate: function onCreate() {
    },
    onDestroy: function onDestroy() {
    },
    onHidden: function onHidden() {
    },
    onHide: function onHide() {
    },
    onMount: function onMount() {
    },
    onShow: function onShow() {
    },
    onShown: function onShown() {
    },
    onTrigger: function onTrigger() {
    },
    onUntrigger: function onUntrigger() {
    },
    onClickOutside: function onClickOutside() {
    },
    placement: "top",
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: "mouseenter focus",
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps2(partialProps) {
    if (true) {
      validateProps(partialProps, []);
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps2 = plugins.reduce(function(acc, plugin) {
      var name = plugin.name, defaultValue = plugin.defaultValue;
      if (name) {
        var _name;
        acc[name] = passedProps[name] !== void 0 ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }
      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps2);
  }
  function getDataAttributeProps(reference2, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function(acc, key) {
      var valueAsString = (reference2.getAttribute("data-tippy-" + key) || "").trim();
      if (!valueAsString) {
        return acc;
      }
      if (key === "content") {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e12) {
          acc[key] = valueAsString;
        }
      }
      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference2, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference2])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference2, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === "auto" ? props.interactive : out.aria.expanded,
      content: out.aria.content === "auto" ? props.interactive ? null : "describedby" : out.aria.content
    };
    return out;
  }
  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }
    if (plugins === void 0) {
      plugins = [];
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function(prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop);
      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function(plugin) {
          return plugin.name === prop;
        }).length === 0;
      }
      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", "\n\n", "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n", "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
    });
  }
  var innerHTML = function innerHTML2() {
    return "innerHTML";
  };
  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }
  function createArrowElement(value) {
    var arrow2 = div();
    if (value === true) {
      arrow2.className = ARROW_CLASS;
    } else {
      arrow2.className = SVG_ARROW_CLASS;
      if (isElement2(value)) {
        arrow2.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow2, value);
      }
    }
    return arrow2;
  }
  function setContent(content, props) {
    if (isElement2(props.content)) {
      dangerouslySetInnerHTML(content, "");
      content.appendChild(props.content);
    } else if (typeof props.content !== "function") {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper2) {
    var box = popper2.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box,
      content: boxChildren.find(function(node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function(node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function(node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render(instance) {
    var popper2 = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute("data-state", "hidden");
    box.setAttribute("tabindex", "-1");
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute("data-state", "hidden");
    setContent(content, instance.props);
    popper2.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);
    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper2), box2 = _getChildren.box, content2 = _getChildren.content, arrow2 = _getChildren.arrow;
      if (nextProps.theme) {
        box2.setAttribute("data-theme", nextProps.theme);
      } else {
        box2.removeAttribute("data-theme");
      }
      if (typeof nextProps.animation === "string") {
        box2.setAttribute("data-animation", nextProps.animation);
      } else {
        box2.removeAttribute("data-animation");
      }
      if (nextProps.inertia) {
        box2.setAttribute("data-inertia", "");
      } else {
        box2.removeAttribute("data-inertia");
      }
      box2.style.maxWidth = typeof nextProps.maxWidth === "number" ? nextProps.maxWidth + "px" : nextProps.maxWidth;
      if (nextProps.role) {
        box2.setAttribute("role", nextProps.role);
      } else {
        box2.removeAttribute("role");
      }
      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content2, instance.props);
      }
      if (nextProps.arrow) {
        if (!arrow2) {
          box2.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box2.removeChild(arrow2);
          box2.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow2) {
        box2.removeChild(arrow2);
      }
    }
    return {
      popper: popper2,
      onUpdate
    };
  }
  render.$$tippy = true;
  var idCounter = 1;
  var mouseMoveListeners = [];
  var mountedInstances = [];
  function createTippy(reference2, passedProps) {
    var props = evaluateProps(reference2, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps))));
    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce2(onMouseMove, props.interactiveDebounce);
    var currentTarget;
    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      isEnabled: true,
      isVisible: false,
      isDestroyed: false,
      isMounted: false,
      isShown: false
    };
    var instance = {
      id,
      reference: reference2,
      popper: div(),
      popperInstance,
      props,
      state,
      plugins,
      clearDelayTimeouts,
      setProps,
      setContent: setContent2,
      show,
      hide: hide2,
      hideWithInteractivity,
      enable,
      disable,
      unmount,
      destroy: destroy2
    };
    if (!props.render) {
      if (true) {
        errorWhen(true, "render() function has not been supplied.");
      }
      return instance;
    }
    var _props$render = props.render(instance), popper2 = _props$render.popper, onUpdate = _props$render.onUpdate;
    popper2.setAttribute("data-tippy-root", "");
    popper2.id = "tippy-" + instance.id;
    instance.popper = popper2;
    reference2._tippy = instance;
    popper2._tippy = instance;
    var pluginsHooks = plugins.map(function(plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference2.hasAttribute("aria-expanded");
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook("onCreate", [instance]);
    if (props.showOnCreate) {
      scheduleShow();
    }
    popper2.addEventListener("mouseenter", function() {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper2.addEventListener("mouseleave", function() {
      if (instance.props.interactive && instance.props.trigger.indexOf("mouseenter") >= 0) {
        getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      }
    });
    return instance;
    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }
    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === "hold";
    }
    function getIsDefaultRenderFn() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }
    function getCurrentTarget() {
      return currentTarget || reference2;
    }
    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }
    function getDefaultTemplateChildren() {
      return getChildren(popper2);
    }
    function getDelay(isShow) {
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === "focus") {
        return 0;
      }
      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }
    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }
      popper2.style.pointerEvents = instance.props.interactive && !fromHide ? "" : "none";
      popper2.style.zIndex = "" + instance.props.zIndex;
    }
    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }
      pluginsHooks.forEach(function(pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });
      if (shouldInvokePropsHook) {
        var _instance$props;
        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }
    function handleAriaContentAttribute() {
      var aria = instance.props.aria;
      if (!aria.content) {
        return;
      }
      var attr = "aria-" + aria.content;
      var id2 = popper2.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        var currentValue = node.getAttribute(attr);
        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id2 : id2);
        } else {
          var nextValue = currentValue && currentValue.replace(id2, "").trim();
          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }
    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        if (instance.props.interactive) {
          node.setAttribute("aria-expanded", instance.state.isVisible && node === getCurrentTarget() ? "true" : "false");
        } else {
          node.removeAttribute("aria-expanded");
        }
      });
    }
    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener("mousemove", debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
        return listener !== debouncedOnMouseMove;
      });
    }
    function onDocumentPress(event) {
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === "mousedown") {
          return;
        }
      }
      var actualTarget = event.composedPath && event.composedPath()[0] || event.target;
      if (instance.props.interactive && actualContains(popper2, actualTarget)) {
        return;
      }
      if (normalizeToArray(instance.props.triggerTarget || reference2).some(function(el) {
        return actualContains(el, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }
        if (instance.state.isVisible && instance.props.trigger.indexOf("click") >= 0) {
          return;
        }
      } else {
        invokeHook("onClickOutside", [instance, event]);
      }
      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide();
        didHideDueToDocumentMouseDown = true;
        setTimeout(function() {
          didHideDueToDocumentMouseDown = false;
        });
        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }
    function onTouchMove() {
      didTouchMove = true;
    }
    function onTouchStart() {
      didTouchMove = false;
    }
    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener("mousedown", onDocumentPress, true);
      doc.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener("mousedown", onDocumentPress, true);
      doc.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
    }
    function onTransitionedOut(duration2, callback) {
      onTransitionEnd(duration2, function() {
        if (!instance.state.isVisible && popper2.parentNode && popper2.parentNode.contains(popper2)) {
          callback();
        }
      });
    }
    function onTransitionedIn(duration2, callback) {
      onTransitionEnd(duration2, callback);
    }
    function onTransitionEnd(duration2, callback) {
      var box = getDefaultTemplateChildren().box;
      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, "remove", listener);
          callback();
        }
      }
      if (duration2 === 0) {
        return callback();
      }
      updateTransitionEndListener(box, "remove", currentTransitionEndListener);
      updateTransitionEndListener(box, "add", listener);
      currentTransitionEndListener = listener;
    }
    function on(eventType, handler, options2) {
      if (options2 === void 0) {
        options2 = false;
      }
      var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
      nodes.forEach(function(node) {
        node.addEventListener(eventType, handler, options2);
        listeners.push({
          node,
          eventType,
          handler,
          options: options2
        });
      });
    }
    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on("touchstart", onTrigger2, {
          passive: true
        });
        on("touchend", onMouseLeave, {
          passive: true
        });
      }
      splitBySpaces(instance.props.trigger).forEach(function(eventType) {
        if (eventType === "manual") {
          return;
        }
        on(eventType, onTrigger2);
        switch (eventType) {
          case "mouseenter":
            on("mouseleave", onMouseLeave);
            break;
          case "focus":
            on(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
            break;
          case "focusin":
            on("focusout", onBlurOrFocusOut);
            break;
        }
      });
    }
    function removeListeners() {
      listeners.forEach(function(_ref) {
        var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options2 = _ref.options;
        node.removeEventListener(eventType, handler, options2);
      });
      listeners = [];
    }
    function onTrigger2(event) {
      var _lastTriggerEvent;
      var shouldScheduleClickHide = false;
      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }
      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === "focus";
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();
      if (!instance.state.isVisible && isMouseEvent(event)) {
        mouseMoveListeners.forEach(function(listener) {
          return listener(event);
        });
      }
      if (event.type === "click" && (instance.props.trigger.indexOf("mouseenter") < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }
      if (event.type === "click") {
        isVisibleFromClick = !shouldScheduleClickHide;
      }
      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }
    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper2.contains(target);
      if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
        return;
      }
      var popperTreeData = getNestedPopperTree().concat(popper2).map(function(popper3) {
        var _instance$popperInsta;
        var instance2 = popper3._tippy;
        var state2 = (_instance$popperInsta = instance2.popperInstance) == null ? void 0 : _instance$popperInsta.state;
        if (state2) {
          return {
            popperRect: popper3.getBoundingClientRect(),
            popperState: state2,
            props
          };
        }
        return null;
      }).filter(Boolean);
      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }
    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf("click") >= 0 && isVisibleFromClick;
      if (shouldBail) {
        return;
      }
      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }
      scheduleHide(event);
    }
    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf("focusin") < 0 && event.target !== getCurrentTarget()) {
        return;
      }
      if (instance.props.interactive && event.relatedTarget && popper2.contains(event.relatedTarget)) {
        return;
      }
      scheduleHide(event);
    }
    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0 : false;
    }
    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset2 = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
      var arrow2 = getIsDefaultRenderFn() ? getChildren(popper2).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference2;
      var tippyModifier = {
        name: "$$tippy",
        enabled: true,
        phase: "beforeWrite",
        requires: ["computeStyles"],
        fn: function fn2(_ref2) {
          var state2 = _ref2.state;
          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
            ["placement", "reference-hidden", "escaped"].forEach(function(attr) {
              if (attr === "placement") {
                box.setAttribute("data-placement", state2.placement);
              } else {
                if (state2.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, "");
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state2.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: "offset",
        options: {
          offset: offset2
        }
      }, {
        name: "preventOverflow",
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: "flip",
        options: {
          padding: 5
        }
      }, {
        name: "computeStyles",
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];
      if (getIsDefaultRenderFn() && arrow2) {
        modifiers.push({
          name: "arrow",
          options: {
            element: arrow2,
            padding: 3
          }
        });
      }
      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = createPopper(computedReference, popper2, Object.assign({}, popperOptions, {
        placement,
        onFirstUpdate,
        modifiers
      }));
    }
    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }
    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode;
      var node = getCurrentTarget();
      if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === "parent") {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      }
      if (!parentNode.contains(popper2)) {
        parentNode.appendChild(popper2);
      }
      instance.state.isMounted = true;
      createPopperInstance();
      if (true) {
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper2, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", "\n\n", "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", "\n\n", "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", "\n\n", "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
      }
    }
    function getNestedPopperTree() {
      return arrayFrom(popper2.querySelectorAll("[data-tippy-root]"));
    }
    function scheduleShow(event) {
      instance.clearDelayTimeouts();
      if (event) {
        invokeHook("onTrigger", [instance, event]);
      }
      addDocumentPress();
      var delay = getDelay(true);
      var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
      if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
        delay = touchDelay;
      }
      if (delay) {
        showTimeout = setTimeout(function() {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }
    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook("onUntrigger", [instance, event]);
      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      }
      if (instance.props.trigger.indexOf("mouseenter") >= 0 && instance.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }
      var delay = getDelay(false);
      if (delay) {
        hideTimeout = setTimeout(function() {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        scheduleHideAnimationFrame = requestAnimationFrame(function() {
          instance.hide();
        });
      }
    }
    function enable() {
      instance.state.isEnabled = true;
    }
    function disable() {
      instance.hide();
      instance.state.isEnabled = false;
    }
    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }
    function setProps(partialProps) {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("setProps"));
      }
      if (instance.state.isDestroyed) {
        return;
      }
      invokeHook("onBeforeUpdate", [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference2, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();
      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce2(onMouseMove, nextProps.interactiveDebounce);
      }
      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function(node) {
          node.removeAttribute("aria-expanded");
        });
      } else if (nextProps.triggerTarget) {
        reference2.removeAttribute("aria-expanded");
      }
      handleAriaExpandedAttribute();
      handleStyles();
      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }
      if (instance.popperInstance) {
        createPopperInstance();
        getNestedPopperTree().forEach(function(nestedPopper) {
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }
      invokeHook("onAfterUpdate", [instance, partialProps]);
    }
    function setContent2(content) {
      instance.setProps({
        content
      });
    }
    function show() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("show"));
      }
      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration2 = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      }
      if (getCurrentTarget().hasAttribute("disabled")) {
        return;
      }
      invokeHook("onShow", [instance], false);
      if (instance.props.onShow(instance) === false) {
        return;
      }
      instance.state.isVisible = true;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "visible";
      }
      handleStyles();
      addDocumentPress();
      if (!instance.state.isMounted) {
        popper2.style.transition = "none";
      }
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;
        setTransitionDuration([box, content], 0);
      }
      onFirstUpdate = function onFirstUpdate2() {
        var _instance$popperInsta2;
        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }
        ignoreOnFirstUpdate = true;
        void popper2.offsetHeight;
        popper2.style.transition = instance.props.moveTransition;
        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
          setTransitionDuration([_box, _content], duration2);
          setVisibilityState([_box, _content], "visible");
        }
        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance);
        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook("onMount", [instance]);
        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration2, function() {
            instance.state.isShown = true;
            invokeHook("onShown", [instance]);
          });
        }
      };
      mount();
    }
    function hide2() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hide"));
      }
      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration2 = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }
      invokeHook("onHide", [instance], false);
      if (instance.props.onHide(instance) === false) {
        return;
      }
      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;
      if (getIsDefaultRenderFn()) {
        popper2.style.visibility = "hidden";
      }
      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);
      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;
        if (instance.props.animation) {
          setTransitionDuration([box, content], duration2);
          setVisibilityState([box, content], "hidden");
        }
      }
      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration2, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }
    function hideWithInteractivity(event) {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hideWithInteractivity"));
      }
      getDocument().addEventListener("mousemove", debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }
    function unmount() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("unmount"));
      }
      if (instance.state.isVisible) {
        instance.hide();
      }
      if (!instance.state.isMounted) {
        return;
      }
      destroyPopperInstance();
      getNestedPopperTree().forEach(function(nestedPopper) {
        nestedPopper._tippy.unmount();
      });
      if (popper2.parentNode) {
        popper2.parentNode.removeChild(popper2);
      }
      mountedInstances = mountedInstances.filter(function(i6) {
        return i6 !== instance;
      });
      instance.state.isMounted = false;
      invokeHook("onHidden", [instance]);
    }
    function destroy2() {
      if (true) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("destroy"));
      }
      if (instance.state.isDestroyed) {
        return;
      }
      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference2._tippy;
      instance.state.isDestroyed = true;
      invokeHook("onDestroy", [instance]);
    }
  }
  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }
    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    if (true) {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins
    });
    var elements2 = getArrayOfElements(targets);
    if (true) {
      var isSingleContentElement = isElement2(passedProps.content);
      var isMoreThanOneReferenceElement = elements2.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", "\n\n", "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", "\n\n", "1) content: element.innerHTML\n", "2) content: () => element.cloneNode(true)"].join(" "));
    }
    var instances = elements2.reduce(function(acc, reference2) {
      var instance = reference2 && createTippy(reference2, passedProps);
      if (instance) {
        acc.push(instance);
      }
      return acc;
    }, []);
    return isElement2(targets) ? instances[0] : instances;
  }
  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;
  var applyStylesModifier = Object.assign({}, applyStyles_default, {
    effect: function effect4(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
    }
  });
  tippy.setDefaultProps({
    render
  });
  var tippy_esm_default = tippy;

  // controllers/clipboard_controller.js
  var clipboard_controller_default = class extends Controller {
    connect() {
      this.clipboard = new import_clipboard.default(this.element);
      this.clipboard.on("success", (e12) => this.tooltip(this.successMessage));
      this.clipboard.on("error", (e12) => this.tooltip(this.errorMessage));
    }
    tooltip(message) {
      tippy_esm_default(this.element, {
        content: message,
        showOnCreate: true,
        onHidden: (instance) => {
          instance.destroy();
        }
      });
    }
    get successMessage() {
      return this.successMessageValue || "Copied!";
    }
    get errorMessage() {
      return this.errorMessageValue || "Failed!";
    }
  };
  __publicField(clipboard_controller_default, "values", {
    successMessage: String,
    errorMessage: String
  });

  // controllers/command_palette_controller.js
  var command_palette_controller_exports = {};
  __export(command_palette_controller_exports, {
    default: () => command_palette_controller_default
  });

  // ../../node_modules/@lit/reactive-element/css-tag.js
  var t = window;
  var e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
  var s = Symbol();
  var n = /* @__PURE__ */ new WeakMap();
  var o = class {
    constructor(t5, e12, n9) {
      if (this._$cssResult$ = true, n9 !== s)
        throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
      this.cssText = t5, this.t = e12;
    }
    get styleSheet() {
      let t5 = this.o;
      const s8 = this.t;
      if (e && void 0 === t5) {
        const e12 = void 0 !== s8 && 1 === s8.length;
        e12 && (t5 = n.get(s8)), void 0 === t5 && ((this.o = t5 = new CSSStyleSheet()).replaceSync(this.cssText), e12 && n.set(s8, t5));
      }
      return t5;
    }
    toString() {
      return this.cssText;
    }
  };
  var r = (t5) => new o("string" == typeof t5 ? t5 : t5 + "", void 0, s);
  var i = (t5, ...e12) => {
    const n9 = 1 === t5.length ? t5[0] : e12.reduce((e13, s8, n10) => e13 + ((t6) => {
      if (true === t6._$cssResult$)
        return t6.cssText;
      if ("number" == typeof t6)
        return t6;
      throw Error("Value passed to 'css' function must be a 'css' function result: " + t6 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
    })(s8) + t5[n10 + 1], t5[0]);
    return new o(n9, t5, s);
  };
  var S = (s8, n9) => {
    e ? s8.adoptedStyleSheets = n9.map((t5) => t5 instanceof CSSStyleSheet ? t5 : t5.styleSheet) : n9.forEach((e12) => {
      const n10 = document.createElement("style"), o11 = t.litNonce;
      void 0 !== o11 && n10.setAttribute("nonce", o11), n10.textContent = e12.cssText, s8.appendChild(n10);
    });
  };
  var c = e ? (t5) => t5 : (t5) => t5 instanceof CSSStyleSheet ? ((t6) => {
    let e12 = "";
    for (const s8 of t6.cssRules)
      e12 += s8.cssText;
    return r(e12);
  })(t5) : t5;

  // ../../node_modules/@lit/reactive-element/reactive-element.js
  var s2;
  var e2 = window;
  var r2 = e2.trustedTypes;
  var h = r2 ? r2.emptyScript : "";
  var o2 = e2.reactiveElementPolyfillSupport;
  var n2 = { toAttribute(t5, i6) {
    switch (i6) {
      case Boolean:
        t5 = t5 ? h : null;
        break;
      case Object:
      case Array:
        t5 = null == t5 ? t5 : JSON.stringify(t5);
    }
    return t5;
  }, fromAttribute(t5, i6) {
    let s8 = t5;
    switch (i6) {
      case Boolean:
        s8 = null !== t5;
        break;
      case Number:
        s8 = null === t5 ? null : Number(t5);
        break;
      case Object:
      case Array:
        try {
          s8 = JSON.parse(t5);
        } catch (t6) {
          s8 = null;
        }
    }
    return s8;
  } };
  var a = (t5, i6) => i6 !== t5 && (i6 == i6 || t5 == t5);
  var l = { attribute: true, type: String, converter: n2, reflect: false, hasChanged: a };
  var d = class extends HTMLElement {
    constructor() {
      super(), this._$Ei = /* @__PURE__ */ new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$El = null, this.u();
    }
    static addInitializer(t5) {
      var i6;
      null !== (i6 = this.h) && void 0 !== i6 || (this.h = []), this.h.push(t5);
    }
    static get observedAttributes() {
      this.finalize();
      const t5 = [];
      return this.elementProperties.forEach((i6, s8) => {
        const e12 = this._$Ep(s8, i6);
        void 0 !== e12 && (this._$Ev.set(e12, s8), t5.push(e12));
      }), t5;
    }
    static createProperty(t5, i6 = l) {
      if (i6.state && (i6.attribute = false), this.finalize(), this.elementProperties.set(t5, i6), !i6.noAccessor && !this.prototype.hasOwnProperty(t5)) {
        const s8 = "symbol" == typeof t5 ? Symbol() : "__" + t5, e12 = this.getPropertyDescriptor(t5, s8, i6);
        void 0 !== e12 && Object.defineProperty(this.prototype, t5, e12);
      }
    }
    static getPropertyDescriptor(t5, i6, s8) {
      return { get() {
        return this[i6];
      }, set(e12) {
        const r7 = this[t5];
        this[i6] = e12, this.requestUpdate(t5, r7, s8);
      }, configurable: true, enumerable: true };
    }
    static getPropertyOptions(t5) {
      return this.elementProperties.get(t5) || l;
    }
    static finalize() {
      if (this.hasOwnProperty("finalized"))
        return false;
      this.finalized = true;
      const t5 = Object.getPrototypeOf(this);
      if (t5.finalize(), this.elementProperties = new Map(t5.elementProperties), this._$Ev = /* @__PURE__ */ new Map(), this.hasOwnProperty("properties")) {
        const t6 = this.properties, i6 = [...Object.getOwnPropertyNames(t6), ...Object.getOwnPropertySymbols(t6)];
        for (const s8 of i6)
          this.createProperty(s8, t6[s8]);
      }
      return this.elementStyles = this.finalizeStyles(this.styles), true;
    }
    static finalizeStyles(i6) {
      const s8 = [];
      if (Array.isArray(i6)) {
        const e12 = new Set(i6.flat(1 / 0).reverse());
        for (const i7 of e12)
          s8.unshift(c(i7));
      } else
        void 0 !== i6 && s8.push(c(i6));
      return s8;
    }
    static _$Ep(t5, i6) {
      const s8 = i6.attribute;
      return false === s8 ? void 0 : "string" == typeof s8 ? s8 : "string" == typeof t5 ? t5.toLowerCase() : void 0;
    }
    u() {
      var t5;
      this._$E_ = new Promise((t6) => this.enableUpdating = t6), this._$AL = /* @__PURE__ */ new Map(), this._$Eg(), this.requestUpdate(), null === (t5 = this.constructor.h) || void 0 === t5 || t5.forEach((t6) => t6(this));
    }
    addController(t5) {
      var i6, s8;
      (null !== (i6 = this._$ES) && void 0 !== i6 ? i6 : this._$ES = []).push(t5), void 0 !== this.renderRoot && this.isConnected && (null === (s8 = t5.hostConnected) || void 0 === s8 || s8.call(t5));
    }
    removeController(t5) {
      var i6;
      null === (i6 = this._$ES) || void 0 === i6 || i6.splice(this._$ES.indexOf(t5) >>> 0, 1);
    }
    _$Eg() {
      this.constructor.elementProperties.forEach((t5, i6) => {
        this.hasOwnProperty(i6) && (this._$Ei.set(i6, this[i6]), delete this[i6]);
      });
    }
    createRenderRoot() {
      var t5;
      const s8 = null !== (t5 = this.shadowRoot) && void 0 !== t5 ? t5 : this.attachShadow(this.constructor.shadowRootOptions);
      return S(s8, this.constructor.elementStyles), s8;
    }
    connectedCallback() {
      var t5;
      void 0 === this.renderRoot && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), null === (t5 = this._$ES) || void 0 === t5 || t5.forEach((t6) => {
        var i6;
        return null === (i6 = t6.hostConnected) || void 0 === i6 ? void 0 : i6.call(t6);
      });
    }
    enableUpdating(t5) {
    }
    disconnectedCallback() {
      var t5;
      null === (t5 = this._$ES) || void 0 === t5 || t5.forEach((t6) => {
        var i6;
        return null === (i6 = t6.hostDisconnected) || void 0 === i6 ? void 0 : i6.call(t6);
      });
    }
    attributeChangedCallback(t5, i6, s8) {
      this._$AK(t5, s8);
    }
    _$EO(t5, i6, s8 = l) {
      var e12;
      const r7 = this.constructor._$Ep(t5, s8);
      if (void 0 !== r7 && true === s8.reflect) {
        const h6 = (void 0 !== (null === (e12 = s8.converter) || void 0 === e12 ? void 0 : e12.toAttribute) ? s8.converter : n2).toAttribute(i6, s8.type);
        this._$El = t5, null == h6 ? this.removeAttribute(r7) : this.setAttribute(r7, h6), this._$El = null;
      }
    }
    _$AK(t5, i6) {
      var s8;
      const e12 = this.constructor, r7 = e12._$Ev.get(t5);
      if (void 0 !== r7 && this._$El !== r7) {
        const t6 = e12.getPropertyOptions(r7), h6 = "function" == typeof t6.converter ? { fromAttribute: t6.converter } : void 0 !== (null === (s8 = t6.converter) || void 0 === s8 ? void 0 : s8.fromAttribute) ? t6.converter : n2;
        this._$El = r7, this[r7] = h6.fromAttribute(i6, t6.type), this._$El = null;
      }
    }
    requestUpdate(t5, i6, s8) {
      let e12 = true;
      void 0 !== t5 && (((s8 = s8 || this.constructor.getPropertyOptions(t5)).hasChanged || a)(this[t5], i6) ? (this._$AL.has(t5) || this._$AL.set(t5, i6), true === s8.reflect && this._$El !== t5 && (void 0 === this._$EC && (this._$EC = /* @__PURE__ */ new Map()), this._$EC.set(t5, s8))) : e12 = false), !this.isUpdatePending && e12 && (this._$E_ = this._$Ej());
    }
    async _$Ej() {
      this.isUpdatePending = true;
      try {
        await this._$E_;
      } catch (t6) {
        Promise.reject(t6);
      }
      const t5 = this.scheduleUpdate();
      return null != t5 && await t5, !this.isUpdatePending;
    }
    scheduleUpdate() {
      return this.performUpdate();
    }
    performUpdate() {
      var t5;
      if (!this.isUpdatePending)
        return;
      this.hasUpdated, this._$Ei && (this._$Ei.forEach((t6, i7) => this[i7] = t6), this._$Ei = void 0);
      let i6 = false;
      const s8 = this._$AL;
      try {
        i6 = this.shouldUpdate(s8), i6 ? (this.willUpdate(s8), null === (t5 = this._$ES) || void 0 === t5 || t5.forEach((t6) => {
          var i7;
          return null === (i7 = t6.hostUpdate) || void 0 === i7 ? void 0 : i7.call(t6);
        }), this.update(s8)) : this._$Ek();
      } catch (t6) {
        throw i6 = false, this._$Ek(), t6;
      }
      i6 && this._$AE(s8);
    }
    willUpdate(t5) {
    }
    _$AE(t5) {
      var i6;
      null === (i6 = this._$ES) || void 0 === i6 || i6.forEach((t6) => {
        var i7;
        return null === (i7 = t6.hostUpdated) || void 0 === i7 ? void 0 : i7.call(t6);
      }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t5)), this.updated(t5);
    }
    _$Ek() {
      this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
    }
    get updateComplete() {
      return this.getUpdateComplete();
    }
    getUpdateComplete() {
      return this._$E_;
    }
    shouldUpdate(t5) {
      return true;
    }
    update(t5) {
      void 0 !== this._$EC && (this._$EC.forEach((t6, i6) => this._$EO(i6, this[i6], t6)), this._$EC = void 0), this._$Ek();
    }
    updated(t5) {
    }
    firstUpdated(t5) {
    }
  };
  d.finalized = true, d.elementProperties = /* @__PURE__ */ new Map(), d.elementStyles = [], d.shadowRootOptions = { mode: "open" }, null == o2 || o2({ ReactiveElement: d }), (null !== (s2 = e2.reactiveElementVersions) && void 0 !== s2 ? s2 : e2.reactiveElementVersions = []).push("1.4.1");

  // ../../node_modules/lit-html/lit-html.js
  var t2;
  var i2 = window;
  var s3 = i2.trustedTypes;
  var e3 = s3 ? s3.createPolicy("lit-html", { createHTML: (t5) => t5 }) : void 0;
  var o3 = `lit$${(Math.random() + "").slice(9)}$`;
  var n3 = "?" + o3;
  var l2 = `<${n3}>`;
  var h2 = document;
  var r3 = (t5 = "") => h2.createComment(t5);
  var d2 = (t5) => null === t5 || "object" != typeof t5 && "function" != typeof t5;
  var u = Array.isArray;
  var c2 = (t5) => u(t5) || "function" == typeof (null == t5 ? void 0 : t5[Symbol.iterator]);
  var v = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  var a2 = /-->/g;
  var f = />/g;
  var _ = RegExp(`>|[ 	
\f\r](?:([^\\s"'>=/]+)([ 	
\f\r]*=[ 	
\f\r]*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
  var m = /'/g;
  var p = /"/g;
  var $ = /^(?:script|style|textarea|title)$/i;
  var g = (t5) => (i6, ...s8) => ({ _$litType$: t5, strings: i6, values: s8 });
  var y = g(1);
  var w = g(2);
  var x = Symbol.for("lit-noChange");
  var b = Symbol.for("lit-nothing");
  var T = /* @__PURE__ */ new WeakMap();
  var A = h2.createTreeWalker(h2, 129, null, false);
  var E = (t5, i6) => {
    const s8 = t5.length - 1, n9 = [];
    let h6, r7 = 2 === i6 ? "<svg>" : "", d3 = v;
    for (let i7 = 0; i7 < s8; i7++) {
      const s9 = t5[i7];
      let e12, u5, c6 = -1, g2 = 0;
      for (; g2 < s9.length && (d3.lastIndex = g2, u5 = d3.exec(s9), null !== u5); )
        g2 = d3.lastIndex, d3 === v ? "!--" === u5[1] ? d3 = a2 : void 0 !== u5[1] ? d3 = f : void 0 !== u5[2] ? ($.test(u5[2]) && (h6 = RegExp("</" + u5[2], "g")), d3 = _) : void 0 !== u5[3] && (d3 = _) : d3 === _ ? ">" === u5[0] ? (d3 = null != h6 ? h6 : v, c6 = -1) : void 0 === u5[1] ? c6 = -2 : (c6 = d3.lastIndex - u5[2].length, e12 = u5[1], d3 = void 0 === u5[3] ? _ : '"' === u5[3] ? p : m) : d3 === p || d3 === m ? d3 = _ : d3 === a2 || d3 === f ? d3 = v : (d3 = _, h6 = void 0);
      const y2 = d3 === _ && t5[i7 + 1].startsWith("/>") ? " " : "";
      r7 += d3 === v ? s9 + l2 : c6 >= 0 ? (n9.push(e12), s9.slice(0, c6) + "$lit$" + s9.slice(c6) + o3 + y2) : s9 + o3 + (-2 === c6 ? (n9.push(void 0), i7) : y2);
    }
    const u4 = r7 + (t5[s8] || "<?>") + (2 === i6 ? "</svg>" : "");
    if (!Array.isArray(t5) || !t5.hasOwnProperty("raw"))
      throw Error("invalid template strings array");
    return [void 0 !== e3 ? e3.createHTML(u4) : u4, n9];
  };
  var C = class {
    constructor({ strings: t5, _$litType$: i6 }, e12) {
      let l9;
      this.parts = [];
      let h6 = 0, d3 = 0;
      const u4 = t5.length - 1, c6 = this.parts, [v2, a4] = E(t5, i6);
      if (this.el = C.createElement(v2, e12), A.currentNode = this.el.content, 2 === i6) {
        const t6 = this.el.content, i7 = t6.firstChild;
        i7.remove(), t6.append(...i7.childNodes);
      }
      for (; null !== (l9 = A.nextNode()) && c6.length < u4; ) {
        if (1 === l9.nodeType) {
          if (l9.hasAttributes()) {
            const t6 = [];
            for (const i7 of l9.getAttributeNames())
              if (i7.endsWith("$lit$") || i7.startsWith(o3)) {
                const s8 = a4[d3++];
                if (t6.push(i7), void 0 !== s8) {
                  const t7 = l9.getAttribute(s8.toLowerCase() + "$lit$").split(o3), i8 = /([.?@])?(.*)/.exec(s8);
                  c6.push({ type: 1, index: h6, name: i8[2], strings: t7, ctor: "." === i8[1] ? M : "?" === i8[1] ? k : "@" === i8[1] ? H : S2 });
                } else
                  c6.push({ type: 6, index: h6 });
              }
            for (const i7 of t6)
              l9.removeAttribute(i7);
          }
          if ($.test(l9.tagName)) {
            const t6 = l9.textContent.split(o3), i7 = t6.length - 1;
            if (i7 > 0) {
              l9.textContent = s3 ? s3.emptyScript : "";
              for (let s8 = 0; s8 < i7; s8++)
                l9.append(t6[s8], r3()), A.nextNode(), c6.push({ type: 2, index: ++h6 });
              l9.append(t6[i7], r3());
            }
          }
        } else if (8 === l9.nodeType)
          if (l9.data === n3)
            c6.push({ type: 2, index: h6 });
          else {
            let t6 = -1;
            for (; -1 !== (t6 = l9.data.indexOf(o3, t6 + 1)); )
              c6.push({ type: 7, index: h6 }), t6 += o3.length - 1;
          }
        h6++;
      }
    }
    static createElement(t5, i6) {
      const s8 = h2.createElement("template");
      return s8.innerHTML = t5, s8;
    }
  };
  function P(t5, i6, s8 = t5, e12) {
    var o11, n9, l9, h6;
    if (i6 === x)
      return i6;
    let r7 = void 0 !== e12 ? null === (o11 = s8._$Co) || void 0 === o11 ? void 0 : o11[e12] : s8._$Cl;
    const u4 = d2(i6) ? void 0 : i6._$litDirective$;
    return (null == r7 ? void 0 : r7.constructor) !== u4 && (null === (n9 = null == r7 ? void 0 : r7._$AO) || void 0 === n9 || n9.call(r7, false), void 0 === u4 ? r7 = void 0 : (r7 = new u4(t5), r7._$AT(t5, s8, e12)), void 0 !== e12 ? (null !== (l9 = (h6 = s8)._$Co) && void 0 !== l9 ? l9 : h6._$Co = [])[e12] = r7 : s8._$Cl = r7), void 0 !== r7 && (i6 = P(t5, r7._$AS(t5, i6.values), r7, e12)), i6;
  }
  var V = class {
    constructor(t5, i6) {
      this.u = [], this._$AN = void 0, this._$AD = t5, this._$AM = i6;
    }
    get parentNode() {
      return this._$AM.parentNode;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    v(t5) {
      var i6;
      const { el: { content: s8 }, parts: e12 } = this._$AD, o11 = (null !== (i6 = null == t5 ? void 0 : t5.creationScope) && void 0 !== i6 ? i6 : h2).importNode(s8, true);
      A.currentNode = o11;
      let n9 = A.nextNode(), l9 = 0, r7 = 0, d3 = e12[0];
      for (; void 0 !== d3; ) {
        if (l9 === d3.index) {
          let i7;
          2 === d3.type ? i7 = new N(n9, n9.nextSibling, this, t5) : 1 === d3.type ? i7 = new d3.ctor(n9, d3.name, d3.strings, this, t5) : 6 === d3.type && (i7 = new I(n9, this, t5)), this.u.push(i7), d3 = e12[++r7];
        }
        l9 !== (null == d3 ? void 0 : d3.index) && (n9 = A.nextNode(), l9++);
      }
      return o11;
    }
    p(t5) {
      let i6 = 0;
      for (const s8 of this.u)
        void 0 !== s8 && (void 0 !== s8.strings ? (s8._$AI(t5, s8, i6), i6 += s8.strings.length - 2) : s8._$AI(t5[i6])), i6++;
    }
  };
  var N = class {
    constructor(t5, i6, s8, e12) {
      var o11;
      this.type = 2, this._$AH = b, this._$AN = void 0, this._$AA = t5, this._$AB = i6, this._$AM = s8, this.options = e12, this._$Cm = null === (o11 = null == e12 ? void 0 : e12.isConnected) || void 0 === o11 || o11;
    }
    get _$AU() {
      var t5, i6;
      return null !== (i6 = null === (t5 = this._$AM) || void 0 === t5 ? void 0 : t5._$AU) && void 0 !== i6 ? i6 : this._$Cm;
    }
    get parentNode() {
      let t5 = this._$AA.parentNode;
      const i6 = this._$AM;
      return void 0 !== i6 && 11 === t5.nodeType && (t5 = i6.parentNode), t5;
    }
    get startNode() {
      return this._$AA;
    }
    get endNode() {
      return this._$AB;
    }
    _$AI(t5, i6 = this) {
      t5 = P(this, t5, i6), d2(t5) ? t5 === b || null == t5 || "" === t5 ? (this._$AH !== b && this._$AR(), this._$AH = b) : t5 !== this._$AH && t5 !== x && this.g(t5) : void 0 !== t5._$litType$ ? this.$(t5) : void 0 !== t5.nodeType ? this.T(t5) : c2(t5) ? this.k(t5) : this.g(t5);
    }
    O(t5, i6 = this._$AB) {
      return this._$AA.parentNode.insertBefore(t5, i6);
    }
    T(t5) {
      this._$AH !== t5 && (this._$AR(), this._$AH = this.O(t5));
    }
    g(t5) {
      this._$AH !== b && d2(this._$AH) ? this._$AA.nextSibling.data = t5 : this.T(h2.createTextNode(t5)), this._$AH = t5;
    }
    $(t5) {
      var i6;
      const { values: s8, _$litType$: e12 } = t5, o11 = "number" == typeof e12 ? this._$AC(t5) : (void 0 === e12.el && (e12.el = C.createElement(e12.h, this.options)), e12);
      if ((null === (i6 = this._$AH) || void 0 === i6 ? void 0 : i6._$AD) === o11)
        this._$AH.p(s8);
      else {
        const t6 = new V(o11, this), i7 = t6.v(this.options);
        t6.p(s8), this.T(i7), this._$AH = t6;
      }
    }
    _$AC(t5) {
      let i6 = T.get(t5.strings);
      return void 0 === i6 && T.set(t5.strings, i6 = new C(t5)), i6;
    }
    k(t5) {
      u(this._$AH) || (this._$AH = [], this._$AR());
      const i6 = this._$AH;
      let s8, e12 = 0;
      for (const o11 of t5)
        e12 === i6.length ? i6.push(s8 = new N(this.O(r3()), this.O(r3()), this, this.options)) : s8 = i6[e12], s8._$AI(o11), e12++;
      e12 < i6.length && (this._$AR(s8 && s8._$AB.nextSibling, e12), i6.length = e12);
    }
    _$AR(t5 = this._$AA.nextSibling, i6) {
      var s8;
      for (null === (s8 = this._$AP) || void 0 === s8 || s8.call(this, false, true, i6); t5 && t5 !== this._$AB; ) {
        const i7 = t5.nextSibling;
        t5.remove(), t5 = i7;
      }
    }
    setConnected(t5) {
      var i6;
      void 0 === this._$AM && (this._$Cm = t5, null === (i6 = this._$AP) || void 0 === i6 || i6.call(this, t5));
    }
  };
  var S2 = class {
    constructor(t5, i6, s8, e12, o11) {
      this.type = 1, this._$AH = b, this._$AN = void 0, this.element = t5, this.name = i6, this._$AM = e12, this.options = o11, s8.length > 2 || "" !== s8[0] || "" !== s8[1] ? (this._$AH = Array(s8.length - 1).fill(new String()), this.strings = s8) : this._$AH = b;
    }
    get tagName() {
      return this.element.tagName;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t5, i6 = this, s8, e12) {
      const o11 = this.strings;
      let n9 = false;
      if (void 0 === o11)
        t5 = P(this, t5, i6, 0), n9 = !d2(t5) || t5 !== this._$AH && t5 !== x, n9 && (this._$AH = t5);
      else {
        const e13 = t5;
        let l9, h6;
        for (t5 = o11[0], l9 = 0; l9 < o11.length - 1; l9++)
          h6 = P(this, e13[s8 + l9], i6, l9), h6 === x && (h6 = this._$AH[l9]), n9 || (n9 = !d2(h6) || h6 !== this._$AH[l9]), h6 === b ? t5 = b : t5 !== b && (t5 += (null != h6 ? h6 : "") + o11[l9 + 1]), this._$AH[l9] = h6;
      }
      n9 && !e12 && this.j(t5);
    }
    j(t5) {
      t5 === b ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t5 ? t5 : "");
    }
  };
  var M = class extends S2 {
    constructor() {
      super(...arguments), this.type = 3;
    }
    j(t5) {
      this.element[this.name] = t5 === b ? void 0 : t5;
    }
  };
  var R = s3 ? s3.emptyScript : "";
  var k = class extends S2 {
    constructor() {
      super(...arguments), this.type = 4;
    }
    j(t5) {
      t5 && t5 !== b ? this.element.setAttribute(this.name, R) : this.element.removeAttribute(this.name);
    }
  };
  var H = class extends S2 {
    constructor(t5, i6, s8, e12, o11) {
      super(t5, i6, s8, e12, o11), this.type = 5;
    }
    _$AI(t5, i6 = this) {
      var s8;
      if ((t5 = null !== (s8 = P(this, t5, i6, 0)) && void 0 !== s8 ? s8 : b) === x)
        return;
      const e12 = this._$AH, o11 = t5 === b && e12 !== b || t5.capture !== e12.capture || t5.once !== e12.once || t5.passive !== e12.passive, n9 = t5 !== b && (e12 === b || o11);
      o11 && this.element.removeEventListener(this.name, this, e12), n9 && this.element.addEventListener(this.name, this, t5), this._$AH = t5;
    }
    handleEvent(t5) {
      var i6, s8;
      "function" == typeof this._$AH ? this._$AH.call(null !== (s8 = null === (i6 = this.options) || void 0 === i6 ? void 0 : i6.host) && void 0 !== s8 ? s8 : this.element, t5) : this._$AH.handleEvent(t5);
    }
  };
  var I = class {
    constructor(t5, i6, s8) {
      this.element = t5, this.type = 6, this._$AN = void 0, this._$AM = i6, this.options = s8;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t5) {
      P(this, t5);
    }
  };
  var L = { P: "$lit$", A: o3, M: n3, C: 1, L: E, R: V, D: c2, V: P, I: N, H: S2, N: k, U: H, B: M, F: I };
  var z = i2.litHtmlPolyfillSupport;
  null == z || z(C, N), (null !== (t2 = i2.litHtmlVersions) && void 0 !== t2 ? t2 : i2.litHtmlVersions = []).push("2.4.0");
  var Z = (t5, i6, s8) => {
    var e12, o11;
    const n9 = null !== (e12 = null == s8 ? void 0 : s8.renderBefore) && void 0 !== e12 ? e12 : i6;
    let l9 = n9._$litPart$;
    if (void 0 === l9) {
      const t6 = null !== (o11 = null == s8 ? void 0 : s8.renderBefore) && void 0 !== o11 ? o11 : null;
      n9._$litPart$ = l9 = new N(i6.insertBefore(r3(), t6), t6, void 0, null != s8 ? s8 : {});
    }
    return l9._$AI(t5), l9;
  };

  // ../../node_modules/lit-element/lit-element.js
  var l3;
  var o4;
  var s4 = class extends d {
    constructor() {
      super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
    }
    createRenderRoot() {
      var t5, e12;
      const i6 = super.createRenderRoot();
      return null !== (t5 = (e12 = this.renderOptions).renderBefore) && void 0 !== t5 || (e12.renderBefore = i6.firstChild), i6;
    }
    update(t5) {
      const i6 = this.render();
      this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t5), this._$Do = Z(i6, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
      var t5;
      super.connectedCallback(), null === (t5 = this._$Do) || void 0 === t5 || t5.setConnected(true);
    }
    disconnectedCallback() {
      var t5;
      super.disconnectedCallback(), null === (t5 = this._$Do) || void 0 === t5 || t5.setConnected(false);
    }
    render() {
      return x;
    }
  };
  s4.finalized = true, s4._$litElement$ = true, null === (l3 = globalThis.litElementHydrateSupport) || void 0 === l3 || l3.call(globalThis, { LitElement: s4 });
  var n4 = globalThis.litElementPolyfillSupport;
  null == n4 || n4({ LitElement: s4 });
  (null !== (o4 = globalThis.litElementVersions) && void 0 !== o4 ? o4 : globalThis.litElementVersions = []).push("3.2.2");

  // ../../node_modules/@lit/reactive-element/decorators/custom-element.js
  var e4 = (e12) => (n9) => "function" == typeof n9 ? ((e13, n10) => (customElements.define(e13, n10), n10))(e12, n9) : ((e13, n10) => {
    const { kind: t5, elements: s8 } = n10;
    return { kind: t5, elements: s8, finisher(n11) {
      customElements.define(e13, n11);
    } };
  })(e12, n9);

  // ../../node_modules/@lit/reactive-element/decorators/property.js
  var i3 = (i6, e12) => "method" === e12.kind && e12.descriptor && !("value" in e12.descriptor) ? { ...e12, finisher(n9) {
    n9.createProperty(e12.key, i6);
  } } : { kind: "field", key: Symbol(), placement: "own", descriptor: {}, originalKey: e12.key, initializer() {
    "function" == typeof e12.initializer && (this[e12.key] = e12.initializer.call(this));
  }, finisher(n9) {
    n9.createProperty(e12.key, i6);
  } };
  function e5(e12) {
    return (n9, t5) => void 0 !== t5 ? ((i6, e13, n10) => {
      e13.constructor.createProperty(n10, i6);
    })(e12, n9, t5) : i3(e12, n9);
  }

  // ../../node_modules/@lit/reactive-element/decorators/state.js
  function t3(t5) {
    return e5({ ...t5, state: true });
  }

  // ../../node_modules/@lit/reactive-element/decorators/query-assigned-elements.js
  var n5;
  var e6 = null != (null === (n5 = window.HTMLSlotElement) || void 0 === n5 ? void 0 : n5.prototype.assignedElements) ? (o11, n9) => o11.assignedElements(n9) : (o11, n9) => o11.assignedNodes(n9).filter((o12) => o12.nodeType === Node.ELEMENT_NODE);

  // ../../node_modules/lit-html/directive.js
  var t4 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
  var e7 = (t5) => (...e12) => ({ _$litDirective$: t5, values: e12 });
  var i4 = class {
    constructor(t5) {
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AT(t5, e12, i6) {
      this._$Ct = t5, this._$AM = e12, this._$Ci = i6;
    }
    _$AS(t5, e12) {
      return this.update(t5, e12);
    }
    update(t5, e12) {
      return this.render(...e12);
    }
  };

  // ../../node_modules/lit-html/directive-helpers.js
  var { I: l5 } = L;
  var e8 = (o11) => void 0 === o11.strings;
  var c3 = () => document.createComment("");
  var r4 = (o11, t5, i6) => {
    var n9;
    const d3 = o11._$AA.parentNode, v2 = void 0 === t5 ? o11._$AB : t5._$AA;
    if (void 0 === i6) {
      const t6 = d3.insertBefore(c3(), v2), n10 = d3.insertBefore(c3(), v2);
      i6 = new l5(t6, n10, o11, o11.options);
    } else {
      const l9 = i6._$AB.nextSibling, t6 = i6._$AM, e12 = t6 !== o11;
      if (e12) {
        let l10;
        null === (n9 = i6._$AQ) || void 0 === n9 || n9.call(i6, o11), i6._$AM = o11, void 0 !== i6._$AP && (l10 = o11._$AU) !== t6._$AU && i6._$AP(l10);
      }
      if (l9 !== v2 || e12) {
        let o12 = i6._$AA;
        for (; o12 !== l9; ) {
          const l10 = o12.nextSibling;
          d3.insertBefore(o12, v2), o12 = l10;
        }
      }
    }
    return i6;
  };
  var u2 = (o11, l9, t5 = o11) => (o11._$AI(l9, t5), o11);
  var f2 = {};
  var s5 = (o11, l9 = f2) => o11._$AH = l9;
  var m2 = (o11) => o11._$AH;
  var p2 = (o11) => {
    var l9;
    null === (l9 = o11._$AP) || void 0 === l9 || l9.call(o11, false, true);
    let t5 = o11._$AA;
    const i6 = o11._$AB.nextSibling;
    for (; t5 !== i6; ) {
      const o12 = t5.nextSibling;
      t5.remove(), t5 = o12;
    }
  };

  // ../../node_modules/lit-html/directives/repeat.js
  var u3 = (e12, s8, t5) => {
    const r7 = /* @__PURE__ */ new Map();
    for (let l9 = s8; l9 <= t5; l9++)
      r7.set(e12[l9], l9);
    return r7;
  };
  var c4 = e7(class extends i4 {
    constructor(e12) {
      if (super(e12), e12.type !== t4.CHILD)
        throw Error("repeat() can only be used in text expressions");
    }
    ht(e12, s8, t5) {
      let r7;
      void 0 === t5 ? t5 = s8 : void 0 !== s8 && (r7 = s8);
      const l9 = [], o11 = [];
      let i6 = 0;
      for (const s9 of e12)
        l9[i6] = r7 ? r7(s9, i6) : i6, o11[i6] = t5(s9, i6), i6++;
      return { values: o11, keys: l9 };
    }
    render(e12, s8, t5) {
      return this.ht(e12, s8, t5).values;
    }
    update(s8, [t5, r7, c6]) {
      var d3;
      const a4 = m2(s8), { values: p3, keys: v2 } = this.ht(t5, r7, c6);
      if (!Array.isArray(a4))
        return this.ut = v2, p3;
      const h6 = null !== (d3 = this.ut) && void 0 !== d3 ? d3 : this.ut = [], m3 = [];
      let y2, x2, j = 0, k2 = a4.length - 1, w2 = 0, A2 = p3.length - 1;
      for (; j <= k2 && w2 <= A2; )
        if (null === a4[j])
          j++;
        else if (null === a4[k2])
          k2--;
        else if (h6[j] === v2[w2])
          m3[w2] = u2(a4[j], p3[w2]), j++, w2++;
        else if (h6[k2] === v2[A2])
          m3[A2] = u2(a4[k2], p3[A2]), k2--, A2--;
        else if (h6[j] === v2[A2])
          m3[A2] = u2(a4[j], p3[A2]), r4(s8, m3[A2 + 1], a4[j]), j++, A2--;
        else if (h6[k2] === v2[w2])
          m3[w2] = u2(a4[k2], p3[w2]), r4(s8, a4[j], a4[k2]), k2--, w2++;
        else if (void 0 === y2 && (y2 = u3(v2, w2, A2), x2 = u3(h6, j, k2)), y2.has(h6[j]))
          if (y2.has(h6[k2])) {
            const e12 = x2.get(v2[w2]), t6 = void 0 !== e12 ? a4[e12] : null;
            if (null === t6) {
              const e13 = r4(s8, a4[j]);
              u2(e13, p3[w2]), m3[w2] = e13;
            } else
              m3[w2] = u2(t6, p3[w2]), r4(s8, a4[j], t6), a4[e12] = null;
            w2++;
          } else
            p2(a4[k2]), k2--;
        else
          p2(a4[j]), j++;
      for (; w2 <= A2; ) {
        const e12 = r4(s8, m3[A2 + 1]);
        u2(e12, p3[w2]), m3[w2++] = e12;
      }
      for (; j <= k2; ) {
        const e12 = a4[j++];
        null !== e12 && p2(e12);
      }
      return this.ut = v2, s5(s8, m3), x;
    }
  });

  // ../../node_modules/lit-html/directives/live.js
  var l6 = e7(class extends i4 {
    constructor(r7) {
      if (super(r7), r7.type !== t4.PROPERTY && r7.type !== t4.ATTRIBUTE && r7.type !== t4.BOOLEAN_ATTRIBUTE)
        throw Error("The `live` directive is not allowed on child or event bindings");
      if (!e8(r7))
        throw Error("`live` bindings can only contain a single expression");
    }
    render(r7) {
      return r7;
    }
    update(i6, [t5]) {
      if (t5 === x || t5 === b)
        return t5;
      const o11 = i6.element, l9 = i6.name;
      if (i6.type === t4.PROPERTY) {
        if (t5 === o11[l9])
          return x;
      } else if (i6.type === t4.BOOLEAN_ATTRIBUTE) {
        if (!!t5 === o11.hasAttribute(l9))
          return x;
      } else if (i6.type === t4.ATTRIBUTE && o11.getAttribute(l9) === t5 + "")
        return x;
      return s5(i6), t5;
    }
  });

  // ../../node_modules/lit-html/async-directive.js
  var s6 = (i6, t5) => {
    var e12, o11;
    const r7 = i6._$AN;
    if (void 0 === r7)
      return false;
    for (const i7 of r7)
      null === (o11 = (e12 = i7)._$AO) || void 0 === o11 || o11.call(e12, t5, false), s6(i7, t5);
    return true;
  };
  var o6 = (i6) => {
    let t5, e12;
    do {
      if (void 0 === (t5 = i6._$AM))
        break;
      e12 = t5._$AN, e12.delete(i6), i6 = t5;
    } while (0 === (null == e12 ? void 0 : e12.size));
  };
  var r5 = (i6) => {
    for (let t5; t5 = i6._$AM; i6 = t5) {
      let e12 = t5._$AN;
      if (void 0 === e12)
        t5._$AN = e12 = /* @__PURE__ */ new Set();
      else if (e12.has(i6))
        break;
      e12.add(i6), l7(t5);
    }
  };
  function n6(i6) {
    void 0 !== this._$AN ? (o6(this), this._$AM = i6, r5(this)) : this._$AM = i6;
  }
  function h3(i6, t5 = false, e12 = 0) {
    const r7 = this._$AH, n9 = this._$AN;
    if (void 0 !== n9 && 0 !== n9.size)
      if (t5)
        if (Array.isArray(r7))
          for (let i7 = e12; i7 < r7.length; i7++)
            s6(r7[i7], false), o6(r7[i7]);
        else
          null != r7 && (s6(r7, false), o6(r7));
      else
        s6(this, i6);
  }
  var l7 = (i6) => {
    var t5, s8, o11, r7;
    i6.type == t4.CHILD && (null !== (t5 = (o11 = i6)._$AP) && void 0 !== t5 || (o11._$AP = h3), null !== (s8 = (r7 = i6)._$AQ) && void 0 !== s8 || (r7._$AQ = n6));
  };
  var c5 = class extends i4 {
    constructor() {
      super(...arguments), this._$AN = void 0;
    }
    _$AT(i6, t5, e12) {
      super._$AT(i6, t5, e12), r5(this), this.isConnected = i6._$AU;
    }
    _$AO(i6, t5 = true) {
      var e12, r7;
      i6 !== this.isConnected && (this.isConnected = i6, i6 ? null === (e12 = this.reconnected) || void 0 === e12 || e12.call(this) : null === (r7 = this.disconnected) || void 0 === r7 || r7.call(this)), t5 && (s6(this, i6), o6(this));
    }
    setValue(t5) {
      if (e8(this._$Ct))
        this._$Ct._$AI(t5, this);
      else {
        const i6 = [...this._$Ct._$AH];
        i6[this._$Ci] = t5, this._$Ct._$AI(i6, this, 0);
      }
    }
    disconnected() {
    }
    reconnected() {
    }
  };

  // ../../node_modules/lit-html/directives/ref.js
  var e9 = () => new o7();
  var o7 = class {
  };
  var h4 = /* @__PURE__ */ new WeakMap();
  var n7 = e7(class extends c5 {
    render(t5) {
      return b;
    }
    update(t5, [s8]) {
      var e12;
      const o11 = s8 !== this.Y;
      return o11 && void 0 !== this.Y && this.rt(void 0), (o11 || this.lt !== this.ct) && (this.Y = s8, this.dt = null === (e12 = t5.options) || void 0 === e12 ? void 0 : e12.host, this.rt(this.ct = t5.element)), b;
    }
    rt(i6) {
      var t5;
      if ("function" == typeof this.Y) {
        const s8 = null !== (t5 = this.dt) && void 0 !== t5 ? t5 : globalThis;
        let e12 = h4.get(s8);
        void 0 === e12 && (e12 = /* @__PURE__ */ new WeakMap(), h4.set(s8, e12)), void 0 !== e12.get(this.Y) && this.Y.call(this.dt, void 0), e12.set(this.Y, i6), void 0 !== i6 && this.Y.call(this.dt, i6);
      } else
        this.Y.value = i6;
    }
    get lt() {
      var i6, t5, s8;
      return "function" == typeof this.Y ? null === (t5 = h4.get(null !== (i6 = this.dt) && void 0 !== i6 ? i6 : globalThis)) || void 0 === t5 ? void 0 : t5.get(this.Y) : null === (s8 = this.Y) || void 0 === s8 ? void 0 : s8.value;
    }
    disconnected() {
      this.lt === this.ct && this.rt(void 0);
    }
    reconnected() {
      this.rt(this.ct);
    }
  });

  // ../../node_modules/lit-html/directives/class-map.js
  var o8 = e7(class extends i4 {
    constructor(t5) {
      var i6;
      if (super(t5), t5.type !== t4.ATTRIBUTE || "class" !== t5.name || (null === (i6 = t5.strings) || void 0 === i6 ? void 0 : i6.length) > 2)
        throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
    }
    render(t5) {
      return " " + Object.keys(t5).filter((i6) => t5[i6]).join(" ") + " ";
    }
    update(i6, [s8]) {
      var r7, o11;
      if (void 0 === this.nt) {
        this.nt = /* @__PURE__ */ new Set(), void 0 !== i6.strings && (this.st = new Set(i6.strings.join(" ").split(/\s/).filter((t5) => "" !== t5)));
        for (const t5 in s8)
          s8[t5] && !(null === (r7 = this.st) || void 0 === r7 ? void 0 : r7.has(t5)) && this.nt.add(t5);
        return this.render(s8);
      }
      const e12 = i6.element.classList;
      this.nt.forEach((t5) => {
        t5 in s8 || (e12.remove(t5), this.nt.delete(t5));
      });
      for (const t5 in s8) {
        const i7 = !!s8[t5];
        i7 === this.nt.has(t5) || (null === (o11 = this.st) || void 0 === o11 ? void 0 : o11.has(t5)) || (i7 ? (e12.add(t5), this.nt.add(t5)) : (e12.remove(t5), this.nt.delete(t5)));
      }
      return x;
    }
  });

  // ../../node_modules/hotkeys-js/dist/hotkeys.esm.js
  var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
  function addEvent(object, event, method) {
    if (object.addEventListener) {
      object.addEventListener(event, method, false);
    } else if (object.attachEvent) {
      object.attachEvent("on".concat(event), function() {
        method(window.event);
      });
    }
  }
  function getMods(modifier, key) {
    var mods = key.slice(0, key.length - 1);
    for (var i6 = 0; i6 < mods.length; i6++) {
      mods[i6] = modifier[mods[i6].toLowerCase()];
    }
    return mods;
  }
  function getKeys(key) {
    if (typeof key !== "string")
      key = "";
    key = key.replace(/\s/g, "");
    var keys = key.split(",");
    var index = keys.lastIndexOf("");
    for (; index >= 0; ) {
      keys[index - 1] += ",";
      keys.splice(index, 1);
      index = keys.lastIndexOf("");
    }
    return keys;
  }
  function compareArray(a1, a22) {
    var arr1 = a1.length >= a22.length ? a1 : a22;
    var arr2 = a1.length >= a22.length ? a22 : a1;
    var isIndex = true;
    for (var i6 = 0; i6 < arr1.length; i6++) {
      if (arr2.indexOf(arr1[i6]) === -1)
        isIndex = false;
    }
    return isIndex;
  }
  var _keyMap = {
    backspace: 8,
    tab: 9,
    clear: 12,
    enter: 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    "\u21EA": 20,
    ",": 188,
    ".": 190,
    "/": 191,
    "`": 192,
    "-": isff ? 173 : 189,
    "=": isff ? 61 : 187,
    ";": isff ? 59 : 186,
    "'": 222,
    "[": 219,
    "]": 221,
    "\\": 220
  };
  var _modifier = {
    "\u21E7": 16,
    shift: 16,
    "\u2325": 18,
    alt: 18,
    option: 18,
    "\u2303": 17,
    ctrl: 17,
    control: 17,
    "\u2318": 91,
    cmd: 91,
    command: 91
  };
  var modifierMap = {
    16: "shiftKey",
    18: "altKey",
    17: "ctrlKey",
    91: "metaKey",
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
  };
  var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
  };
  var _handlers = {};
  for (k2 = 1; k2 < 20; k2++) {
    _keyMap["f".concat(k2)] = 111 + k2;
  }
  var k2;
  var _downKeys = [];
  var winListendFocus = false;
  var _scope = "all";
  var elementHasBindEvent = [];
  var code = function code2(x2) {
    return _keyMap[x2.toLowerCase()] || _modifier[x2.toLowerCase()] || x2.toUpperCase().charCodeAt(0);
  };
  function setScope(scope) {
    _scope = scope || "all";
  }
  function getScope() {
    return _scope || "all";
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    var flag = true;
    if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
      flag = false;
    }
    return flag;
  }
  function isPressed(keyCode) {
    if (typeof keyCode === "string") {
      keyCode = code(keyCode);
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }
  function deleteScope(scope, newScope) {
    var handlers;
    var i6;
    if (!scope)
      scope = getScope();
    for (var key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i6 = 0; i6 < handlers.length; ) {
          if (handlers[i6].scope === scope)
            handlers.splice(i6, 1);
          else
            i6++;
        }
      }
    }
    if (getScope() === scope)
      setScope(newScope || "all");
  }
  function clearModifier(event) {
    var key = event.keyCode || event.which || event.charCode;
    var i6 = _downKeys.indexOf(key);
    if (i6 >= 0) {
      _downKeys.splice(i6, 1);
    }
    if (event.key && event.key.toLowerCase() === "meta") {
      _downKeys.splice(0, _downKeys.length);
    }
    if (key === 93 || key === 224)
      key = 91;
    if (key in _mods) {
      _mods[key] = false;
      for (var k2 in _modifier) {
        if (_modifier[k2] === key)
          hotkeys[k2] = false;
      }
    }
  }
  function unbind(keysInfo) {
    if (!keysInfo) {
      Object.keys(_handlers).forEach(function(key) {
        return delete _handlers[key];
      });
    } else if (Array.isArray(keysInfo)) {
      keysInfo.forEach(function(info) {
        if (info.key)
          eachUnbind(info);
      });
    } else if (typeof keysInfo === "object") {
      if (keysInfo.key)
        eachUnbind(keysInfo);
    } else if (typeof keysInfo === "string") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var scope = args[0], method = args[1];
      if (typeof scope === "function") {
        method = scope;
        scope = "";
      }
      eachUnbind({
        key: keysInfo,
        scope,
        method,
        splitKey: "+"
      });
    }
  }
  var eachUnbind = function eachUnbind2(_ref) {
    var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
    var multipleKeys = getKeys(key);
    multipleKeys.forEach(function(originKey) {
      var unbindKeys = originKey.split(splitKey);
      var len = unbindKeys.length;
      var lastKey = unbindKeys[len - 1];
      var keyCode = lastKey === "*" ? "*" : code(lastKey);
      if (!_handlers[keyCode])
        return;
      if (!scope)
        scope = getScope();
      var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
      _handlers[keyCode] = _handlers[keyCode].filter(function(record) {
        var isMatchingMethod = method ? record.method === method : true;
        return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));
      });
    });
  };
  function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
      return;
    }
    var modifiersMatch;
    if (handler.scope === scope || handler.scope === "all") {
      modifiersMatch = handler.mods.length > 0;
      for (var y2 in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y2)) {
          if (!_mods[y2] && handler.mods.indexOf(+y2) > -1 || _mods[y2] && handler.mods.indexOf(+y2) === -1) {
            modifiersMatch = false;
          }
        }
      }
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
        if (handler.method(event, handler) === false) {
          if (event.preventDefault)
            event.preventDefault();
          else
            event.returnValue = false;
          if (event.stopPropagation)
            event.stopPropagation();
          if (event.cancelBubble)
            event.cancelBubble = true;
        }
      }
    }
  }
  function dispatch2(event, element) {
    var asterisk = _handlers["*"];
    var key = event.keyCode || event.which || event.charCode;
    if (!hotkeys.filter.call(this, event))
      return;
    if (key === 93 || key === 224)
      key = 91;
    if (_downKeys.indexOf(key) === -1 && key !== 229)
      _downKeys.push(key);
    ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
      var keyNum = modifierMap[keyName];
      if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
        _downKeys.push(keyNum);
      } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
        _downKeys.splice(_downKeys.indexOf(keyNum), 1);
      } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
        if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
          _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
        }
      }
    });
    if (key in _mods) {
      _mods[key] = true;
      for (var k2 in _modifier) {
        if (_modifier[k2] === key)
          hotkeys[k2] = true;
      }
      if (!asterisk)
        return;
    }
    for (var e12 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e12)) {
        _mods[e12] = event[modifierMap[e12]];
      }
    }
    if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
      if (_downKeys.indexOf(17) === -1) {
        _downKeys.push(17);
      }
      if (_downKeys.indexOf(18) === -1) {
        _downKeys.push(18);
      }
      _mods[17] = true;
      _mods[18] = true;
    }
    var scope = getScope();
    if (asterisk) {
      for (var i6 = 0; i6 < asterisk.length; i6++) {
        if (asterisk[i6].scope === scope && (event.type === "keydown" && asterisk[i6].keydown || event.type === "keyup" && asterisk[i6].keyup)) {
          eventHandler(event, asterisk[i6], scope, element);
        }
      }
    }
    if (!(key in _handlers))
      return;
    for (var _i = 0; _i < _handlers[key].length; _i++) {
      if (event.type === "keydown" && _handlers[key][_i].keydown || event.type === "keyup" && _handlers[key][_i].keyup) {
        if (_handlers[key][_i].key) {
          var record = _handlers[key][_i];
          var splitKey = record.splitKey;
          var keyShortcut = record.key.split(splitKey);
          var _downKeysCurrent = [];
          for (var a4 = 0; a4 < keyShortcut.length; a4++) {
            _downKeysCurrent.push(code(keyShortcut[a4]));
          }
          if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
            eventHandler(event, record, scope, element);
          }
        }
      }
    }
  }
  function isElementBind(element) {
    return elementHasBindEvent.indexOf(element) > -1;
  }
  function hotkeys(key, option, method) {
    _downKeys = [];
    var keys = getKeys(key);
    var mods = [];
    var scope = "all";
    var element = document;
    var i6 = 0;
    var keyup = false;
    var keydown = true;
    var splitKey = "+";
    if (method === void 0 && typeof option === "function") {
      method = option;
    }
    if (Object.prototype.toString.call(option) === "[object Object]") {
      if (option.scope)
        scope = option.scope;
      if (option.element)
        element = option.element;
      if (option.keyup)
        keyup = option.keyup;
      if (option.keydown !== void 0)
        keydown = option.keydown;
      if (typeof option.splitKey === "string")
        splitKey = option.splitKey;
    }
    if (typeof option === "string")
      scope = option;
    for (; i6 < keys.length; i6++) {
      key = keys[i6].split(splitKey);
      mods = [];
      if (key.length > 1)
        mods = getMods(_modifier, key);
      key = key[key.length - 1];
      key = key === "*" ? "*" : code(key);
      if (!(key in _handlers))
        _handlers[key] = [];
      _handlers[key].push({
        keyup,
        keydown,
        scope,
        mods,
        shortcut: keys[i6],
        method,
        key: keys[i6],
        splitKey,
        element
      });
    }
    if (typeof element !== "undefined" && !isElementBind(element) && window) {
      elementHasBindEvent.push(element);
      addEvent(element, "keydown", function(e12) {
        dispatch2(e12, element);
      });
      if (!winListendFocus) {
        winListendFocus = true;
        addEvent(window, "focus", function() {
          _downKeys = [];
        });
      }
      addEvent(element, "keyup", function(e12) {
        dispatch2(e12, element);
        clearModifier(e12);
      });
    }
  }
  var _api = {
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    isPressed,
    filter,
    unbind
  };
  for (a4 in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a4)) {
      hotkeys[a4] = _api[a4];
    }
  }
  var a4;
  if (typeof window !== "undefined") {
    _hotkeys = window.hotkeys;
    hotkeys.noConflict = function(deep) {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }
  var _hotkeys;

  // ../../node_modules/@gorails/ninja-keys/dist/ninja-header.js
  var __decorate = function(decorators, target, key, desc) {
    var c6 = arguments.length, r7 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r7 = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i6 = decorators.length - 1; i6 >= 0; i6--)
        if (d3 = decorators[i6])
          r7 = (c6 < 3 ? d3(r7) : c6 > 3 ? d3(target, key, r7) : d3(target, key)) || r7;
    return c6 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
  };
  var NinjaHeader = class NinjaHeader2 extends s4 {
    constructor() {
      super(...arguments);
      this.placeholder = "";
      this.hideBreadcrumbs = false;
      this.breadcrumbHome = "Home";
      this.breadcrumbs = [];
      this._inputRef = e9();
    }
    render() {
      let breadcrumbs = "";
      if (!this.hideBreadcrumbs) {
        const itemTemplates = [];
        for (const breadcrumb of this.breadcrumbs) {
          itemTemplates.push(y`<button
            tabindex="-1"
            @click=${() => this.selectParent(breadcrumb)}
            class="breadcrumb"
          >
            ${breadcrumb}
          </button>`);
        }
        breadcrumbs = y`<div class="breadcrumb-list">
        <button
          tabindex="-1"
          @click=${() => this.selectParent()}
          class="breadcrumb"
        >
          ${this.breadcrumbHome}
        </button>
        ${itemTemplates}
      </div>`;
      }
      return y`
      ${breadcrumbs}
      <div part="ninja-input-wrapper" class="search-wrapper">
        <input
          part="ninja-input"
          type="text"
          id="search"
          spellcheck="false"
          autocomplete="off"
          @input="${this._handleInput}"
          ${n7(this._inputRef)}
          placeholder="${this.placeholder}"
          class="search"
        />
      </div>
    `;
    }
    setSearch(value) {
      if (this._inputRef.value) {
        this._inputRef.value.value = value;
      }
    }
    focusSearch() {
      requestAnimationFrame(() => this._inputRef.value.focus());
    }
    _handleInput(event) {
      const input = event.target;
      this.dispatchEvent(new CustomEvent("change", {
        detail: { search: input.value },
        bubbles: false,
        composed: false
      }));
    }
    selectParent(breadcrumb) {
      this.dispatchEvent(new CustomEvent("setParent", {
        detail: { parent: breadcrumb },
        bubbles: true,
        composed: true
      }));
    }
    firstUpdated() {
      this.focusSearch();
    }
    _close() {
      this.dispatchEvent(new CustomEvent("close", { bubbles: true, composed: true }));
    }
  };
  NinjaHeader.styles = i`
    :host {
      flex: 1;
      position: relative;
    }
    .search {
      padding: 1.25em;
      flex-grow: 1;
      flex-shrink: 0;
      margin: 0px;
      border: none;
      appearance: none;
      font-size: 1.125em;
      background: transparent;
      caret-color: var(--ninja-accent-color);
      color: var(--ninja-text-color);
      outline: none;
      font-family: var(--ninja-font-family);
    }
    .search::placeholder {
      color: var(--ninja-placeholder-color);
    }
    .breadcrumb-list {
      padding: 1em 4em 0 1em;
      display: flex;
      flex-direction: row;
      align-items: stretch;
      justify-content: flex-start;
      flex: initial;
    }

    .breadcrumb {
      background: var(--ninja-secondary-background-color);
      text-align: center;
      line-height: 1.2em;
      border-radius: var(--ninja-key-border-radius);
      border: 0;
      cursor: pointer;
      padding: 0.1em 0.5em;
      color: var(--ninja-secondary-text-color);
      margin-right: 0.5em;
      outline: none;
      font-family: var(--ninja-font-family);
    }

    .search-wrapper {
      display: flex;
      border-bottom: var(--ninja-separate-border);
    }
  `;
  __decorate([
    e5()
  ], NinjaHeader.prototype, "placeholder", void 0);
  __decorate([
    e5({ type: Boolean })
  ], NinjaHeader.prototype, "hideBreadcrumbs", void 0);
  __decorate([
    e5()
  ], NinjaHeader.prototype, "breadcrumbHome", void 0);
  __decorate([
    e5({ type: Array })
  ], NinjaHeader.prototype, "breadcrumbs", void 0);
  NinjaHeader = __decorate([
    e4("ninja-header")
  ], NinjaHeader);

  // ../../node_modules/lit-html/directives/unsafe-html.js
  var e10 = class extends i4 {
    constructor(i6) {
      if (super(i6), this.it = b, i6.type !== t4.CHILD)
        throw Error(this.constructor.directiveName + "() can only be used in child bindings");
    }
    render(r7) {
      if (r7 === b || null == r7)
        return this._t = void 0, this.it = r7;
      if (r7 === x)
        return r7;
      if ("string" != typeof r7)
        throw Error(this.constructor.directiveName + "() called with a non-string value");
      if (r7 === this.it)
        return this._t;
      this.it = r7;
      const s8 = [r7];
      return s8.raw = s8, this._t = { _$litType$: this.constructor.resultType, strings: s8, values: [] };
    }
  };
  e10.directiveName = "unsafeHTML", e10.resultType = 1;
  var o9 = e7(e10);

  // ../../node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate: __decorate2,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // ../../node_modules/@material/mwc-icon/mwc-icon-host.css.js
  var styles = i`:host{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}`;

  // ../../node_modules/@material/mwc-icon/mwc-icon.js
  var Icon = class Icon2 extends s4 {
    render() {
      return y`<span><slot></slot></span>`;
    }
  };
  Icon.styles = [styles];
  Icon = __decorate2([
    e4("mwc-icon")
  ], Icon);

  // ../../node_modules/@gorails/ninja-keys/dist/ninja-action.js
  var __decorate3 = function(decorators, target, key, desc) {
    var c6 = arguments.length, r7 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r7 = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i6 = decorators.length - 1; i6 >= 0; i6--)
        if (d3 = decorators[i6])
          r7 = (c6 < 3 ? d3(r7) : c6 > 3 ? d3(target, key, r7) : d3(target, key)) || r7;
    return c6 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
  };
  var NinjaAction = class NinjaAction2 extends s4 {
    constructor() {
      super();
      this.selected = false;
      this.hotKeysJoinedView = false;
      this.addEventListener("click", this.click);
    }
    ensureInView() {
      requestAnimationFrame(() => this.scrollIntoView({ block: "nearest" }));
    }
    click() {
      this.dispatchEvent(new CustomEvent("actionsSelected", {
        detail: this.action,
        bubbles: true,
        composed: true
      }));
    }
    updated(changedProperties) {
      if (changedProperties.has("selected")) {
        if (this.selected) {
          this.ensureInView();
        }
      }
    }
    render() {
      let icon;
      if (this.action.mdIcon) {
        icon = y`<mwc-icon part="ninja-icon" class="ninja-icon">${this.action.mdIcon}</mwc-icon>`;
      } else if (this.action.icon) {
        icon = o9(this.action.icon || "");
      }
      let hotkey;
      if (this.action.hotkey) {
        if (this.hotKeysJoinedView) {
          hotkey = y`<div class="ninja-hotkey">${this.action.hotkey}</div>`;
        } else {
          hotkey = this.action.hotkey.split("+").map((key) => y`<div class="ninja-hotkey">${key}</div>`);
        }
      }
      const classes = {
        selected: this.selected,
        "ninja-action": true
      };
      return y`
      <div class="ninja-action" part="ninja-action ${this.selected ? "ninja-selected" : ""}" class=${o8(classes)}>
        ${icon}
        <div class="ninja-title">${this.action.title}</div>
        ${hotkey}
      </div>
    `;
    }
  };
  NinjaAction.styles = i`
    :host {
      display: flex;
      width: 100%;
    }
    .ninja-action {
      padding: 0.75em 1em;
      display: flex;
      border-left: 2px solid transparent;
      align-items: center;
      justify-content: start;
      outline: none;
      transition: color 0s ease 0s;
      width: 100%;
    }
    .ninja-action.selected {
      cursor: pointer;
      color: var(--ninja-selected-text-color);
      background-color: var(--ninja-selected-background);
      border-left: 2px solid var(--ninja-accent-color);
      outline: none;
    }
    .ninja-action.selected .ninja-icon {
      color: var(--ninja-selected-text-color);
    }
    .ninja-icon {
      font-size: var(--ninja-icon-size);
      max-width: var(--ninja-icon-size);
      max-height: var(--ninja-icon-size);
      margin-right: 1em;
      color: var(--ninja-icon-color);
      margin-right: 1em;
      position: relative;
    }

    .ninja-title {
      flex-shrink: 0.01;
      margin-right: 0.5em;
      flex-grow: 1;
      font-size: 0.8125em;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .ninja-hotkeys {
      margin-left: 0.5em;
      flex-shrink: 0;
      width: min-content;
    }

    .ninja-hotkey {
      background: var(--ninja-secondary-background-color);
      padding: 0.06em 0.25em;
      border-radius: var(--ninja-key-border-radius);
      text-transform: capitalize;
      color: var(--ninja-secondary-text-color);
      font-size: 0.75em;
      margin-left: 0.5em;
    }
  `;
  __decorate3([
    e5({ type: Object })
  ], NinjaAction.prototype, "action", void 0);
  __decorate3([
    e5({ type: Boolean })
  ], NinjaAction.prototype, "selected", void 0);
  __decorate3([
    e5({ type: Boolean })
  ], NinjaAction.prototype, "hotKeysJoinedView", void 0);
  NinjaAction = __decorate3([
    e4("ninja-action")
  ], NinjaAction);

  // ../../node_modules/@gorails/ninja-keys/dist/ninja-footer.js
  var footerHtml = y` <div class="modal-footer" slot="footer">
  <span class="help">
    <svg
      version="1.0"
      class="ninja-examplekey"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 1280 1280"
    >
      <path
        d="M1013 376c0 73.4-.4 113.3-1.1 120.2a159.9 159.9 0 0 1-90.2 127.3c-20 9.6-36.7 14-59.2 15.5-7.1.5-121.9.9-255 1h-242l95.5-95.5 95.5-95.5-38.3-38.2-38.2-38.3-160 160c-88 88-160 160.4-160 161 0 .6 72 73 160 161l160 160 38.2-38.3 38.3-38.2-95.5-95.5-95.5-95.5h251.1c252.9 0 259.8-.1 281.4-3.6 72.1-11.8 136.9-54.1 178.5-116.4 8.6-12.9 22.6-40.5 28-55.4 4.4-12 10.7-36.1 13.1-50.6 1.6-9.6 1.8-21 2.1-132.8l.4-122.2H1013v110z"
      />
    </svg>

    to select
  </span>
  <span class="help">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="ninja-examplekey"
      viewBox="0 0 24 24"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path
        d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
      />
    </svg>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="ninja-examplekey"
      viewBox="0 0 24 24"
    >
      <path d="M0 0h24v24H0V0z" fill="none" />
      <path d="M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z" />
    </svg>
    to navigate
  </span>
  <span class="help">
    <span class="ninja-examplekey esc">esc</span>
    to close
  </span>
  <span class="help">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="ninja-examplekey backspace"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z"
        clip-rule="evenodd"
      />
    </svg>
    move to parent
  </span>
</div>`;

  // ../../node_modules/@gorails/ninja-keys/dist/base-styles.js
  var baseStyles = i`
  :host {
    --ninja-width: 640px;
    --ninja-backdrop-filter: none;
    --ninja-overflow-background: rgba(255, 255, 255, 0.5);
    --ninja-text-color: rgb(60, 65, 73);
    --ninja-font-size: 16px;
    --ninja-top: 20%;

    --ninja-key-border-radius: 0.25em;
    --ninja-accent-color: rgb(110, 94, 210);
    --ninja-secondary-background-color: rgb(239, 241, 244);
    --ninja-secondary-text-color: rgb(107, 111, 118);

    --ninja-selected-background: rgb(248, 249, 251);

    --ninja-icon-color: var(--ninja-secondary-text-color);
    --ninja-icon-size: 1.2em;
    --ninja-separate-border: 1px solid var(--ninja-secondary-background-color);

    --ninja-modal-background: #fff;
    --ninja-modal-shadow: rgb(0 0 0 / 50%) 0px 16px 70px;

    --ninja-actions-height: 300px;
    --ninja-group-text-color: rgb(144, 149, 157);

    --ninja-footer-background: rgba(242, 242, 242, 0.4);

    --ninja-placeholder-color: #8e8e8e;

    font-size: var(--ninja-font-size);

    --ninja-z-index: 1;
  }

  :host(.dark) {
    --ninja-backdrop-filter: none;
    --ninja-overflow-background: rgba(0, 0, 0, 0.7);
    --ninja-text-color: #7d7d7d;

    --ninja-modal-background: rgba(17, 17, 17, 0.85);
    --ninja-accent-color: rgb(110, 94, 210);
    --ninja-secondary-background-color: rgba(51, 51, 51, 0.44);
    --ninja-secondary-text-color: #888;

    --ninja-selected-text-color: #eaeaea;
    --ninja-selected-background: rgba(51, 51, 51, 0.44);

    --ninja-icon-color: var(--ninja-secondary-text-color);
    --ninja-separate-border: 1px solid var(--ninja-secondary-background-color);

    --ninja-modal-shadow: 0 16px 70px rgba(0, 0, 0, 0.2);

    --ninja-group-text-color: rgb(144, 149, 157);

    --ninja-footer-background: rgba(30, 30, 30, 85%);
  }

  .modal {
    display: none;
    position: fixed;
    z-index: var(--ninja-z-index);
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background: var(--ninja-overflow-background);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-backdrop-filter: var(--ninja-backdrop-filter);
    backdrop-filter: var(--ninja-backdrop-filter);
    text-align: left;
    color: var(--ninja-text-color);
    font-family: var(--ninja-font-family);
  }
  .modal.visible {
    display: block;
  }

  .modal-content {
    position: relative;
    top: var(--ninja-top);
    margin: auto;
    padding: 0;
    display: flex;
    flex-direction: column;
    flex-shrink: 1;
    -webkit-box-flex: 1;
    flex-grow: 1;
    min-width: 0px;
    will-change: transform;
    background: var(--ninja-modal-background);
    border-radius: 0.5em;
    box-shadow: var(--ninja-modal-shadow);
    max-width: var(--ninja-width);
    overflow: hidden;
  }

  .bump {
    animation: zoom-in-zoom-out 0.2s ease;
  }

  @keyframes zoom-in-zoom-out {
    0% {
      transform: scale(0.99);
    }
    50% {
      transform: scale(1.01, 1.01);
    }
    100% {
      transform: scale(1, 1);
    }
  }

  .ninja-github {
    color: var(--ninja-keys-text-color);
    font-weight: normal;
    text-decoration: none;
  }

  .actions-list {
    max-height: var(--ninja-actions-height);
    overflow: auto;
    scroll-behavior: smooth;
    position: relative;
    margin: 0;
    padding: 0.5em 0;
    list-style: none;
    scroll-behavior: smooth;
  }

  .group-header {
    height: 1.375em;
    line-height: 1.375em;
    padding-left: 1.25em;
    padding-top: 0.5em;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    font-size: 0.75em;
    line-height: 1em;
    color: var(--ninja-group-text-color);
    margin: 1px 0;
  }

  .modal-footer {
    background: var(--ninja-footer-background);
    padding: 0.5em 1em;
    display: flex;
    /* font-size: 0.75em; */
    border-top: var(--ninja-separate-border);
    color: var(--ninja-secondary-text-color);
  }

  .modal-footer .help {
    display: flex;
    margin-right: 1em;
    align-items: center;
    font-size: 0.75em;
  }

  .ninja-examplekey {
    background: var(--ninja-secondary-background-color);
    padding: 0.06em 0.25em;
    border-radius: var(--ninja-key-border-radius);
    color: var(--ninja-secondary-text-color);
    width: 1em;
    height: 1em;
    margin-right: 0.5em;
    font-size: 1.25em;
    fill: currentColor;
  }
  .ninja-examplekey.esc {
    width: auto;
    height: auto;
    font-size: 1.1em;
  }
  .ninja-examplekey.backspace {
    opacity: 0.7;
  }
`;

  // ../../node_modules/@gorails/ninja-keys/dist/ninja-keys.js
  var __decorate4 = function(decorators, target, key, desc) {
    var c6 = arguments.length, r7 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r7 = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i6 = decorators.length - 1; i6 >= 0; i6--)
        if (d3 = decorators[i6])
          r7 = (c6 < 3 ? d3(r7) : c6 > 3 ? d3(target, key, r7) : d3(target, key)) || r7;
    return c6 > 3 && r7 && Object.defineProperty(target, key, r7), r7;
  };
  var NinjaKeys = class NinjaKeys2 extends s4 {
    constructor() {
      super(...arguments);
      this.placeholder = "Type a command or search...";
      this.disableHotkeys = false;
      this.hideBreadcrumbs = false;
      this.openHotkey = "cmd+k,ctrl+k";
      this.navigationUpHotkey = "up,shift+tab";
      this.navigationDownHotkey = "down,tab";
      this.closeHotkey = "esc";
      this.goBackHotkey = "backspace";
      this.selectHotkey = "enter";
      this.hotKeysJoinedView = false;
      this.noAutoLoadMdIcons = false;
      this.data = [];
      this.visible = false;
      this._bump = true;
      this._actionMatches = [];
      this._search = "";
      this._flatData = [];
      this._headerRef = e9();
    }
    open(options2 = {}) {
      this._bump = true;
      this.visible = true;
      this._headerRef.value.focusSearch();
      if (this._actionMatches.length > 0) {
        this._selected = this._actionMatches[0];
      }
      this.setParent(options2.parent);
    }
    close() {
      this._bump = false;
      this.visible = false;
    }
    setParent(parent) {
      if (!parent) {
        this._currentRoot = void 0;
      } else {
        this._currentRoot = parent;
      }
      this._selected = void 0;
      this._search = "";
      this._headerRef.value.setSearch("");
    }
    get breadcrumbs() {
      var _a;
      const path = [];
      let parentAction = (_a = this._selected) === null || _a === void 0 ? void 0 : _a.parent;
      if (parentAction) {
        path.push(parentAction);
        while (parentAction) {
          const action = this._flatData.find((a4) => a4.id === parentAction);
          if (action === null || action === void 0 ? void 0 : action.parent) {
            path.push(action.parent);
          }
          parentAction = action ? action.parent : void 0;
        }
      }
      return path.reverse();
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.noAutoLoadMdIcons) {
        document.fonts.load("24px Material Icons", "apps").then(() => {
        });
      }
      this._registerInternalHotkeys();
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this._unregisterInternalHotkeys();
    }
    _flattern(members, parent) {
      let children = [];
      if (!members) {
        members = [];
      }
      return members.map((mem) => {
        const alreadyFlatternByUser = mem.children && mem.children.some((value) => {
          return typeof value == "string";
        });
        const m3 = { ...mem, parent: mem.parent || parent };
        if (alreadyFlatternByUser) {
          return m3;
        } else {
          if (m3.children && m3.children.length) {
            parent = mem.id;
            children = [...children, ...m3.children];
          }
          m3.children = m3.children ? m3.children.map((c6) => c6.id) : [];
          return m3;
        }
      }).concat(children.length ? this._flattern(children, parent) : children);
    }
    update(changedProperties) {
      if (changedProperties.has("data") && !this.disableHotkeys) {
        this._flatData = this._flattern(this.data);
        this._flatData.filter((action) => !!action.hotkey).forEach((action) => {
          hotkeys(action.hotkey, (event) => {
            event.preventDefault();
            if (action.handler) {
              action.handler(action);
            }
          });
        });
      }
      super.update(changedProperties);
    }
    _registerInternalHotkeys() {
      if (this.openHotkey) {
        hotkeys(this.openHotkey, (event) => {
          event.preventDefault();
          this.visible ? this.close() : this.open();
        });
      }
      if (this.selectHotkey) {
        hotkeys(this.selectHotkey, (event) => {
          if (!this.visible) {
            return;
          }
          event.preventDefault();
          this._actionSelected(this._actionMatches[this._selectedIndex]);
        });
      }
      if (this.goBackHotkey) {
        hotkeys(this.goBackHotkey, (event) => {
          if (!this.visible) {
            return;
          }
          if (!this._search) {
            event.preventDefault();
            this._goBack();
          }
        });
      }
      if (this.navigationDownHotkey) {
        hotkeys(this.navigationDownHotkey, (event) => {
          if (!this.visible) {
            return;
          }
          event.preventDefault();
          if (this._selectedIndex >= this._actionMatches.length - 1) {
            this._selected = this._actionMatches[0];
          } else {
            this._selected = this._actionMatches[this._selectedIndex + 1];
          }
        });
      }
      if (this.navigationUpHotkey) {
        hotkeys(this.navigationUpHotkey, (event) => {
          if (!this.visible) {
            return;
          }
          event.preventDefault();
          if (this._selectedIndex === 0) {
            this._selected = this._actionMatches[this._actionMatches.length - 1];
          } else {
            this._selected = this._actionMatches[this._selectedIndex - 1];
          }
        });
      }
      if (this.closeHotkey) {
        hotkeys(this.closeHotkey, () => {
          if (!this.visible) {
            return;
          }
          this.close();
        });
      }
    }
    _unregisterInternalHotkeys() {
      if (this.openHotkey) {
        hotkeys.unbind(this.openHotkey);
      }
      if (this.selectHotkey) {
        hotkeys.unbind(this.selectHotkey);
      }
      if (this.goBackHotkey) {
        hotkeys.unbind(this.goBackHotkey);
      }
      if (this.navigationDownHotkey) {
        hotkeys.unbind(this.navigationDownHotkey);
      }
      if (this.navigationUpHotkey) {
        hotkeys.unbind(this.navigationUpHotkey);
      }
      if (this.closeHotkey) {
        hotkeys.unbind(this.closeHotkey);
      }
    }
    _actionFocused(index, $event) {
      this._selected = index;
      $event.target.ensureInView();
    }
    _onTransitionEnd() {
      this._bump = false;
    }
    _goBack() {
      const parent = this.breadcrumbs.length > 1 ? this.breadcrumbs[this.breadcrumbs.length - 2] : void 0;
      this.setParent(parent);
    }
    render() {
      const classes = {
        bump: this._bump,
        "modal-content": true
      };
      const menuClasses = {
        visible: this.visible,
        modal: true
      };
      const actionMatches = this._flatData.filter((action) => {
        var _a;
        const regex = new RegExp(this._search, "gi");
        const matcher = action.title.match(regex) || ((_a = action.keywords) === null || _a === void 0 ? void 0 : _a.match(regex));
        if (!this._currentRoot && this._search) {
          return matcher;
        }
        return action.parent === this._currentRoot && matcher;
      });
      const sections = actionMatches.reduce((entryMap, e12) => entryMap.set(e12.section, [...entryMap.get(e12.section) || [], e12]), /* @__PURE__ */ new Map());
      this._actionMatches = [...sections.values()].flat();
      if (this._actionMatches.length > 0 && this._selectedIndex === -1) {
        this._selected = this._actionMatches[0];
      }
      if (this._actionMatches.length === 0) {
        this._selected = void 0;
      }
      const actionsList = (actions) => y` ${c4(actions, (action) => action.id, (action) => {
        var _a;
        return y`<ninja-action
            exportparts="ninja-action,ninja-selected,ninja-icon"
            .selected=${l6(action.id === ((_a = this._selected) === null || _a === void 0 ? void 0 : _a.id))}
            .hotKeysJoinedView=${this.hotKeysJoinedView}
            @mouseover=${(event) => this._actionFocused(action, event)}
            @actionsSelected=${(event) => this._actionSelected(event.detail)}
            .action=${action}
          ></ninja-action>`;
      })}`;
      const itemTemplates = [];
      sections.forEach((actions, section) => {
        const header = section ? y`<div class="group-header">${section}</div>` : void 0;
        itemTemplates.push(y`${header}${actionsList(actions)}`);
      });
      return y`
      <div @click=${this._overlayClick} class=${o8(menuClasses)}>
        <div class=${o8(classes)} @animationend=${this._onTransitionEnd}>
          <ninja-header
            exportparts="ninja-input,ninja-input-wrapper"
            ${n7(this._headerRef)}
            .placeholder=${this.placeholder}
            .hideBreadcrumbs=${this.hideBreadcrumbs}
            .breadcrumbs=${this.breadcrumbs}
            @change=${this._handleInput}
            @setParent=${(event) => this.setParent(event.detail.parent)}
            @close=${this.close}
          >
          </ninja-header>
          <div class="modal-body">
            <div class="actions-list" part="actions-list">${itemTemplates}</div>
          </div>
          <slot name="footer"> ${footerHtml} </slot>
        </div>
      </div>
    `;
    }
    get _selectedIndex() {
      if (!this._selected) {
        return -1;
      }
      return this._actionMatches.indexOf(this._selected);
    }
    _actionSelected(action) {
      var _a;
      this.dispatchEvent(new CustomEvent("selected", {
        detail: { search: this._search, action },
        bubbles: true,
        composed: true
      }));
      if (!action) {
        return;
      }
      if (action.children && ((_a = action.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        this._currentRoot = action.id;
        this._search = "";
      }
      this._headerRef.value.setSearch("");
      this._headerRef.value.focusSearch();
      if (action.handler) {
        const result = action.handler(action);
        if (!(result === null || result === void 0 ? void 0 : result.keepOpen)) {
          this.close();
        }
      }
      this._bump = true;
    }
    async _handleInput(event) {
      this._search = event.detail.search;
      await this.updateComplete;
      this.dispatchEvent(new CustomEvent("change", {
        detail: { search: this._search, actions: this._actionMatches },
        bubbles: true,
        composed: true
      }));
    }
    _overlayClick(event) {
      var _a;
      if ((_a = event.target) === null || _a === void 0 ? void 0 : _a.classList.contains("modal")) {
        this.close();
      }
    }
  };
  NinjaKeys.styles = [baseStyles];
  __decorate4([
    e5({ type: String })
  ], NinjaKeys.prototype, "placeholder", void 0);
  __decorate4([
    e5({ type: Boolean })
  ], NinjaKeys.prototype, "disableHotkeys", void 0);
  __decorate4([
    e5({ type: Boolean })
  ], NinjaKeys.prototype, "hideBreadcrumbs", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "openHotkey", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "navigationUpHotkey", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "navigationDownHotkey", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "closeHotkey", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "goBackHotkey", void 0);
  __decorate4([
    e5()
  ], NinjaKeys.prototype, "selectHotkey", void 0);
  __decorate4([
    e5({ type: Boolean })
  ], NinjaKeys.prototype, "hotKeysJoinedView", void 0);
  __decorate4([
    e5({ type: Boolean })
  ], NinjaKeys.prototype, "noAutoLoadMdIcons", void 0);
  __decorate4([
    e5({
      type: Array,
      hasChanged() {
        return true;
      }
    })
  ], NinjaKeys.prototype, "data", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "visible", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_bump", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_actionMatches", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_search", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_currentRoot", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_flatData", void 0);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "breadcrumbs", null);
  __decorate4([
    t3()
  ], NinjaKeys.prototype, "_selected", void 0);
  NinjaKeys = __decorate4([
    e4("ninja-keys")
  ], NinjaKeys);

  // controllers/command_palette_controller.js
  var command_palette_controller_default = class extends Controller {
    connect() {
      this.element.data = [
        {
          id: "Home",
          title: "Home",
          hotkey: "ctrl+H",
          icon: '<svg xmlns="http://www.w3.org/2000/svg" class="ninja-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /></svg>',
          handler: () => {
            Turbo.visit("/");
          }
        },
        {
          id: "Accounts",
          title: "Accounts",
          hotkey: "ctrl+A",
          icon: '<svg xmlns="http://www.w3.org/2000/svg" class="ninja-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" /></svg>',
          handler: () => {
            Turbo.visit("/accounts");
          }
        },
        {
          id: "Profile",
          title: "Profile",
          hotkey: "ctrl+P",
          icon: '<svg xmlns="http://www.w3.org/2000/svg" class="ninja-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>',
          handler: () => {
            Turbo.visit("/users/edit");
          }
        },
        {
          id: "Notifications",
          title: "Notifications",
          hotkey: "ctrl+N",
          icon: '<svg xmlns="http://www.w3.org/2000/svg" class="ninja-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" /></svg>',
          handler: () => {
            Turbo.visit("/notifications");
          }
        }
      ];
    }
  };

  // controllers/mentions_controller.js
  var mentions_controller_exports = {};
  __export(mentions_controller_exports, {
    default: () => mentions_controller_default
  });
  var import_tributejs = __toESM(require_tribute_min());
  var import_trix = __toESM(require_trix());
  var mentions_controller_default = class extends Controller {
    connect() {
      this.editor = this.fieldTarget.editor;
      this.initializeTribute();
    }
    initializeTribute() {
      this.tribute = new import_tributejs.default({
        allowSpaces: true,
        lookup: "name",
        values: this.fetchUsers,
        menuShowMinLength: 1
      });
      this.tribute.attach(this.fieldTarget);
      this.fieldTarget.addEventListener("tribute-replaced", this.replaced);
      this.tribute.range.pasteHtml = this._pasteHtml.bind(this);
    }
    disconnect() {
      this.tribute.detach(this.fieldTarget);
    }
    fetchUsers(text, callback) {
      fetch(`/users/mentions.json?query=${text}`).then((response) => response.json()).then((users) => callback(users)).catch((error2) => callback([]));
    }
    replaced(e12) {
      let mention = e12.detail.item.original;
      let attachment = new import_trix.default.Attachment({
        content: mention.content,
        sgid: mention.sgid
      });
      this.editor.insertAttachment(attachment);
      this.editor.insertString(" ");
    }
    _pasteHtml(html, startPos, endPos) {
      let range = this.editor.getSelectedRange();
      let position = range[0];
      let length = endPos - startPos;
      this.editor.setSelectedRange([position - length, position]);
      this.editor.deleteInDirection("backward");
    }
  };
  __publicField(mentions_controller_default, "targets", ["field"]);

  // controllers/notifications_controller.js
  var notifications_controller_exports = {};
  __export(notifications_controller_exports, {
    default: () => notifications_controller_default
  });
  var notifications_controller_default = class extends Controller {
    connect() {
      this.subscription = consumer_default.subscriptions.create({ channel: "NotificationChannel" }, {
        connected: this._connected.bind(this),
        disconnected: this._disconnected.bind(this),
        received: this._received.bind(this)
      });
      if (this.hasUnread())
        this.showUnreadBadge();
    }
    disconnect() {
      this.subscription.unsubscribe();
    }
    _connected() {
    }
    _disconnected() {
    }
    _received(data) {
      this.totalUnreadValue += 1;
      if (data.account_id && data.account_id == this.accountIdValue) {
        this.accountUnreadValue += 1;
      }
      if (data.account_id && data.account_id != this.accountIdValue) {
        return;
      }
      if (data.html) {
        this.listTarget.insertAdjacentHTML("afterbegin", data.html);
        this.showUnreadBadge();
      }
      if (data.browser) {
        this.checkPermissionAndNotify(data.browser);
      }
    }
    open() {
      this.hideUnreadBadge();
      this.markAllAsRead();
    }
    hasUnread() {
      return !!this.accountUnreadValue;
    }
    showUnreadBadge() {
      if (this.hasBadgeTarget == false) {
        return;
      }
      this.badgeTarget.classList.remove("hidden");
    }
    hideUnreadBadge() {
      if (this.hasBadgeTarget == false) {
        return;
      }
      this.badgeTarget.classList.add("hidden");
    }
    markAllAsRead() {
      let ids = this.notificationTargets.map((target) => target.dataset.id);
      this.subscription.perform("mark_as_read", { ids });
      this.accountUnreadValue = 0;
      this.totalUnreadValue -= ids.length;
    }
    markAsInteracted(event) {
      let id = event.currentTarget.dataset.id;
      if (id == null)
        return;
      this.subscription.perform("mark_as_interacted", { ids: [id] });
    }
    checkPermissionAndNotify(data) {
      if (!("Notification" in window))
        return;
      if (Notification.permission === "granted") {
        this.browserNotification(data);
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then((permission) => {
          if (permission === "granted") {
            this.browserNotification(data);
          }
        });
      }
    }
    browserNotification(data) {
      new Notification(data.title, data.options);
    }
    totalUnreadValueChanged() {
      this.syncCountToNative();
    }
    accountUnreadValueChanged() {
      this.syncCountToNative();
    }
    syncCountToNative() {
      window.TurboNativeBridge.setNotificationCount(this.totalUnreadValue, this.accountUnreadValue);
    }
  };
  __publicField(notifications_controller_default, "targets", ["badge", "list", "placeholder", "notification"]);
  __publicField(notifications_controller_default, "values", {
    accountId: String,
    accountUnread: Number,
    totalUnread: Number
  });

  // controllers/paddle_controller.js
  var paddle_controller_exports = {};
  __export(paddle_controller_exports, {
    default: () => paddle_controller_default
  });
  var paddle_controller_default = class extends Controller {
    connect() {
      let params = {
        method: "inline",
        allowQuantity: false,
        disableLogout: true,
        frameTarget: "paddle-checkout",
        frameInitialHeight: 416,
        frameStyle: "width:100%; background-color: transparent; border: none;",
        successCallback: this.checkoutComplete.bind(this)
      };
      if (this.data.get("action") == "create-subscription") {
        Paddle.Checkout.open({
          ...params,
          product: this.data.get("product"),
          email: this.data.get("email"),
          passthrough: this.data.get("passthrough")
        });
      } else if (this.data.get("action") == "update-payment-details") {
        Paddle.Checkout.open({
          ...params,
          override: this.data.get("update-url")
        });
      }
    }
    checkoutComplete(data) {
      this.addHiddenField("processor", "paddle");
      Rails.fire(this.formTarget, "submit");
    }
    addHiddenField(name, value) {
      let hiddenInput = document.createElement("input");
      hiddenInput.setAttribute("type", "hidden");
      hiddenInput.setAttribute("name", name);
      hiddenInput.setAttribute("value", value);
      this.formTarget.appendChild(hiddenInput);
    }
  };
  __publicField(paddle_controller_default, "targets", ["form"]);

  // controllers/paypal_controller.js
  var paypal_controller_exports = {};
  __export(paypal_controller_exports, {
    default: () => paypal_controller_default
  });
  var paypal_controller_default = class extends Controller {
    connect() {
      braintree.client.create({
        authorization: this.data.get("clientToken")
      }, this.clientCreated.bind(this));
    }
    disconnect() {
      this.buttonTarget.querySelector(".paypal-button").remove();
    }
    clientCreated(error2, clientInstance) {
      if (error2) {
        console.error("Error creating client", error2);
        return;
      }
      braintree.paypalCheckout.create({
        client: clientInstance
      }, this.paypalCreated.bind(this));
    }
    paypalCreated(paypalCheckoutErr, paypalCheckoutInstance) {
      if (paypalCheckoutErr) {
        console.error("Error creating PayPal Checkout:", paypalCheckoutErr);
        return;
      }
      paypal.Button.render({
        env: this.data.get("env"),
        style: {
          color: "gold",
          shape: "rect",
          size: "medium",
          label: "pay",
          tagline: false
        },
        payment: () => {
          return paypalCheckoutInstance.createPayment({
            flow: "vault"
          });
        },
        onAuthorize: (data, actions) => {
          return paypalCheckoutInstance.tokenizePayment(data, this.paymentMethod.bind(this));
        },
        onCancel: (data) => {
          console.log("checkout.js payment cancelled", JSON.stringify(data, 0, 2));
        },
        onError: (err) => {
          console.error("checkout.js error", err);
        }
      }, this.buttonTarget).then(() => {
      });
    }
    paymentMethod(error2, payload) {
      if (error2) {
        console.error("Error with payment method:", error2);
        return;
      }
      this.addHiddenField("processor", "braintree");
      this.addHiddenField("payment_method_token", payload.nonce);
      Rails.fire(this.formTarget, "submit");
    }
    addHiddenField(name, value) {
      let hiddenInput = document.createElement("input");
      hiddenInput.setAttribute("type", "hidden");
      hiddenInput.setAttribute("name", name);
      hiddenInput.setAttribute("value", value);
      this.formTarget.appendChild(hiddenInput);
    }
  };
  __publicField(paypal_controller_default, "targets", ["button", "form"]);

  // controllers/pricing_controller.js
  var pricing_controller_exports = {};
  __export(pricing_controller_exports, {
    default: () => pricing_controller_default
  });
  var pricing_controller_default = class extends Controller {
    connect() {
      this.activeFrequencyClass = (this.data.get("active-frequency-class") || "bg-white shadow-sm text-black hover:text-black").split(" ");
      this.inactiveFrequencyClass = (this.data.get("inactive-frequency-class") || "hover:text-gray-900").split(" ");
      this.activePlansClass = (this.data.get("activePlansClass") || "flex").split(" ");
      this.inactivePlansClass = (this.data.get("inactivePlansClass") || "hidden").split(" ");
      this.frequencyTargets.forEach((target) => {
        let frequency2 = target.dataset.frequency;
        let index = this.plansTargets.findIndex((element) => element.dataset.frequency == frequency2 && element.childElementCount > 0);
        if (index == -1)
          target.remove();
      });
      if (this.frequencyTargets.length < 2)
        this._hideFrequencyToggle();
      let frequency = this.data.get("active") || this.frequencyTargets[0].dataset.frequency;
      this._toggle(frequency);
    }
    switch(event) {
      event.preventDefault();
      this._toggle(event.target.dataset.frequency);
    }
    _hideFrequencyToggle() {
      this.toggleTarget.classList.add("hidden");
    }
    _toggle(frequency) {
      this.data.set("active", frequency);
      this.frequencyTargets.forEach((target) => {
        if (target.dataset.frequency == frequency) {
          this.showFrequency(target);
        } else {
          this.hideFrequency(target);
        }
      });
      this.plansTargets.forEach((target) => {
        if (target.dataset.frequency == frequency) {
          this.showPlans(target);
        } else {
          this.hidePlans(target);
        }
      });
    }
    showFrequency(element) {
      element.classList.add(...this.activeFrequencyClass);
      element.classList.remove(...this.inactiveFrequencyClass);
    }
    hideFrequency(element) {
      element.classList.remove(...this.activeFrequencyClass);
      element.classList.add(...this.inactiveFrequencyClass);
    }
    showPlans(element) {
      element.classList.add(...this.activePlansClass);
      element.classList.remove(...this.inactivePlansClass);
    }
    hidePlans(element) {
      element.classList.remove(...this.activePlansClass);
      element.classList.add(...this.inactivePlansClass);
    }
  };
  __publicField(pricing_controller_default, "targets", ["toggle", "frequency", "plans"]);

  // controllers/select_controller.js
  var select_controller_exports = {};
  __export(select_controller_exports, {
    default: () => select_controller_default
  });

  // ../../node_modules/slim-select/dist/slimselect.min.mjs
  var exports = {};
  !function(e12, t5) {
    "object" == typeof exports && "object" == typeof module ? module.exports = t5() : "function" == typeof define && define.amd ? define([], t5) : "object" == typeof exports ? exports.SlimSelect = t5() : e12.SlimSelect = t5();
  }(window, function() {
    return n9 = {}, s8.m = i6 = [function(e12, t5, i7) {
      "use strict";
      function n10(e13, t6) {
        t6 = t6 || { bubbles: false, cancelable: false, detail: void 0 };
        var i8 = document.createEvent("CustomEvent");
        return i8.initCustomEvent(e13, t6.bubbles, t6.cancelable, t6.detail), i8;
      }
      t5.__esModule = true, t5.kebabCase = t5.highlight = t5.isValueInArrayOfObjects = t5.debounce = t5.putContent = t5.ensureElementInView = t5.hasClassInTree = void 0, t5.hasClassInTree = function(e13, t6) {
        function n11(e14, t7) {
          return t7 && e14 && e14.classList && e14.classList.contains(t7) ? e14 : null;
        }
        return n11(e13, t6) || function e14(t7, i8) {
          return t7 && t7 !== document ? n11(t7, i8) ? t7 : e14(t7.parentNode, i8) : null;
        }(e13, t6);
      }, t5.ensureElementInView = function(e13, t6) {
        var i8 = e13.scrollTop + e13.offsetTop, n11 = i8 + e13.clientHeight, s9 = t6.offsetTop, t6 = s9 + t6.clientHeight;
        s9 < i8 ? e13.scrollTop -= i8 - s9 : n11 < t6 && (e13.scrollTop += t6 - n11);
      }, t5.putContent = function(e13, t6, i8) {
        var n11 = e13.offsetHeight, s9 = e13.getBoundingClientRect(), e13 = i8 ? s9.top : s9.top - n11, n11 = i8 ? s9.bottom : s9.bottom + n11;
        return e13 <= 0 ? "below" : n11 >= window.innerHeight ? "above" : i8 ? t6 : "below";
      }, t5.debounce = function(s9, a4, o11) {
        var l9;
        return void 0 === a4 && (a4 = 100), void 0 === o11 && (o11 = false), function() {
          for (var e13 = [], t6 = 0; t6 < arguments.length; t6++)
            e13[t6] = arguments[t6];
          var i8 = self, n11 = o11 && !l9;
          clearTimeout(l9), l9 = setTimeout(function() {
            l9 = null, o11 || s9.apply(i8, e13);
          }, a4), n11 && s9.apply(i8, e13);
        };
      }, t5.isValueInArrayOfObjects = function(e13, t6, i8) {
        if (!Array.isArray(e13))
          return e13[t6] === i8;
        for (var n11 = 0, s9 = e13; n11 < s9.length; n11++) {
          var a4 = s9[n11];
          if (a4 && a4[t6] && a4[t6] === i8)
            return true;
        }
        return false;
      }, t5.highlight = function(e13, t6, i8) {
        var n11 = e13, s9 = new RegExp("(" + t6.trim() + ")(?![^<]*>[^<>]*</)", "i");
        if (!e13.match(s9))
          return e13;
        var a4 = e13.match(s9).index, t6 = a4 + e13.match(s9)[0].toString().length, t6 = e13.substring(a4, t6);
        return n11 = n11.replace(s9, '<mark class="'.concat(i8, '">').concat(t6, "</mark>"));
      }, t5.kebabCase = function(e13) {
        var t6 = e13.replace(/[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g, function(e14) {
          return "-" + e14.toLowerCase();
        });
        return e13[0] === e13[0].toUpperCase() ? t6.substring(1) : t6;
      }, "function" != typeof (t5 = window).CustomEvent && (n10.prototype = t5.Event.prototype, t5.CustomEvent = n10);
    }, function(e12, t5, i7) {
      "use strict";
      t5.__esModule = true, t5.validateOption = t5.validateData = t5.Data = void 0;
      var n10 = (s9.prototype.newOption = function(e13) {
        return { id: e13.id || String(Math.floor(1e8 * Math.random())), value: e13.value || "", text: e13.text || "", innerHTML: e13.innerHTML || "", selected: e13.selected || false, display: void 0 === e13.display || e13.display, disabled: e13.disabled || false, placeholder: e13.placeholder || false, class: e13.class || void 0, data: e13.data || {}, mandatory: e13.mandatory || false };
      }, s9.prototype.add = function(e13) {
        this.data.push({ id: String(Math.floor(1e8 * Math.random())), value: e13.value, text: e13.text, innerHTML: "", selected: false, display: true, disabled: false, placeholder: false, class: void 0, mandatory: e13.mandatory, data: {} });
      }, s9.prototype.parseSelectData = function() {
        this.data = [];
        for (var e13 = 0, t6 = this.main.select.element.childNodes; e13 < t6.length; e13++) {
          var i8 = t6[e13];
          if ("OPTGROUP" === i8.nodeName) {
            for (var n11 = { label: i8.label, options: [] }, s10 = 0, a4 = i8.childNodes; s10 < a4.length; s10++) {
              var o11, l9 = a4[s10];
              "OPTION" === l9.nodeName && (o11 = this.pullOptionData(l9), n11.options.push(o11), o11.placeholder && "" !== o11.text.trim() && (this.main.config.placeholderText = o11.text));
            }
            this.data.push(n11);
          } else
            "OPTION" === i8.nodeName && (o11 = this.pullOptionData(i8), this.data.push(o11), o11.placeholder && "" !== o11.text.trim() && (this.main.config.placeholderText = o11.text));
        }
      }, s9.prototype.pullOptionData = function(e13) {
        return { id: !!e13.dataset && e13.dataset.id || String(Math.floor(1e8 * Math.random())), value: e13.value, text: e13.text, innerHTML: e13.innerHTML, selected: e13.selected, disabled: e13.disabled, placeholder: "true" === e13.dataset.placeholder, class: e13.className, style: e13.style.cssText, data: e13.dataset, mandatory: !!e13.dataset && "true" === e13.dataset.mandatory };
      }, s9.prototype.setSelectedFromSelect = function() {
        if (this.main.config.isMultiple) {
          for (var e13 = [], t6 = 0, i8 = this.main.select.element.options; t6 < i8.length; t6++) {
            var n11 = i8[t6];
            !n11.selected || (n11 = this.getObjectFromData(n11.value, "value")) && n11.id && e13.push(n11.id);
          }
          this.setSelected(e13, "id");
        } else {
          var s10 = this.main.select.element;
          -1 !== s10.selectedIndex && (s10 = s10.options[s10.selectedIndex].value, this.setSelected(s10, "value"));
        }
      }, s9.prototype.setSelected = function(e13, t6) {
        void 0 === t6 && (t6 = "id");
        for (var i8 = 0, n11 = this.data; i8 < n11.length; i8++) {
          var s10 = n11[i8];
          if (s10.hasOwnProperty("label")) {
            if (s10.hasOwnProperty("options")) {
              var a4 = s10.options;
              if (a4)
                for (var o11 = 0, l9 = a4; o11 < l9.length; o11++) {
                  var r8 = l9[o11];
                  r8.placeholder || (r8.selected = this.shouldBeSelected(r8, e13, t6));
                }
            }
          } else
            s10.selected = this.shouldBeSelected(s10, e13, t6);
        }
      }, s9.prototype.shouldBeSelected = function(e13, t6, i8) {
        if (void 0 === i8 && (i8 = "id"), Array.isArray(t6))
          for (var n11 = 0, s10 = t6; n11 < s10.length; n11++) {
            var a4 = s10[n11];
            if (i8 in e13 && String(e13[i8]) === String(a4))
              return true;
          }
        else if (i8 in e13 && String(e13[i8]) === String(t6))
          return true;
        return false;
      }, s9.prototype.getSelected = function() {
        for (var e13 = { text: "", placeholder: this.main.config.placeholderText }, t6 = [], i8 = 0, n11 = this.data; i8 < n11.length; i8++) {
          var s10 = n11[i8];
          if (s10.hasOwnProperty("label")) {
            if (s10.hasOwnProperty("options")) {
              var a4 = s10.options;
              if (a4)
                for (var o11 = 0, l9 = a4; o11 < l9.length; o11++) {
                  var r8 = l9[o11];
                  r8.selected && (this.main.config.isMultiple ? t6.push(r8) : e13 = r8);
                }
            }
          } else
            s10.selected && (this.main.config.isMultiple ? t6.push(s10) : e13 = s10);
        }
        return this.main.config.isMultiple ? t6 : e13;
      }, s9.prototype.addToSelected = function(e13, t6) {
        if (void 0 === t6 && (t6 = "id"), this.main.config.isMultiple) {
          var i8 = [], n11 = this.getSelected();
          if (Array.isArray(n11))
            for (var s10 = 0, a4 = n11; s10 < a4.length; s10++) {
              var o11 = a4[s10];
              i8.push(o11[t6]);
            }
          i8.push(e13), this.setSelected(i8, t6);
        }
      }, s9.prototype.removeFromSelected = function(e13, t6) {
        if (void 0 === t6 && (t6 = "id"), this.main.config.isMultiple) {
          for (var i8 = [], n11 = 0, s10 = this.getSelected(); n11 < s10.length; n11++) {
            var a4 = s10[n11];
            String(a4[t6]) !== String(e13) && i8.push(a4[t6]);
          }
          this.setSelected(i8, t6);
        }
      }, s9.prototype.onDataChange = function() {
        this.main.onChange && this.isOnChangeEnabled && this.main.onChange(JSON.parse(JSON.stringify(this.getSelected())));
      }, s9.prototype.getObjectFromData = function(e13, t6) {
        void 0 === t6 && (t6 = "id");
        for (var i8 = 0, n11 = this.data; i8 < n11.length; i8++) {
          var s10 = n11[i8];
          if (t6 in s10 && String(s10[t6]) === String(e13))
            return s10;
          if (s10.hasOwnProperty("options")) {
            if (s10.options)
              for (var a4 = 0, o11 = s10.options; a4 < o11.length; a4++) {
                var l9 = o11[a4];
                if (String(l9[t6]) === String(e13))
                  return l9;
              }
          }
        }
        return null;
      }, s9.prototype.search = function(n11) {
        var s10, e13;
        "" !== (this.searchValue = n11).trim() ? (s10 = this.main.config.searchFilter, e13 = this.data.slice(0), n11 = n11.trim(), e13 = e13.map(function(e14) {
          if (e14.hasOwnProperty("options")) {
            var t6 = e14, i8 = [];
            if (0 !== (i8 = t6.options ? t6.options.filter(function(e15) {
              return s10(e15, n11);
            }) : i8).length) {
              t6 = Object.assign({}, t6);
              return t6.options = i8, t6;
            }
          }
          if (e14.hasOwnProperty("text") && s10(e14, n11))
            return e14;
          return null;
        }), this.filtered = e13.filter(function(e14) {
          return e14;
        })) : this.filtered = null;
      }, s9);
      function s9(e13) {
        this.contentOpen = false, this.contentPosition = "below", this.isOnChangeEnabled = true, this.main = e13.main, this.searchValue = "", this.data = [], this.filtered = null, this.parseSelectData(), this.setSelectedFromSelect();
      }
      function r7(e13) {
        return void 0 !== e13.text || (console.error("Data object option must have at least have a text value. Check object: " + JSON.stringify(e13)), false);
      }
      t5.Data = n10, t5.validateData = function(e13) {
        if (!e13)
          return console.error("Data must be an array of objects"), false;
        for (var t6 = 0, i8 = 0, n11 = e13; i8 < n11.length; i8++) {
          var s10 = n11[i8];
          if (s10.hasOwnProperty("label")) {
            if (s10.hasOwnProperty("options")) {
              var a4 = s10.options;
              if (a4)
                for (var o11 = 0, l9 = a4; o11 < l9.length; o11++)
                  r7(l9[o11]) || t6++;
            }
          } else
            r7(s10) || t6++;
        }
        return 0 === t6;
      }, t5.validateOption = r7;
    }, function(e12, t5, i7) {
      "use strict";
      t5.__esModule = true;
      var n10 = i7(3), s9 = i7(4), a4 = i7(5), r7 = i7(1), o11 = i7(0), i7 = (l9.prototype.validate = function(e13) {
        e13 = "string" == typeof e13.select ? document.querySelector(e13.select) : e13.select;
        if (!e13)
          throw new Error("Could not find select element");
        if ("SELECT" !== e13.tagName)
          throw new Error("Element isnt of type select");
        return e13;
      }, l9.prototype.selected = function() {
        if (this.config.isMultiple) {
          for (var e13 = [], t6 = 0, i8 = s10 = this.data.getSelected(); t6 < i8.length; t6++) {
            var n11 = i8[t6];
            e13.push(n11.value);
          }
          return e13;
        }
        var s10;
        return (s10 = this.data.getSelected()) ? s10.value : "";
      }, l9.prototype.set = function(e13, t6, i8, n11) {
        void 0 === t6 && (t6 = "value"), void 0 === i8 && (i8 = true), void 0 === n11 && (n11 = true), this.config.isMultiple && !Array.isArray(e13) ? this.data.addToSelected(e13, t6) : this.data.setSelected(e13, t6), this.select.setValue(), this.data.onDataChange(), this.render(), (i8 = this.config.hideSelectedOption && this.config.isMultiple && this.data.getSelected().length === this.data.data.length ? true : i8) && this.close();
      }, l9.prototype.setSelected = function(e13, t6, i8, n11) {
        this.set(e13, t6 = void 0 === t6 ? "value" : t6, i8 = void 0 === i8 ? true : i8, n11 = void 0 === n11 ? true : n11);
      }, l9.prototype.setData = function(e13) {
        if ((0, r7.validateData)(e13)) {
          for (var t6 = JSON.parse(JSON.stringify(e13)), i8 = this.data.getSelected(), n11 = 0; n11 < t6.length; n11++)
            t6[n11].value || t6[n11].placeholder || (t6[n11].value = t6[n11].text);
          if (this.config.isAjax && i8)
            if (this.config.isMultiple)
              for (var s10 = 0, a5 = i8.reverse(); s10 < a5.length; s10++) {
                var o12 = a5[s10];
                t6.unshift(o12);
              }
            else {
              t6.unshift(i8);
              for (n11 = 0; n11 < t6.length; n11++)
                t6[n11].placeholder || t6[n11].value !== i8.value || t6[n11].text !== i8.text || t6.splice(n11, 1);
              for (var l10 = false, n11 = 0; n11 < t6.length; n11++)
                t6[n11].placeholder && (l10 = true);
              l10 || t6.unshift({ text: "", placeholder: true });
            }
          this.select.create(t6), this.data.parseSelectData(), this.data.setSelectedFromSelect();
        } else
          console.error("Validation problem on: #" + this.select.element.id);
      }, l9.prototype.addData = function(e13) {
        (0, r7.validateData)([e13]) ? (this.data.add(this.data.newOption(e13)), this.select.create(this.data.data), this.data.parseSelectData(), this.data.setSelectedFromSelect(), this.render()) : console.error("Validation problem on: #" + this.select.element.id);
      }, l9.prototype.open = function() {
        var e13, t6 = this;
        this.config.isEnabled && (this.data.contentOpen || this.config.hideSelectedOption && this.config.isMultiple && this.data.getSelected().length === this.data.data.length || (this.beforeOpen && this.beforeOpen(), this.config.isMultiple && this.slim.multiSelected ? this.slim.multiSelected.plus.classList.add("ss-cross") : this.slim.singleSelected && (this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-down"), this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-up")), this.slim[this.config.isMultiple ? "multiSelected" : "singleSelected"].container.classList.add("above" === this.data.contentPosition ? this.config.openAbove : this.config.openBelow), this.config.addToBody && (e13 = this.slim.container.getBoundingClientRect(), this.slim.content.style.top = e13.top + e13.height + window.scrollY + "px", this.slim.content.style.left = e13.left + window.scrollX + "px", this.slim.content.style.width = e13.width + "px"), this.slim.content.classList.add(this.config.open), "up" === this.config.showContent.toLowerCase() || "down" !== this.config.showContent.toLowerCase() && "above" === (0, o11.putContent)(this.slim.content, this.data.contentPosition, this.data.contentOpen) ? this.moveContentAbove() : this.moveContentBelow(), this.config.isMultiple || (e13 = this.data.getSelected()) && (e13 = e13.id, (e13 = this.slim.list.querySelector('[data-id="' + e13 + '"]')) && (0, o11.ensureElementInView)(this.slim.list, e13)), setTimeout(function() {
          t6.data.contentOpen = true, t6.config.searchFocus && t6.slim.search.input.focus(), t6.afterOpen && t6.afterOpen();
        }, this.config.timeoutDelay)));
      }, l9.prototype.close = function() {
        var e13 = this;
        this.data.contentOpen && (this.beforeClose && this.beforeClose(), this.config.isMultiple && this.slim.multiSelected ? (this.slim.multiSelected.container.classList.remove(this.config.openAbove), this.slim.multiSelected.container.classList.remove(this.config.openBelow), this.slim.multiSelected.plus.classList.remove("ss-cross")) : this.slim.singleSelected && (this.slim.singleSelected.container.classList.remove(this.config.openAbove), this.slim.singleSelected.container.classList.remove(this.config.openBelow), this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-down"), this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-up")), this.slim.content.classList.remove(this.config.open), this.data.contentOpen = false, this.search(""), setTimeout(function() {
          e13.slim.content.removeAttribute("style"), e13.data.contentPosition = "below", e13.config.isMultiple && e13.slim.multiSelected ? (e13.slim.multiSelected.container.classList.remove(e13.config.openAbove), e13.slim.multiSelected.container.classList.remove(e13.config.openBelow)) : e13.slim.singleSelected && (e13.slim.singleSelected.container.classList.remove(e13.config.openAbove), e13.slim.singleSelected.container.classList.remove(e13.config.openBelow)), e13.slim.search.input.blur(), e13.afterClose && e13.afterClose();
        }, this.config.timeoutDelay));
      }, l9.prototype.moveContentAbove = function() {
        var e13 = 0;
        this.config.isMultiple && this.slim.multiSelected ? e13 = this.slim.multiSelected.container.offsetHeight : this.slim.singleSelected && (e13 = this.slim.singleSelected.container.offsetHeight);
        var t6 = e13 + this.slim.content.offsetHeight - 1;
        this.slim.content.style.margin = "-" + t6 + "px 0 0 0", this.slim.content.style.height = t6 - e13 + 1 + "px", this.slim.content.style.transformOrigin = "center bottom", this.data.contentPosition = "above", this.config.isMultiple && this.slim.multiSelected ? (this.slim.multiSelected.container.classList.remove(this.config.openBelow), this.slim.multiSelected.container.classList.add(this.config.openAbove)) : this.slim.singleSelected && (this.slim.singleSelected.container.classList.remove(this.config.openBelow), this.slim.singleSelected.container.classList.add(this.config.openAbove));
      }, l9.prototype.moveContentBelow = function() {
        this.data.contentPosition = "below", this.config.isMultiple && this.slim.multiSelected ? (this.slim.multiSelected.container.classList.remove(this.config.openAbove), this.slim.multiSelected.container.classList.add(this.config.openBelow)) : this.slim.singleSelected && (this.slim.singleSelected.container.classList.remove(this.config.openAbove), this.slim.singleSelected.container.classList.add(this.config.openBelow));
      }, l9.prototype.enable = function() {
        this.config.isEnabled = true, this.config.isMultiple && this.slim.multiSelected ? this.slim.multiSelected.container.classList.remove(this.config.disabled) : this.slim.singleSelected && this.slim.singleSelected.container.classList.remove(this.config.disabled), this.select.triggerMutationObserver = false, this.select.element.disabled = false, this.slim.search.input.disabled = false, this.select.triggerMutationObserver = true;
      }, l9.prototype.disable = function() {
        this.config.isEnabled = false, this.config.isMultiple && this.slim.multiSelected ? this.slim.multiSelected.container.classList.add(this.config.disabled) : this.slim.singleSelected && this.slim.singleSelected.container.classList.add(this.config.disabled), this.select.triggerMutationObserver = false, this.select.element.disabled = true, this.slim.search.input.disabled = true, this.select.triggerMutationObserver = true;
      }, l9.prototype.search = function(t6) {
        var i8;
        this.data.searchValue !== t6 && (this.slim.search.input.value = t6, this.config.isAjax ? ((i8 = this).config.isSearching = true, this.render(), this.ajax && this.ajax(t6, function(e13) {
          i8.config.isSearching = false, Array.isArray(e13) ? (e13.unshift({ text: "", placeholder: true }), i8.setData(e13), i8.data.search(t6), i8.render()) : "string" == typeof e13 ? i8.slim.options(e13) : i8.render();
        })) : (this.data.search(t6), this.render()));
      }, l9.prototype.setSearchText = function(e13) {
        this.config.searchText = e13;
      }, l9.prototype.render = function() {
        this.config.isMultiple ? this.slim.values() : (this.slim.placeholder(), this.slim.deselect()), this.slim.options();
      }, l9.prototype.destroy = function(e13) {
        var t6 = (e13 = void 0 === e13 ? null : e13) ? document.querySelector("." + e13 + ".ss-main") : this.slim.container, i8 = e13 ? document.querySelector("[data-ssid=".concat(e13, "]")) : this.select.element;
        t6 && i8 && (document.removeEventListener("click", this.documentClick), "auto" === this.config.showContent && window.removeEventListener("scroll", this.windowScroll, false), i8.style.display = "", delete i8.dataset.ssid, i8.slim = null, t6.parentElement && t6.parentElement.removeChild(t6), !this.config.addToBody || (e13 = e13 ? document.querySelector("." + e13 + ".ss-content") : this.slim.content) && document.body.removeChild(e13));
      }, l9);
      function l9(e13) {
        var t6 = this;
        this.ajax = null, this.addable = null, this.beforeOnChange = null, this.onChange = null, this.beforeOpen = null, this.afterOpen = null, this.beforeClose = null, this.afterClose = null, this.windowScroll = (0, o11.debounce)(function(e14) {
          t6.data.contentOpen && ("above" === (0, o11.putContent)(t6.slim.content, t6.data.contentPosition, t6.data.contentOpen) ? t6.moveContentAbove() : t6.moveContentBelow());
        }), this.documentClick = function(e14) {
          e14.target && !(0, o11.hasClassInTree)(e14.target, t6.config.id) && t6.close();
        };
        var i8 = this.validate(e13);
        i8.dataset.ssid && this.destroy(i8.dataset.ssid), e13.ajax && (this.ajax = e13.ajax), e13.addable && (this.addable = e13.addable), this.config = new n10.Config({ select: i8, isAjax: !!e13.ajax, showSearch: e13.showSearch, searchPlaceholder: e13.searchPlaceholder, searchText: e13.searchText, searchingText: e13.searchingText, searchFocus: e13.searchFocus, searchHighlight: e13.searchHighlight, searchFilter: e13.searchFilter, closeOnSelect: e13.closeOnSelect, showContent: e13.showContent, placeholderText: e13.placeholder, allowDeselect: e13.allowDeselect, allowDeselectOption: e13.allowDeselectOption, hideSelectedOption: e13.hideSelectedOption, deselectLabel: e13.deselectLabel, isEnabled: e13.isEnabled, valuesUseText: e13.valuesUseText, showOptionTooltips: e13.showOptionTooltips, selectByGroup: e13.selectByGroup, limit: e13.limit, timeoutDelay: e13.timeoutDelay, addToBody: e13.addToBody }), this.select = new s9.Select({ select: i8, main: this }), this.data = new r7.Data({ main: this }), this.slim = new a4.Slim({ main: this }), this.select.element.parentNode && this.select.element.parentNode.insertBefore(this.slim.container, this.select.element.nextSibling), e13.data ? this.setData(e13.data) : this.render(), document.addEventListener("click", this.documentClick), "auto" === this.config.showContent && window.addEventListener("scroll", this.windowScroll, false), e13.beforeOnChange && (this.beforeOnChange = e13.beforeOnChange), e13.onChange && (this.onChange = e13.onChange), e13.beforeOpen && (this.beforeOpen = e13.beforeOpen), e13.afterOpen && (this.afterOpen = e13.afterOpen), e13.beforeClose && (this.beforeClose = e13.beforeClose), e13.afterClose && (this.afterClose = e13.afterClose), this.config.isEnabled || this.disable();
      }
      t5.default = i7;
    }, function(e12, t5, i7) {
      "use strict";
      t5.__esModule = true, t5.Config = void 0;
      var n10 = (s9.prototype.searchFilter = function(e13, t6) {
        return -1 !== e13.text.toLowerCase().indexOf(t6.toLowerCase());
      }, s9);
      function s9(e13) {
        this.id = "", this.isMultiple = false, this.isAjax = false, this.isSearching = false, this.showSearch = true, this.searchFocus = true, this.searchHighlight = false, this.closeOnSelect = true, this.showContent = "auto", this.searchPlaceholder = "Search", this.searchText = "No Results", this.searchingText = "Searching...", this.placeholderText = "Select Value", this.allowDeselect = false, this.allowDeselectOption = false, this.hideSelectedOption = false, this.deselectLabel = "x", this.isEnabled = true, this.valuesUseText = false, this.showOptionTooltips = false, this.selectByGroup = false, this.limit = 0, this.timeoutDelay = 200, this.addToBody = false, this.main = "ss-main", this.singleSelected = "ss-single-selected", this.arrow = "ss-arrow", this.multiSelected = "ss-multi-selected", this.add = "ss-add", this.plus = "ss-plus", this.values = "ss-values", this.value = "ss-value", this.valueText = "ss-value-text", this.valueDelete = "ss-value-delete", this.content = "ss-content", this.open = "ss-open", this.openAbove = "ss-open-above", this.openBelow = "ss-open-below", this.search = "ss-search", this.searchHighlighter = "ss-search-highlight", this.addable = "ss-addable", this.list = "ss-list", this.optgroup = "ss-optgroup", this.optgroupLabel = "ss-optgroup-label", this.optgroupLabelSelectable = "ss-optgroup-label-selectable", this.option = "ss-option", this.optionSelected = "ss-option-selected", this.highlighted = "ss-highlighted", this.disabled = "ss-disabled", this.hide = "ss-hide", this.id = "ss-" + Math.floor(1e5 * Math.random()), this.style = e13.select.style.cssText, this.class = e13.select.className.split(" "), this.isMultiple = e13.select.multiple, this.isAjax = e13.isAjax, this.showSearch = false !== e13.showSearch, this.searchFocus = false !== e13.searchFocus, this.searchHighlight = true === e13.searchHighlight, this.closeOnSelect = false !== e13.closeOnSelect, e13.showContent && (this.showContent = e13.showContent), this.isEnabled = false !== e13.isEnabled, e13.searchPlaceholder && (this.searchPlaceholder = e13.searchPlaceholder), e13.searchText && (this.searchText = e13.searchText), e13.searchingText && (this.searchingText = e13.searchingText), e13.placeholderText && (this.placeholderText = e13.placeholderText), this.allowDeselect = true === e13.allowDeselect, this.allowDeselectOption = true === e13.allowDeselectOption, this.hideSelectedOption = true === e13.hideSelectedOption, e13.deselectLabel && (this.deselectLabel = e13.deselectLabel), e13.valuesUseText && (this.valuesUseText = e13.valuesUseText), e13.showOptionTooltips && (this.showOptionTooltips = e13.showOptionTooltips), e13.selectByGroup && (this.selectByGroup = e13.selectByGroup), e13.limit && (this.limit = e13.limit), e13.searchFilter && (this.searchFilter = e13.searchFilter), null != e13.timeoutDelay && (this.timeoutDelay = e13.timeoutDelay), this.addToBody = true === e13.addToBody;
      }
      t5.Config = n10;
    }, function(e12, t5, i7) {
      "use strict";
      t5.__esModule = true, t5.Select = void 0;
      var n10 = i7(0), i7 = (s9.prototype.setValue = function() {
        if (this.main.data.getSelected()) {
          if (this.main.config.isMultiple)
            for (var e13 = this.main.data.getSelected(), t6 = 0, i8 = this.element.options; t6 < i8.length; t6++) {
              var n11 = i8[t6];
              n11.selected = false;
              for (var s10 = 0, a4 = e13; s10 < a4.length; s10++)
                a4[s10].value === n11.value && (n11.selected = true);
            }
          else {
            e13 = this.main.data.getSelected();
            this.element.value = e13 ? e13.value : "";
          }
          this.main.data.isOnChangeEnabled = false, this.element.dispatchEvent(new CustomEvent("change", { bubbles: true })), this.main.data.isOnChangeEnabled = true;
        }
      }, s9.prototype.addAttributes = function() {
        this.element.tabIndex = -1, this.element.style.display = "none", this.element.dataset.ssid = this.main.config.id, this.element.setAttribute("aria-hidden", "true");
      }, s9.prototype.addEventListeners = function() {
        var t6 = this;
        this.element.addEventListener("change", function(e13) {
          t6.main.data.setSelectedFromSelect(), t6.main.render();
        });
      }, s9.prototype.addMutationObserver = function() {
        var t6 = this;
        this.main.config.isAjax || (this.mutationObserver = new MutationObserver(function(e13) {
          t6.triggerMutationObserver && (t6.main.data.parseSelectData(), t6.main.data.setSelectedFromSelect(), t6.main.render(), e13.forEach(function(e14) {
            "class" === e14.attributeName && t6.main.slim.updateContainerDivClass(t6.main.slim.container);
          }));
        }), this.observeMutationObserver());
      }, s9.prototype.observeMutationObserver = function() {
        this.mutationObserver && this.mutationObserver.observe(this.element, { attributes: true, childList: true, characterData: true });
      }, s9.prototype.disconnectMutationObserver = function() {
        this.mutationObserver && this.mutationObserver.disconnect();
      }, s9.prototype.create = function(e13) {
        this.element.innerHTML = "";
        for (var t6 = 0, i8 = e13; t6 < i8.length; t6++) {
          var n11 = i8[t6];
          if (n11.hasOwnProperty("options")) {
            var s10 = n11, a4 = document.createElement("optgroup");
            if (a4.label = s10.label, s10.options)
              for (var o11 = 0, l9 = s10.options; o11 < l9.length; o11++) {
                var r7 = l9[o11];
                a4.appendChild(this.createOption(r7));
              }
            this.element.appendChild(a4);
          } else
            this.element.appendChild(this.createOption(n11));
        }
      }, s9.prototype.createOption = function(t6) {
        var i8 = document.createElement("option");
        return i8.value = "" !== t6.value ? t6.value : t6.text, i8.innerHTML = t6.innerHTML || t6.text, t6.selected && (i8.selected = t6.selected), false === t6.display && (i8.style.display = "none"), t6.disabled && (i8.disabled = true), t6.placeholder && i8.setAttribute("data-placeholder", "true"), t6.mandatory && i8.setAttribute("data-mandatory", "true"), t6.class && t6.class.split(" ").forEach(function(e13) {
          i8.classList.add(e13);
        }), t6.data && "object" == typeof t6.data && Object.keys(t6.data).forEach(function(e13) {
          i8.setAttribute("data-" + (0, n10.kebabCase)(e13), t6.data[e13]);
        }), i8;
      }, s9);
      function s9(e13) {
        this.triggerMutationObserver = true, this.element = e13.select, this.main = e13.main, this.element.disabled && (this.main.config.isEnabled = false), this.addAttributes(), this.addEventListeners(), this.mutationObserver = null, this.addMutationObserver(), this.element.slim = e13.main;
      }
      t5.Select = i7;
    }, function(e12, t5, i7) {
      "use strict";
      t5.__esModule = true, t5.Slim = void 0;
      var n10 = i7(0), o11 = i7(1), i7 = (s9.prototype.containerDiv = function() {
        var e13 = document.createElement("div");
        return e13.style.cssText = this.main.config.style, this.updateContainerDivClass(e13), e13;
      }, s9.prototype.updateContainerDivClass = function(e13) {
        this.main.config.class = this.main.select.element.className.split(" "), e13.className = "", e13.classList.add(this.main.config.id), e13.classList.add(this.main.config.main);
        for (var t6 = 0, i8 = this.main.config.class; t6 < i8.length; t6++) {
          var n11 = i8[t6];
          "" !== n11.trim() && e13.classList.add(n11);
        }
      }, s9.prototype.singleSelectedDiv = function() {
        var t6 = this, e13 = document.createElement("div");
        e13.classList.add(this.main.config.singleSelected);
        var i8 = document.createElement("span");
        i8.classList.add("placeholder"), e13.appendChild(i8);
        var n11 = document.createElement("span");
        n11.innerHTML = this.main.config.deselectLabel, n11.classList.add("ss-deselect"), n11.onclick = function(e14) {
          e14.stopPropagation(), t6.main.config.isEnabled && t6.main.set("");
        }, e13.appendChild(n11);
        var s10 = document.createElement("span");
        s10.classList.add(this.main.config.arrow);
        var a4 = document.createElement("span");
        return a4.classList.add("arrow-down"), s10.appendChild(a4), e13.appendChild(s10), e13.onclick = function() {
          t6.main.config.isEnabled && (t6.main.data.contentOpen ? t6.main.close() : t6.main.open());
        }, { container: e13, placeholder: i8, deselect: n11, arrowIcon: { container: s10, arrow: a4 } };
      }, s9.prototype.placeholder = function() {
        var e13, t6 = this.main.data.getSelected();
        null === t6 || t6 && t6.placeholder ? ((e13 = document.createElement("span")).classList.add(this.main.config.disabled), e13.innerHTML = this.main.config.placeholderText, this.singleSelected && (this.singleSelected.placeholder.innerHTML = e13.outerHTML)) : (e13 = "", t6 && (e13 = t6.innerHTML && true !== this.main.config.valuesUseText ? t6.innerHTML : t6.text), this.singleSelected && (this.singleSelected.placeholder.innerHTML = t6 ? e13 : ""));
      }, s9.prototype.deselect = function() {
        this.singleSelected && (!this.main.config.allowDeselect || "" === this.main.selected() ? this.singleSelected.deselect.classList.add("ss-hide") : this.singleSelected.deselect.classList.remove("ss-hide"));
      }, s9.prototype.multiSelectedDiv = function() {
        var t6 = this, e13 = document.createElement("div");
        e13.classList.add(this.main.config.multiSelected);
        var i8 = document.createElement("div");
        i8.classList.add(this.main.config.values), e13.appendChild(i8);
        var n11 = document.createElement("div");
        n11.classList.add(this.main.config.add);
        var s10 = document.createElement("span");
        return s10.classList.add(this.main.config.plus), s10.onclick = function(e14) {
          t6.main.data.contentOpen && (t6.main.close(), e14.stopPropagation());
        }, n11.appendChild(s10), e13.appendChild(n11), e13.onclick = function(e14) {
          t6.main.config.isEnabled && (e14.target.classList.contains(t6.main.config.valueDelete) || (t6.main.data.contentOpen ? t6.main.close() : t6.main.open()));
        }, { container: e13, values: i8, add: n11, plus: s10 };
      }, s9.prototype.values = function() {
        if (this.multiSelected) {
          for (var e13 = this.multiSelected.values.childNodes, t6 = this.main.data.getSelected(), i8 = [], n11 = 0, s10 = e13; n11 < s10.length; n11++) {
            for (var a4 = s10[n11], o12 = true, l9 = 0, r7 = t6; l9 < r7.length; l9++) {
              var c6 = r7[l9];
              String(c6.id) === String(a4.dataset.id) && (o12 = false);
            }
            o12 && i8.push(a4);
          }
          for (var d3 = 0, h6 = i8; d3 < h6.length; d3++) {
            var u4 = h6[d3];
            u4.classList.add("ss-out"), this.multiSelected.values.removeChild(u4);
          }
          for (var p3, e13 = this.multiSelected.values.childNodes, c6 = 0; c6 < t6.length; c6++) {
            o12 = false;
            for (var m3 = 0, f3 = e13; m3 < f3.length; m3++) {
              a4 = f3[m3];
              String(t6[c6].id) === String(a4.dataset.id) && (o12 = true);
            }
            o12 || (0 !== e13.length && HTMLElement.prototype.insertAdjacentElement ? 0 === c6 ? this.multiSelected.values.insertBefore(this.valueDiv(t6[c6]), e13[c6]) : e13[c6 - 1].insertAdjacentElement("afterend", this.valueDiv(t6[c6])) : this.multiSelected.values.appendChild(this.valueDiv(t6[c6])));
          }
          0 === t6.length && ((p3 = document.createElement("span")).classList.add(this.main.config.disabled), p3.innerHTML = this.main.config.placeholderText, this.multiSelected.values.innerHTML = p3.outerHTML);
        }
      }, s9.prototype.valueDiv = function(s10) {
        var a4 = this, e13 = document.createElement("div");
        e13.classList.add(this.main.config.value), e13.dataset.id = s10.id;
        var t6 = document.createElement("span");
        return t6.classList.add(this.main.config.valueText), t6.innerHTML = s10.innerHTML && true !== this.main.config.valuesUseText ? s10.innerHTML : s10.text, e13.appendChild(t6), s10.mandatory || ((t6 = document.createElement("span")).classList.add(this.main.config.valueDelete), t6.innerHTML = this.main.config.deselectLabel, t6.onclick = function(e14) {
          e14.preventDefault(), e14.stopPropagation();
          var t7 = false;
          if (a4.main.beforeOnChange || (t7 = true), a4.main.beforeOnChange) {
            for (var e14 = a4.main.data.getSelected(), i8 = JSON.parse(JSON.stringify(e14)), n11 = 0; n11 < i8.length; n11++)
              i8[n11].id === s10.id && i8.splice(n11, 1);
            false !== a4.main.beforeOnChange(i8) && (t7 = true);
          }
          t7 && (a4.main.data.removeFromSelected(s10.id, "id"), a4.main.render(), a4.main.select.setValue(), a4.main.data.onDataChange());
        }, e13.appendChild(t6)), e13;
      }, s9.prototype.contentDiv = function() {
        var e13 = document.createElement("div");
        return e13.classList.add(this.main.config.content), e13;
      }, s9.prototype.searchDiv = function() {
        var n11 = this, e13 = document.createElement("div"), s10 = document.createElement("input"), a4 = document.createElement("div");
        e13.classList.add(this.main.config.search);
        var t6 = { container: e13, input: s10 };
        return this.main.config.showSearch || (e13.classList.add(this.main.config.hide), s10.readOnly = true), s10.type = "search", s10.placeholder = this.main.config.searchPlaceholder, s10.tabIndex = 0, s10.setAttribute("aria-label", this.main.config.searchPlaceholder), s10.setAttribute("autocapitalize", "off"), s10.setAttribute("autocomplete", "off"), s10.setAttribute("autocorrect", "off"), s10.onclick = function(e14) {
          setTimeout(function() {
            "" === e14.target.value && n11.main.search("");
          }, 10);
        }, s10.onkeydown = function(e14) {
          "ArrowUp" === e14.key ? (n11.main.open(), n11.highlightUp(), e14.preventDefault()) : "ArrowDown" === e14.key ? (n11.main.open(), n11.highlightDown(), e14.preventDefault()) : "Tab" === e14.key ? n11.main.data.contentOpen ? n11.main.close() : setTimeout(function() {
            n11.main.close();
          }, n11.main.config.timeoutDelay) : "Enter" === e14.key && e14.preventDefault();
        }, s10.onkeyup = function(e14) {
          var t7 = e14.target;
          if ("Enter" === e14.key) {
            if (n11.main.addable && e14.ctrlKey)
              return a4.click(), e14.preventDefault(), void e14.stopPropagation();
            var i8 = n11.list.querySelector("." + n11.main.config.highlighted);
            i8 && i8.click();
          } else
            "ArrowUp" === e14.key || "ArrowDown" === e14.key || ("Escape" === e14.key ? n11.main.close() : n11.main.config.showSearch && n11.main.data.contentOpen ? n11.main.search(t7.value) : s10.value = "");
          e14.preventDefault(), e14.stopPropagation();
        }, s10.onfocus = function() {
          n11.main.open();
        }, e13.appendChild(s10), this.main.addable && (a4.classList.add(this.main.config.addable), a4.innerHTML = "+", a4.onclick = function(e14) {
          var t7;
          n11.main.addable && (e14.preventDefault(), e14.stopPropagation(), "" !== (e14 = n11.search.input.value).trim() ? (e14 = n11.main.addable(e14), t7 = "", e14 && ("object" == typeof e14 ? (0, o11.validateOption)(e14) && (n11.main.addData(e14), t7 = e14.value || e14.text) : (n11.main.addData(n11.main.data.newOption({ text: e14, value: e14 })), t7 = e14), n11.main.search(""), setTimeout(function() {
            n11.main.set(t7, "value", false, false);
          }, 100), n11.main.config.closeOnSelect && setTimeout(function() {
            n11.main.close();
          }, 100))) : n11.search.input.focus());
        }, e13.appendChild(a4), t6.addable = a4), t6;
      }, s9.prototype.highlightUp = function() {
        var e13 = this.list.querySelector("." + this.main.config.highlighted), t6 = null;
        if (e13)
          for (t6 = e13.previousSibling; null !== t6 && t6.classList.contains(this.main.config.disabled); )
            t6 = t6.previousSibling;
        else
          var i8 = this.list.querySelectorAll("." + this.main.config.option + ":not(." + this.main.config.disabled + ")"), t6 = i8[i8.length - 1];
        null !== (t6 = t6 && t6.classList.contains(this.main.config.optgroupLabel) ? null : t6) || (i8 = e13.parentNode).classList.contains(this.main.config.optgroup) && (!i8.previousSibling || (i8 = i8.previousSibling.querySelectorAll("." + this.main.config.option + ":not(." + this.main.config.disabled + ")")).length && (t6 = i8[i8.length - 1])), t6 && (e13 && e13.classList.remove(this.main.config.highlighted), t6.classList.add(this.main.config.highlighted), (0, n10.ensureElementInView)(this.list, t6));
      }, s9.prototype.highlightDown = function() {
        var e13, t6 = this.list.querySelector("." + this.main.config.highlighted), i8 = null;
        if (t6)
          for (i8 = t6.nextSibling; null !== i8 && i8.classList.contains(this.main.config.disabled); )
            i8 = i8.nextSibling;
        else
          i8 = this.list.querySelector("." + this.main.config.option + ":not(." + this.main.config.disabled + ")");
        null !== i8 || null === t6 || (e13 = t6.parentNode).classList.contains(this.main.config.optgroup) && e13.nextSibling && (i8 = e13.nextSibling.querySelector("." + this.main.config.option + ":not(." + this.main.config.disabled + ")")), i8 && (t6 && t6.classList.remove(this.main.config.highlighted), i8.classList.add(this.main.config.highlighted), (0, n10.ensureElementInView)(this.list, i8));
      }, s9.prototype.listDiv = function() {
        var e13 = document.createElement("div");
        return e13.classList.add(this.main.config.list), e13.setAttribute("role", "listbox"), e13;
      }, s9.prototype.options = function(e13) {
        void 0 === e13 && (e13 = "");
        var t6 = this.main.data.filtered || this.main.data.data;
        if ((this.list.innerHTML = "") !== e13)
          return (i8 = document.createElement("div")).classList.add(this.main.config.option), i8.classList.add(this.main.config.disabled), i8.innerHTML = e13, void this.list.appendChild(i8);
        if (this.main.config.isAjax && this.main.config.isSearching)
          return (i8 = document.createElement("div")).classList.add(this.main.config.option), i8.classList.add(this.main.config.disabled), i8.innerHTML = this.main.config.searchingText, void this.list.appendChild(i8);
        if (0 === t6.length) {
          var i8 = document.createElement("div");
          return i8.classList.add(this.main.config.option), i8.classList.add(this.main.config.disabled), i8.innerHTML = this.main.config.searchText, void this.list.appendChild(i8);
        }
        for (var r7 = this, n11 = 0, s10 = t6; n11 < s10.length; n11++)
          !function(e14) {
            if (e14.hasOwnProperty("label")) {
              var t7 = e14, s11 = document.createElement("div");
              s11.classList.add(r7.main.config.optgroup);
              var i9 = document.createElement("div");
              i9.classList.add(r7.main.config.optgroupLabel), r7.main.config.selectByGroup && r7.main.config.isMultiple && i9.classList.add(r7.main.config.optgroupLabelSelectable), i9.innerHTML = t7.label, s11.appendChild(i9);
              t7 = t7.options;
              if (t7) {
                for (var a4, n12 = 0, o12 = t7; n12 < o12.length; n12++) {
                  var l9 = o12[n12];
                  s11.appendChild(r7.option(l9));
                }
                r7.main.config.selectByGroup && r7.main.config.isMultiple && (a4 = r7, i9.addEventListener("click", function(e15) {
                  e15.preventDefault(), e15.stopPropagation();
                  for (var t8 = 0, i10 = s11.children; t8 < i10.length; t8++) {
                    var n13 = i10[t8];
                    -1 !== n13.className.indexOf(a4.main.config.option) && n13.click();
                  }
                }));
              }
              r7.list.appendChild(s11);
            } else
              r7.list.appendChild(r7.option(e14));
          }(s10[n11]);
      }, s9.prototype.option = function(o12) {
        if (o12.placeholder) {
          var e13 = document.createElement("div");
          return e13.classList.add(this.main.config.option), e13.classList.add(this.main.config.hide), e13;
        }
        var t6 = document.createElement("div");
        t6.classList.add(this.main.config.option), t6.setAttribute("role", "option"), o12.class && o12.class.split(" ").forEach(function(e14) {
          t6.classList.add(e14);
        }), o12.style && (t6.style.cssText = o12.style);
        var l9 = this.main.data.getSelected();
        t6.dataset.id = o12.id, this.main.config.searchHighlight && this.main.slim && o12.innerHTML && "" !== this.main.slim.search.input.value.trim() ? t6.innerHTML = (0, n10.highlight)(o12.innerHTML, this.main.slim.search.input.value, this.main.config.searchHighlighter) : o12.innerHTML && (t6.innerHTML = o12.innerHTML), this.main.config.showOptionTooltips && t6.textContent && t6.setAttribute("title", t6.textContent);
        var r7 = this;
        t6.addEventListener("click", function(e14) {
          e14.preventDefault(), e14.stopPropagation();
          var t7 = this.dataset.id;
          if (true === o12.selected && r7.main.config.allowDeselectOption) {
            var i8 = false;
            if (r7.main.beforeOnChange && r7.main.config.isMultiple || (i8 = true), r7.main.beforeOnChange && r7.main.config.isMultiple) {
              for (var n11 = r7.main.data.getSelected(), s10 = JSON.parse(JSON.stringify(n11)), a4 = 0; a4 < s10.length; a4++)
                s10[a4].id === t7 && s10.splice(a4, 1);
              false !== r7.main.beforeOnChange(s10) && (i8 = true);
            }
            i8 && (r7.main.config.isMultiple ? (r7.main.data.removeFromSelected(t7, "id"), r7.main.render(), r7.main.select.setValue(), r7.main.data.onDataChange()) : r7.main.set(""));
          } else
            o12.disabled || o12.selected || r7.main.config.limit && Array.isArray(l9) && r7.main.config.limit <= l9.length || (r7.main.beforeOnChange ? (n11 = void 0, (i8 = JSON.parse(JSON.stringify(r7.main.data.getObjectFromData(t7)))).selected = true, r7.main.config.isMultiple ? (n11 = JSON.parse(JSON.stringify(l9))).push(i8) : n11 = JSON.parse(JSON.stringify(i8)), false !== r7.main.beforeOnChange(n11) && r7.main.set(t7, "id", r7.main.config.closeOnSelect)) : r7.main.set(t7, "id", r7.main.config.closeOnSelect));
        });
        e13 = l9 && (0, n10.isValueInArrayOfObjects)(l9, "id", o12.id);
        return (o12.disabled || e13) && (t6.onclick = null, r7.main.config.allowDeselectOption || t6.classList.add(this.main.config.disabled), r7.main.config.hideSelectedOption && t6.classList.add(this.main.config.hide)), e13 ? t6.classList.add(this.main.config.optionSelected) : t6.classList.remove(this.main.config.optionSelected), t6;
      }, s9);
      function s9(e13) {
        this.main = e13.main, this.container = this.containerDiv(), this.content = this.contentDiv(), this.search = this.searchDiv(), this.list = this.listDiv(), this.options(), this.singleSelected = null, this.multiSelected = null, this.main.config.isMultiple ? (this.multiSelected = this.multiSelectedDiv(), this.multiSelected && this.container.appendChild(this.multiSelected.container)) : (this.singleSelected = this.singleSelectedDiv(), this.container.appendChild(this.singleSelected.container)), this.main.config.addToBody ? (this.content.classList.add(this.main.config.id), document.body.appendChild(this.content)) : this.container.appendChild(this.content), this.content.appendChild(this.search.container), this.content.appendChild(this.list);
      }
      t5.Slim = i7;
    }], s8.c = n9, s8.d = function(e12, t5, i7) {
      s8.o(e12, t5) || Object.defineProperty(e12, t5, { enumerable: true, get: i7 });
    }, s8.r = function(e12) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e12, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e12, "__esModule", { value: true });
    }, s8.t = function(t5, e12) {
      if (1 & e12 && (t5 = s8(t5)), 8 & e12)
        return t5;
      if (4 & e12 && "object" == typeof t5 && t5 && t5.__esModule)
        return t5;
      var i7 = /* @__PURE__ */ Object.create(null);
      if (s8.r(i7), Object.defineProperty(i7, "default", { enumerable: true, value: t5 }), 2 & e12 && "string" != typeof t5)
        for (var n10 in t5)
          s8.d(i7, n10, function(e13) {
            return t5[e13];
          }.bind(null, n10));
      return i7;
    }, s8.n = function(e12) {
      var t5 = e12 && e12.__esModule ? function() {
        return e12.default;
      } : function() {
        return e12;
      };
      return s8.d(t5, "a", t5), t5;
    }, s8.o = function(e12, t5) {
      return Object.prototype.hasOwnProperty.call(e12, t5);
    }, s8.p = "", s8(s8.s = 2).default;
    function s8(e12) {
      if (n9[e12])
        return n9[e12].exports;
      var t5 = n9[e12] = { i: e12, l: false, exports: {} };
      return i6[e12].call(t5.exports, t5, t5.exports, s8), t5.l = true, t5.exports;
    }
    var i6, n9;
  });
  var slimselect_min_default = exports.SlimSelect;

  // controllers/select_controller.js
  var select_controller_default = class extends Controller {
    connect() {
      this.select = new slimselect_min_default({ select: this.element });
    }
    disconnect() {
      this.select.destroy();
    }
  };

  // controllers/stripe_controller.js
  var stripe_controller_exports = {};
  __export(stripe_controller_exports, {
    default: () => stripe_controller_default
  });
  var stripe_controller_default = class extends Controller {
    connect() {
      this.stripe = Stripe(this.stripeKey);
      this.elements = this.stripe.elements({
        appearance: {
          theme: "stripe",
          variables: {
            fontSizeBase: "14px"
          }
        },
        clientSecret: this.clientSecretValue
      });
      this.paymentElement = this.elements.create("payment");
      this.paymentElement.mount(this.paymentElementTarget);
    }
    changed(event) {
      if (event.error) {
        this.errorTarget.textContent = event.error.message;
      } else {
        this.errorTarget.textContent = "";
      }
    }
    async submit(event) {
      event.preventDefault();
      Rails.disableElement(this.formTarget);
      if (this.clientSecretValue.startsWith("pi_")) {
        const { error: error2 } = await this.stripe.confirmPayment({
          elements: this.elements,
          confirmParams: {
            return_url: this.returnUrlValue
          }
        });
        this.showError(error2);
      } else {
        const { error: error2 } = await this.stripe.confirmSetup({
          elements: this.elements,
          confirmParams: {
            return_url: this.returnUrlValue
          }
        });
        this.showError(error2);
      }
    }
    showError(error2) {
      this.errorTarget.textContent = error2.message;
      setTimeout(() => {
        Rails.enableElement(this.formTarget);
      }, 100);
    }
    get stripeKey() {
      return document.querySelector('meta[name="stripe-key"]').getAttribute("content");
    }
  };
  __publicField(stripe_controller_default, "targets", ["paymentElement", "error", "form"]);
  __publicField(stripe_controller_default, "values", {
    clientSecret: String,
    returnUrl: String
  });

  // controllers/tooltip_controller.js
  var tooltip_controller_exports = {};
  __export(tooltip_controller_exports, {
    default: () => tooltip_controller_default
  });
  var tooltip_controller_default = class extends Controller {
    connect() {
      let options2 = {};
      if (this.hasContentValue) {
        options2["content"] = this.contentValue;
      }
      this.tippy = tippy_esm_default(this.element, options2);
    }
    disconnect() {
      this.tippy.destroy();
    }
  };
  __publicField(tooltip_controller_default, "values", {
    content: String
  });

  // controllers/turbo_native/sign_out_controller.js
  var sign_out_controller_exports = {};
  __export(sign_out_controller_exports, {
    default: () => sign_out_controller_default
  });
  var sign_out_controller_default = class extends Controller {
    signOut(event) {
      if (this._isTurboNativeApp) {
        event.preventDefault();
        event.stopImmediatePropagation();
        window.TurboNativeBridge.postMessage("signOut");
      }
    }
    get _isTurboNativeApp() {
      return navigator.userAgent.indexOf("Turbo Native") !== -1;
    }
  };

  // rails:/Users/fuchsfelipel/code/parkar-rails/app/javascript/controllers/**/*_controller.js
  var modules = [{ name: "accounts", module: accounts_controller_exports, filename: "./accounts_controller.js" }, { name: "braintree", module: braintree_controller_exports, filename: "./braintree_controller.js" }, { name: "bulk", module: bulk_controller_exports, filename: "./bulk_controller.js" }, { name: "clipboard", module: clipboard_controller_exports, filename: "./clipboard_controller.js" }, { name: "command-palette", module: command_palette_controller_exports, filename: "./command_palette_controller.js" }, { name: "mentions", module: mentions_controller_exports, filename: "./mentions_controller.js" }, { name: "notifications", module: notifications_controller_exports, filename: "./notifications_controller.js" }, { name: "paddle", module: paddle_controller_exports, filename: "./paddle_controller.js" }, { name: "paypal", module: paypal_controller_exports, filename: "./paypal_controller.js" }, { name: "pricing", module: pricing_controller_exports, filename: "./pricing_controller.js" }, { name: "select", module: select_controller_exports, filename: "./select_controller.js" }, { name: "stripe", module: stripe_controller_exports, filename: "./stripe_controller.js" }, { name: "tooltip", module: tooltip_controller_exports, filename: "./tooltip_controller.js" }, { name: "turbo-native--sign-out", module: sign_out_controller_exports, filename: "./turbo_native/sign_out_controller.js" }];
  var controller_default = modules;

  // ../../node_modules/tailwindcss-stimulus-components/dist/tailwindcss-stimulus-components.modern.js
  var s7 = class extends Controller {
    initialize() {
      this.hide();
    }
    connect() {
      setTimeout(() => {
        this.show();
      }, this.showDelayValue), this.hasDismissAfterValue && setTimeout(() => {
        this.close();
      }, this.dismissAfterValue);
    }
    close() {
      this.hide(), setTimeout(() => {
        this.element.remove();
      }, this.removeDelayValue);
    }
    show() {
      this.element.classList.add(...this.showClasses), this.element.classList.remove(...this.hideClasses);
    }
    hide() {
      this.element.classList.add(...this.hideClasses), this.element.classList.remove(...this.showClasses);
    }
  };
  s7.values = { dismissAfter: Number, showDelay: { type: Number, default: 200 }, removeDelay: { type: Number, default: 1100 } }, s7.classes = ["show", "hide"];
  var e11 = class extends Controller {
    connect() {
      this.timeout = null, this.duration = this.data.get("duration") || 1e3;
    }
    save() {
      clearTimeout(this.timeout), this.timeout = setTimeout(() => {
        this.statusTarget.textContent = "Saving...", Rails.fire(this.formTarget, "submit");
      }, this.duration);
    }
    success() {
      this.setStatus("Saved!");
    }
    error() {
      this.setStatus("Unable to save!");
    }
    setStatus(t5) {
      this.statusTarget.textContent = t5, this.timeout = setTimeout(() => {
        this.statusTarget.textContent = "";
      }, 2e3);
    }
  };
  e11.targets = ["form", "status"];
  var i5 = class extends Controller {
    constructor(...t5) {
      super(...t5), this._onMenuButtonKeydown = (t6) => {
        switch (t6.keyCode) {
          case 13:
          case 32:
            t6.preventDefault(), this.toggle();
        }
      };
    }
    connect() {
      this.toggleClass = this.data.get("class") || "hidden", this.visibleClass = this.data.get("visibleClass") || null, this.invisibleClass = this.data.get("invisibleClass") || null, this.activeClass = this.data.get("activeClass") || null, this.enteringClass = this.data.get("enteringClass") || null, this.leavingClass = this.data.get("leavingClass") || null, this.hasButtonTarget && this.buttonTarget.addEventListener("keydown", this._onMenuButtonKeydown), this.element.setAttribute("aria-haspopup", "true");
    }
    disconnect() {
      this.hasButtonTarget && this.buttonTarget.removeEventListener("keydown", this._onMenuButtonKeydown);
    }
    toggle() {
      this.openValue = !this.openValue;
    }
    openValueChanged() {
      this.openValue ? this._show() : this._hide();
    }
    _show(t5) {
      setTimeout((() => {
        this.menuTarget.classList.remove(this.toggleClass), this.element.setAttribute("aria-expanded", "true"), this._enteringClassList[0].forEach(((t6) => {
          this.menuTarget.classList.add(t6);
        }).bind(this)), this._activeClassList[0].forEach((t6) => {
          this.activeTarget.classList.add(t6);
        }), this._invisibleClassList[0].forEach((t6) => this.menuTarget.classList.remove(t6)), this._visibleClassList[0].forEach((t6) => {
          this.menuTarget.classList.add(t6);
        }), setTimeout((() => {
          this._enteringClassList[0].forEach((t6) => this.menuTarget.classList.remove(t6));
        }).bind(this), this.enterTimeout[0]), "function" == typeof t5 && t5();
      }).bind(this));
    }
    _hide(t5) {
      setTimeout((() => {
        this.element.setAttribute("aria-expanded", "false"), this._invisibleClassList[0].forEach((t6) => this.menuTarget.classList.add(t6)), this._visibleClassList[0].forEach((t6) => this.menuTarget.classList.remove(t6)), this._activeClassList[0].forEach((t6) => this.activeTarget.classList.remove(t6)), this._leavingClassList[0].forEach((t6) => this.menuTarget.classList.add(t6)), setTimeout((() => {
          this._leavingClassList[0].forEach((t6) => this.menuTarget.classList.remove(t6)), "function" == typeof t5 && t5(), this.menuTarget.classList.add(this.toggleClass);
        }).bind(this), this.leaveTimeout[0]);
      }).bind(this));
    }
    show() {
      this.openValue = true;
    }
    hide(t5) {
      false === this.element.contains(t5.target) && this.openValue && (this.openValue = false);
    }
    get activeTarget() {
      return this.data.has("activeTarget") ? document.querySelector(this.data.get("activeTarget")) : this.element;
    }
    get _activeClassList() {
      return this.activeClass ? this.activeClass.split(",").map((t5) => t5.split(" ")) : [[], []];
    }
    get _visibleClassList() {
      return this.visibleClass ? this.visibleClass.split(",").map((t5) => t5.split(" ")) : [[], []];
    }
    get _invisibleClassList() {
      return this.invisibleClass ? this.invisibleClass.split(",").map((t5) => t5.split(" ")) : [[], []];
    }
    get _enteringClassList() {
      return this.enteringClass ? this.enteringClass.split(",").map((t5) => t5.split(" ")) : [[], []];
    }
    get _leavingClassList() {
      return this.leavingClass ? this.leavingClass.split(",").map((t5) => t5.split(" ")) : [[], []];
    }
    get enterTimeout() {
      return (this.data.get("enterTimeout") || "0,0").split(",").map((t5) => parseInt(t5));
    }
    get leaveTimeout() {
      return (this.data.get("leaveTimeout") || "0,0").split(",").map((t5) => parseInt(t5));
    }
  };
  i5.targets = ["menu", "button"], i5.values = { open: Boolean };
  var a3 = class extends Controller {
    connect() {
      this.toggleClass = this.data.get("class") || "hidden", this.backgroundId = this.data.get("backgroundId") || "modal-background", this.backgroundHtml = this.data.get("backgroundHtml") || this._backgroundHTML(), this.allowBackgroundClose = "true" === (this.data.get("allowBackgroundClose") || "true"), this.preventDefaultActionOpening = "true" === (this.data.get("preventDefaultActionOpening") || "true"), this.preventDefaultActionClosing = "true" === (this.data.get("preventDefaultActionClosing") || "true");
    }
    disconnect() {
      this.close();
    }
    open(t5) {
      this.preventDefaultActionOpening && t5.preventDefault(), t5.target.blur && t5.target.blur(), this.lockScroll(), this.containerTarget.classList.remove(this.toggleClass), this.data.get("disable-backdrop") || (document.body.insertAdjacentHTML("beforeend", this.backgroundHtml), this.background = document.querySelector(`#${this.backgroundId}`));
    }
    close(t5) {
      t5 && this.preventDefaultActionClosing && t5.preventDefault(), this.unlockScroll(), this.containerTarget.classList.add(this.toggleClass), this.background && this.background.remove();
    }
    closeBackground(t5) {
      this.allowBackgroundClose && t5.target === this.containerTarget && this.close(t5);
    }
    closeWithKeyboard(t5) {
      27 !== t5.keyCode || this.containerTarget.classList.contains(this.toggleClass) || this.close(t5);
    }
    _backgroundHTML() {
      return `<div id="${this.backgroundId}" class="fixed top-0 left-0 w-full h-full" style="background-color: ${this.backdropColorValue}; z-index: 9998;"></div>`;
    }
    lockScroll() {
      const t5 = window.innerWidth - document.documentElement.clientWidth;
      document.body.style.paddingRight = `${t5}px`, this.saveScrollPosition(), document.body.classList.add("fixed", "inset-x-0", "overflow-hidden"), document.body.style.top = `-${this.scrollPosition}px`;
    }
    unlockScroll() {
      document.body.style.paddingRight = null, document.body.classList.remove("fixed", "inset-x-0", "overflow-hidden"), this.restoreScrollValue && this.restoreScrollPosition(), document.body.style.top = null;
    }
    saveScrollPosition() {
      this.scrollPosition = window.pageYOffset || document.body.scrollTop;
    }
    restoreScrollPosition() {
      void 0 !== this.scrollPosition && (document.documentElement.scrollTop = this.scrollPosition);
    }
  };
  a3.targets = ["container"], a3.values = { backdropColor: { type: String, default: "rgba(0, 0, 0, 0.8)" }, restoreScroll: { type: Boolean, default: true } };
  var l8 = class extends Controller {
    connect() {
      this.activeTabClasses = (this.data.get("activeTab") || "active").split(" "), this.inactiveTabClasses = (this.data.get("inactiveTab") || "inactive").split(" "), this.anchor && (this.index = this.tabTargets.findIndex((t5) => t5.id === this.anchor)), this.showTab();
    }
    change(t5) {
      t5.preventDefault(), this.index = t5.currentTarget.dataset.index ? t5.currentTarget.dataset.index : t5.currentTarget.dataset.id ? this.tabTargets.findIndex((s8) => s8.id == t5.currentTarget.dataset.id) : this.tabTargets.indexOf(t5.currentTarget), window.dispatchEvent(new CustomEvent("tsc:tab-change"));
    }
    showTab() {
      this.tabTargets.forEach((t5, s8) => {
        const e12 = this.panelTargets[s8];
        s8 === this.index ? (e12.classList.remove("hidden"), t5.classList.remove(...this.inactiveTabClasses), t5.classList.add(...this.activeTabClasses), t5.id && (location.hash = t5.id)) : (e12.classList.add("hidden"), t5.classList.remove(...this.activeTabClasses), t5.classList.add(...this.inactiveTabClasses));
      });
    }
    get index() {
      return parseInt(this.data.get("index") || 0);
    }
    set index(t5) {
      this.data.set("index", t5 >= 0 ? t5 : 0), this.showTab();
    }
    get anchor() {
      return document.URL.split("#").length > 1 ? document.URL.split("#")[1] : null;
    }
  };
  l8.targets = ["tab", "panel"];
  var o10 = class extends Controller {
    connect() {
      this.toggleClass = this.data.get("class") || "hidden";
    }
    toggle(t5) {
      t5.preventDefault(), this.openValue = !this.openValue;
    }
    hide(t5) {
      t5.preventDefault(), this.openValue = false;
    }
    show(t5) {
      t5.preventDefault(), this.openValue = true;
    }
    openValueChanged() {
      this.toggleClass && this.toggleableTargets.forEach((t5) => {
        t5.classList.toggle(this.toggleClass);
      });
    }
  };
  o10.targets = ["toggleable"], o10.values = { open: Boolean };
  var n8 = class extends Controller {
    initialize() {
      this.contentTarget.setAttribute("style", `transform:translate(${this.data.get("translateX")}, ${this.data.get("translateY")});`);
    }
    mouseOver() {
      this.contentTarget.classList.remove("hidden");
    }
    mouseOut() {
      this.contentTarget.classList.add("hidden");
    }
    toggle() {
      this.contentTarget.classList.contains("hidden") ? this.contentTarget.classList.remove("hidden") : this.contentTarget.classList.add("hidden");
    }
  };
  n8.targets = ["content"];
  var r6 = class extends i5 {
    _show() {
      this.overlayTarget.classList.remove(this.toggleClass), super._show((() => {
        this._activeClassList[1].forEach((t5) => this.overlayTarget.classList.add(t5)), this._invisibleClassList[1].forEach((t5) => this.overlayTarget.classList.remove(t5)), this._visibleClassList[1].forEach((t5) => this.overlayTarget.classList.add(t5)), setTimeout((() => {
          this._enteringClassList[1].forEach((t5) => this.overlayTarget.classList.remove(t5));
        }).bind(this), this.enterTimeout[1]);
      }).bind(this));
    }
    _hide() {
      this._leavingClassList[1].forEach((t5) => this.overlayTarget.classList.add(t5)), super._hide((() => {
        setTimeout((() => {
          this._visibleClassList[1].forEach((t5) => this.overlayTarget.classList.remove(t5)), this._invisibleClassList[1].forEach((t5) => this.overlayTarget.classList.add(t5)), this._activeClassList[1].forEach((t5) => this.overlayTarget.classList.remove(t5)), this._leavingClassList[1].forEach((t5) => this.overlayTarget.classList.remove(t5)), this.overlayTarget.classList.add(this.toggleClass);
        }).bind(this), this.leaveTimeout[1]);
      }).bind(this));
    }
  };
  r6.targets = ["menu", "overlay"];
  var h5 = class extends Controller {
    connect() {
      this.styleProperty = this.data.get("style") || "backgroundColor";
    }
    update() {
      this.preview = this.color;
    }
    set preview(t5) {
      this.previewTarget.style[this.styleProperty] = t5;
      const s8 = this._getContrastYIQ(t5);
      "color" === this.styleProperty ? this.previewTarget.style.backgroundColor = s8 : this.previewTarget.style.color = s8;
    }
    get color() {
      return this.colorTarget.value;
    }
    _getContrastYIQ(t5) {
      return t5 = t5.replace("#", ""), (299 * parseInt(t5.substr(0, 2), 16) + 587 * parseInt(t5.substr(2, 2), 16) + 114 * parseInt(t5.substr(4, 2), 16)) / 1e3 >= 128 ? "#000" : "#fff";
    }
  };
  h5.targets = ["preview", "color"];

  // ../../node_modules/flatpickr/dist/esm/types/options.js
  var HOOKS = [
    "onChange",
    "onClose",
    "onDayCreate",
    "onDestroy",
    "onKeyDown",
    "onMonthChange",
    "onOpen",
    "onParseConfig",
    "onReady",
    "onValueUpdate",
    "onYearChange",
    "onPreCalendarPosition"
  ];
  var defaults = {
    _disable: [],
    allowInput: false,
    allowInvalidPreload: false,
    altFormat: "F j, Y",
    altInput: false,
    altInputClass: "form-control input",
    animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
    ariaDateFormat: "F j, Y",
    autoFillDefaultTime: true,
    clickOpens: true,
    closeOnSelect: true,
    conjunction: ", ",
    dateFormat: "Y-m-d",
    defaultHour: 12,
    defaultMinute: 0,
    defaultSeconds: 0,
    disable: [],
    disableMobile: false,
    enableSeconds: false,
    enableTime: false,
    errorHandler: function(err) {
      return typeof console !== "undefined" && console.warn(err);
    },
    getWeek: function(givenDate) {
      var date = new Date(givenDate.getTime());
      date.setHours(0, 0, 0, 0);
      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
      var week1 = new Date(date.getFullYear(), 0, 4);
      return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
    },
    hourIncrement: 1,
    ignoredFocusElements: [],
    inline: false,
    locale: "default",
    minuteIncrement: 5,
    mode: "single",
    monthSelectorType: "dropdown",
    nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
    noCalendar: false,
    now: new Date(),
    onChange: [],
    onClose: [],
    onDayCreate: [],
    onDestroy: [],
    onKeyDown: [],
    onMonthChange: [],
    onOpen: [],
    onParseConfig: [],
    onReady: [],
    onValueUpdate: [],
    onYearChange: [],
    onPreCalendarPosition: [],
    plugins: [],
    position: "auto",
    positionElement: void 0,
    prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
    shorthandCurrentMonth: false,
    showMonths: 1,
    static: false,
    time_24hr: false,
    weekNumbers: false,
    wrap: false
  };

  // ../../node_modules/flatpickr/dist/esm/l10n/default.js
  var english = {
    weekdays: {
      shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      longhand: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    months: {
      shorthand: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ],
      longhand: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ]
    },
    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    firstDayOfWeek: 0,
    ordinal: function(nth) {
      var s8 = nth % 100;
      if (s8 > 3 && s8 < 21)
        return "th";
      switch (s8 % 10) {
        case 1:
          return "st";
        case 2:
          return "nd";
        case 3:
          return "rd";
        default:
          return "th";
      }
    },
    rangeSeparator: " to ",
    weekAbbreviation: "Wk",
    scrollTitle: "Scroll to increment",
    toggleTitle: "Click to toggle",
    amPM: ["AM", "PM"],
    yearAriaLabel: "Year",
    monthAriaLabel: "Month",
    hourAriaLabel: "Hour",
    minuteAriaLabel: "Minute",
    time_24hr: false
  };
  var default_default = english;

  // ../../node_modules/flatpickr/dist/esm/utils/index.js
  var pad = function(number, length) {
    if (length === void 0) {
      length = 2;
    }
    return ("000" + number).slice(length * -1);
  };
  var int = function(bool) {
    return bool === true ? 1 : 0;
  };
  function debounce3(fn2, wait) {
    var t5;
    return function() {
      var _this = this;
      var args = arguments;
      clearTimeout(t5);
      t5 = setTimeout(function() {
        return fn2.apply(_this, args);
      }, wait);
    };
  }
  var arrayify = function(obj) {
    return obj instanceof Array ? obj : [obj];
  };

  // ../../node_modules/flatpickr/dist/esm/utils/dom.js
  function toggleClass(elem, className, bool) {
    if (bool === true)
      return elem.classList.add(className);
    elem.classList.remove(className);
  }
  function createElement(tag, className, content) {
    var e12 = window.document.createElement(tag);
    className = className || "";
    content = content || "";
    e12.className = className;
    if (content !== void 0)
      e12.textContent = content;
    return e12;
  }
  function clearNode(node) {
    while (node.firstChild)
      node.removeChild(node.firstChild);
  }
  function findParent(node, condition) {
    if (condition(node))
      return node;
    else if (node.parentNode)
      return findParent(node.parentNode, condition);
    return void 0;
  }
  function createNumberInput(inputClassName, opts) {
    var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
    if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
      numInput.type = "number";
    } else {
      numInput.type = "text";
      numInput.pattern = "\\d*";
    }
    if (opts !== void 0)
      for (var key in opts)
        numInput.setAttribute(key, opts[key]);
    wrapper.appendChild(numInput);
    wrapper.appendChild(arrowUp);
    wrapper.appendChild(arrowDown);
    return wrapper;
  }
  function getEventTarget(event) {
    try {
      if (typeof event.composedPath === "function") {
        var path = event.composedPath();
        return path[0];
      }
      return event.target;
    } catch (error2) {
      return event.target;
    }
  }

  // ../../node_modules/flatpickr/dist/esm/utils/formatting.js
  var doNothing = function() {
    return void 0;
  };
  var monthToStr = function(monthNumber, shorthand, locale) {
    return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
  };
  var revFormat = {
    D: doNothing,
    F: function(dateObj, monthName, locale) {
      dateObj.setMonth(locale.months.longhand.indexOf(monthName));
    },
    G: function(dateObj, hour) {
      dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    H: function(dateObj, hour) {
      dateObj.setHours(parseFloat(hour));
    },
    J: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    K: function(dateObj, amPM, locale) {
      dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
    },
    M: function(dateObj, shortMonth, locale) {
      dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
    },
    S: function(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    U: function(_2, unixSeconds) {
      return new Date(parseFloat(unixSeconds) * 1e3);
    },
    W: function(dateObj, weekNum, locale) {
      var weekNumber = parseInt(weekNum);
      var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
      date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
      return date;
    },
    Y: function(dateObj, year) {
      dateObj.setFullYear(parseFloat(year));
    },
    Z: function(_2, ISODate) {
      return new Date(ISODate);
    },
    d: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    h: function(dateObj, hour) {
      dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    i: function(dateObj, minutes) {
      dateObj.setMinutes(parseFloat(minutes));
    },
    j: function(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    l: doNothing,
    m: function(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    n: function(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    s: function(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    u: function(_2, unixMillSeconds) {
      return new Date(parseFloat(unixMillSeconds));
    },
    w: doNothing,
    y: function(dateObj, year) {
      dateObj.setFullYear(2e3 + parseFloat(year));
    }
  };
  var tokenRegex = {
    D: "",
    F: "",
    G: "(\\d\\d|\\d)",
    H: "(\\d\\d|\\d)",
    J: "(\\d\\d|\\d)\\w+",
    K: "",
    M: "",
    S: "(\\d\\d|\\d)",
    U: "(.+)",
    W: "(\\d\\d|\\d)",
    Y: "(\\d{4})",
    Z: "(.+)",
    d: "(\\d\\d|\\d)",
    h: "(\\d\\d|\\d)",
    i: "(\\d\\d|\\d)",
    j: "(\\d\\d|\\d)",
    l: "",
    m: "(\\d\\d|\\d)",
    n: "(\\d\\d|\\d)",
    s: "(\\d\\d|\\d)",
    u: "(.+)",
    w: "(\\d\\d|\\d)",
    y: "(\\d{2})"
  };
  var formats = {
    Z: function(date) {
      return date.toISOString();
    },
    D: function(date, locale, options2) {
      return locale.weekdays.shorthand[formats.w(date, locale, options2)];
    },
    F: function(date, locale, options2) {
      return monthToStr(formats.n(date, locale, options2) - 1, false, locale);
    },
    G: function(date, locale, options2) {
      return pad(formats.h(date, locale, options2));
    },
    H: function(date) {
      return pad(date.getHours());
    },
    J: function(date, locale) {
      return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
    },
    K: function(date, locale) {
      return locale.amPM[int(date.getHours() > 11)];
    },
    M: function(date, locale) {
      return monthToStr(date.getMonth(), true, locale);
    },
    S: function(date) {
      return pad(date.getSeconds());
    },
    U: function(date) {
      return date.getTime() / 1e3;
    },
    W: function(date, _2, options2) {
      return options2.getWeek(date);
    },
    Y: function(date) {
      return pad(date.getFullYear(), 4);
    },
    d: function(date) {
      return pad(date.getDate());
    },
    h: function(date) {
      return date.getHours() % 12 ? date.getHours() % 12 : 12;
    },
    i: function(date) {
      return pad(date.getMinutes());
    },
    j: function(date) {
      return date.getDate();
    },
    l: function(date, locale) {
      return locale.weekdays.longhand[date.getDay()];
    },
    m: function(date) {
      return pad(date.getMonth() + 1);
    },
    n: function(date) {
      return date.getMonth() + 1;
    },
    s: function(date) {
      return date.getSeconds();
    },
    u: function(date) {
      return date.getTime();
    },
    w: function(date) {
      return date.getDay();
    },
    y: function(date) {
      return String(date.getFullYear()).substring(2);
    }
  };

  // ../../node_modules/flatpickr/dist/esm/utils/dates.js
  var createDateFormatter = function(_a) {
    var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
    return function(dateObj, frmt, overrideLocale) {
      var locale = overrideLocale || l10n;
      if (config.formatDate !== void 0 && !isMobile) {
        return config.formatDate(dateObj, frmt, locale);
      }
      return frmt.split("").map(function(c6, i6, arr) {
        return formats[c6] && arr[i6 - 1] !== "\\" ? formats[c6](dateObj, locale, config) : c6 !== "\\" ? c6 : "";
      }).join("");
    };
  };
  var createDateParser = function(_a) {
    var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
    return function(date, givenFormat, timeless, customLocale) {
      if (date !== 0 && !date)
        return void 0;
      var locale = customLocale || l10n;
      var parsedDate;
      var dateOrig = date;
      if (date instanceof Date)
        parsedDate = new Date(date.getTime());
      else if (typeof date !== "string" && date.toFixed !== void 0)
        parsedDate = new Date(date);
      else if (typeof date === "string") {
        var format2 = givenFormat || (config || defaults).dateFormat;
        var datestr = String(date).trim();
        if (datestr === "today") {
          parsedDate = new Date();
          timeless = true;
        } else if (config && config.parseDate) {
          parsedDate = config.parseDate(date, format2);
        } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
          parsedDate = new Date(date);
        } else {
          var matched = void 0, ops = [];
          for (var i6 = 0, matchIndex = 0, regexStr = ""; i6 < format2.length; i6++) {
            var token = format2[i6];
            var isBackSlash = token === "\\";
            var escaped = format2[i6 - 1] === "\\" || isBackSlash;
            if (tokenRegex[token] && !escaped) {
              regexStr += tokenRegex[token];
              var match = new RegExp(regexStr).exec(date);
              if (match && (matched = true)) {
                ops[token !== "Y" ? "push" : "unshift"]({
                  fn: revFormat[token],
                  val: match[++matchIndex]
                });
              }
            } else if (!isBackSlash)
              regexStr += ".";
          }
          parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
          ops.forEach(function(_a2) {
            var fn2 = _a2.fn, val = _a2.val;
            return parsedDate = fn2(parsedDate, val, locale) || parsedDate;
          });
          parsedDate = matched ? parsedDate : void 0;
        }
      }
      if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
        config.errorHandler(new Error("Invalid date provided: " + dateOrig));
        return void 0;
      }
      if (timeless === true)
        parsedDate.setHours(0, 0, 0, 0);
      return parsedDate;
    };
  };
  function compareDates(date1, date2, timeless) {
    if (timeless === void 0) {
      timeless = true;
    }
    if (timeless !== false) {
      return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
    }
    return date1.getTime() - date2.getTime();
  }
  var isBetween = function(ts, ts1, ts2) {
    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };
  var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
    return hours * 3600 + minutes * 60 + seconds;
  };
  var parseSeconds = function(secondsSinceMidnight) {
    var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
    return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
  };
  var duration = {
    DAY: 864e5
  };
  function getDefaultHours(config) {
    var hours = config.defaultHour;
    var minutes = config.defaultMinute;
    var seconds = config.defaultSeconds;
    if (config.minDate !== void 0) {
      var minHour = config.minDate.getHours();
      var minMinutes = config.minDate.getMinutes();
      var minSeconds = config.minDate.getSeconds();
      if (hours < minHour) {
        hours = minHour;
      }
      if (hours === minHour && minutes < minMinutes) {
        minutes = minMinutes;
      }
      if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
        seconds = config.minDate.getSeconds();
    }
    if (config.maxDate !== void 0) {
      var maxHr = config.maxDate.getHours();
      var maxMinutes = config.maxDate.getMinutes();
      hours = Math.min(hours, maxHr);
      if (hours === maxHr)
        minutes = Math.min(maxMinutes, minutes);
      if (hours === maxHr && minutes === maxMinutes)
        seconds = config.maxDate.getSeconds();
    }
    return { hours, minutes, seconds };
  }

  // ../../node_modules/flatpickr/dist/esm/utils/polyfills.js
  if (typeof Object.assign !== "function") {
    Object.assign = function(target) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      if (!target) {
        throw TypeError("Cannot convert undefined or null to object");
      }
      var _loop_1 = function(source2) {
        if (source2) {
          Object.keys(source2).forEach(function(key) {
            return target[key] = source2[key];
          });
        }
      };
      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var source = args_1[_a];
        _loop_1(source);
      }
      return target;
    };
  }

  // ../../node_modules/flatpickr/dist/esm/index.js
  var __assign2 = function() {
    __assign2 = Object.assign || function(t5) {
      for (var s8, i6 = 1, n9 = arguments.length; i6 < n9; i6++) {
        s8 = arguments[i6];
        for (var p3 in s8)
          if (Object.prototype.hasOwnProperty.call(s8, p3))
            t5[p3] = s8[p3];
      }
      return t5;
    };
    return __assign2.apply(this, arguments);
  };
  var __spreadArrays2 = function() {
    for (var s8 = 0, i6 = 0, il = arguments.length; i6 < il; i6++)
      s8 += arguments[i6].length;
    for (var r7 = Array(s8), k2 = 0, i6 = 0; i6 < il; i6++)
      for (var a4 = arguments[i6], j = 0, jl = a4.length; j < jl; j++, k2++)
        r7[k2] = a4[j];
    return r7;
  };
  var DEBOUNCED_CHANGE_MS = 300;
  function FlatpickrInstance(element, instanceConfig) {
    var self2 = {
      config: __assign2(__assign2({}, defaults), flatpickr.defaultConfig),
      l10n: default_default
    };
    self2.parseDate = createDateParser({ config: self2.config, l10n: self2.l10n });
    self2._handlers = [];
    self2.pluginElements = [];
    self2.loadedPlugins = [];
    self2._bind = bind;
    self2._setHoursFromDate = setHoursFromDate;
    self2._positionCalendar = positionCalendar;
    self2.changeMonth = changeMonth;
    self2.changeYear = changeYear;
    self2.clear = clear;
    self2.close = close;
    self2.onMouseOver = onMouseOver;
    self2._createElement = createElement;
    self2.createDay = createDay;
    self2.destroy = destroy2;
    self2.isEnabled = isEnabled;
    self2.jumpToDate = jumpToDate;
    self2.updateValue = updateValue;
    self2.open = open;
    self2.redraw = redraw;
    self2.set = set;
    self2.setDate = setDate;
    self2.toggle = toggle;
    function setupHelperFunctions() {
      self2.utils = {
        getDaysInMonth: function(month, yr) {
          if (month === void 0) {
            month = self2.currentMonth;
          }
          if (yr === void 0) {
            yr = self2.currentYear;
          }
          if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
            return 29;
          return self2.l10n.daysInMonth[month];
        }
      };
    }
    function init2() {
      self2.element = self2.input = element;
      self2.isOpen = false;
      parseConfig();
      setupLocale();
      setupInputs();
      setupDates();
      setupHelperFunctions();
      if (!self2.isMobile)
        build();
      bindEvents();
      if (self2.selectedDates.length || self2.config.noCalendar) {
        if (self2.config.enableTime) {
          setHoursFromDate(self2.config.noCalendar ? self2.latestSelectedDateObj : void 0);
        }
        updateValue(false);
      }
      setCalendarWidth();
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      if (!self2.isMobile && isSafari) {
        positionCalendar();
      }
      triggerEvent("onReady");
    }
    function getClosestActiveElement() {
      var _a;
      return ((_a = self2.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
    }
    function bindToInstance(fn2) {
      return fn2.bind(self2);
    }
    function setCalendarWidth() {
      var config = self2.config;
      if (config.weekNumbers === false && config.showMonths === 1) {
        return;
      } else if (config.noCalendar !== true) {
        window.requestAnimationFrame(function() {
          if (self2.calendarContainer !== void 0) {
            self2.calendarContainer.style.visibility = "hidden";
            self2.calendarContainer.style.display = "block";
          }
          if (self2.daysContainer !== void 0) {
            var daysWidth = (self2.days.offsetWidth + 1) * config.showMonths;
            self2.daysContainer.style.width = daysWidth + "px";
            self2.calendarContainer.style.width = daysWidth + (self2.weekWrapper !== void 0 ? self2.weekWrapper.offsetWidth : 0) + "px";
            self2.calendarContainer.style.removeProperty("visibility");
            self2.calendarContainer.style.removeProperty("display");
          }
        });
      }
    }
    function updateTime(e12) {
      if (self2.selectedDates.length === 0) {
        var defaultDate = self2.config.minDate === void 0 || compareDates(new Date(), self2.config.minDate) >= 0 ? new Date() : new Date(self2.config.minDate.getTime());
        var defaults2 = getDefaultHours(self2.config);
        defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
        self2.selectedDates = [defaultDate];
        self2.latestSelectedDateObj = defaultDate;
      }
      if (e12 !== void 0 && e12.type !== "blur") {
        timeWrapper(e12);
      }
      var prevValue = self2._input.value;
      setHoursFromInputs();
      updateValue();
      if (self2._input.value !== prevValue) {
        self2._debouncedChange();
      }
    }
    function ampm2military(hour, amPM) {
      return hour % 12 + 12 * int(amPM === self2.l10n.amPM[1]);
    }
    function military2ampm(hour) {
      switch (hour % 24) {
        case 0:
        case 12:
          return 12;
        default:
          return hour % 12;
      }
    }
    function setHoursFromInputs() {
      if (self2.hourElement === void 0 || self2.minuteElement === void 0)
        return;
      var hours = (parseInt(self2.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self2.minuteElement.value, 10) || 0) % 60, seconds = self2.secondElement !== void 0 ? (parseInt(self2.secondElement.value, 10) || 0) % 60 : 0;
      if (self2.amPM !== void 0) {
        hours = ampm2military(hours, self2.amPM.textContent);
      }
      var limitMinHours = self2.config.minTime !== void 0 || self2.config.minDate && self2.minDateHasTime && self2.latestSelectedDateObj && compareDates(self2.latestSelectedDateObj, self2.config.minDate, true) === 0;
      var limitMaxHours = self2.config.maxTime !== void 0 || self2.config.maxDate && self2.maxDateHasTime && self2.latestSelectedDateObj && compareDates(self2.latestSelectedDateObj, self2.config.maxDate, true) === 0;
      if (self2.config.maxTime !== void 0 && self2.config.minTime !== void 0 && self2.config.minTime > self2.config.maxTime) {
        var minBound = calculateSecondsSinceMidnight(self2.config.minTime.getHours(), self2.config.minTime.getMinutes(), self2.config.minTime.getSeconds());
        var maxBound = calculateSecondsSinceMidnight(self2.config.maxTime.getHours(), self2.config.maxTime.getMinutes(), self2.config.maxTime.getSeconds());
        var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
        if (currentTime > maxBound && currentTime < minBound) {
          var result = parseSeconds(minBound);
          hours = result[0];
          minutes = result[1];
          seconds = result[2];
        }
      } else {
        if (limitMaxHours) {
          var maxTime = self2.config.maxTime !== void 0 ? self2.config.maxTime : self2.config.maxDate;
          hours = Math.min(hours, maxTime.getHours());
          if (hours === maxTime.getHours())
            minutes = Math.min(minutes, maxTime.getMinutes());
          if (minutes === maxTime.getMinutes())
            seconds = Math.min(seconds, maxTime.getSeconds());
        }
        if (limitMinHours) {
          var minTime = self2.config.minTime !== void 0 ? self2.config.minTime : self2.config.minDate;
          hours = Math.max(hours, minTime.getHours());
          if (hours === minTime.getHours() && minutes < minTime.getMinutes())
            minutes = minTime.getMinutes();
          if (minutes === minTime.getMinutes())
            seconds = Math.max(seconds, minTime.getSeconds());
        }
      }
      setHours(hours, minutes, seconds);
    }
    function setHoursFromDate(dateObj) {
      var date = dateObj || self2.latestSelectedDateObj;
      if (date && date instanceof Date) {
        setHours(date.getHours(), date.getMinutes(), date.getSeconds());
      }
    }
    function setHours(hours, minutes, seconds) {
      if (self2.latestSelectedDateObj !== void 0) {
        self2.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
      }
      if (!self2.hourElement || !self2.minuteElement || self2.isMobile)
        return;
      self2.hourElement.value = pad(!self2.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
      self2.minuteElement.value = pad(minutes);
      if (self2.amPM !== void 0)
        self2.amPM.textContent = self2.l10n.amPM[int(hours >= 12)];
      if (self2.secondElement !== void 0)
        self2.secondElement.value = pad(seconds);
    }
    function onYearInput(event) {
      var eventTarget = getEventTarget(event);
      var year = parseInt(eventTarget.value) + (event.delta || 0);
      if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
        changeYear(year);
      }
    }
    function bind(element2, event, handler, options2) {
      if (event instanceof Array)
        return event.forEach(function(ev) {
          return bind(element2, ev, handler, options2);
        });
      if (element2 instanceof Array)
        return element2.forEach(function(el) {
          return bind(el, event, handler, options2);
        });
      element2.addEventListener(event, handler, options2);
      self2._handlers.push({
        remove: function() {
          return element2.removeEventListener(event, handler, options2);
        }
      });
    }
    function triggerChange() {
      triggerEvent("onChange");
    }
    function bindEvents() {
      if (self2.config.wrap) {
        ["open", "close", "toggle", "clear"].forEach(function(evt) {
          Array.prototype.forEach.call(self2.element.querySelectorAll("[data-" + evt + "]"), function(el) {
            return bind(el, "click", self2[evt]);
          });
        });
      }
      if (self2.isMobile) {
        setupMobile();
        return;
      }
      var debouncedResize = debounce3(onResize, 50);
      self2._debouncedChange = debounce3(triggerChange, DEBOUNCED_CHANGE_MS);
      if (self2.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
        bind(self2.daysContainer, "mouseover", function(e12) {
          if (self2.config.mode === "range")
            onMouseOver(getEventTarget(e12));
        });
      bind(self2._input, "keydown", onKeyDown);
      if (self2.calendarContainer !== void 0) {
        bind(self2.calendarContainer, "keydown", onKeyDown);
      }
      if (!self2.config.inline && !self2.config.static)
        bind(window, "resize", debouncedResize);
      if (window.ontouchstart !== void 0)
        bind(window.document, "touchstart", documentClick);
      else
        bind(window.document, "mousedown", documentClick);
      bind(window.document, "focus", documentClick, { capture: true });
      if (self2.config.clickOpens === true) {
        bind(self2._input, "focus", self2.open);
        bind(self2._input, "click", self2.open);
      }
      if (self2.daysContainer !== void 0) {
        bind(self2.monthNav, "click", onMonthNavClick);
        bind(self2.monthNav, ["keyup", "increment"], onYearInput);
        bind(self2.daysContainer, "click", selectDate);
      }
      if (self2.timeContainer !== void 0 && self2.minuteElement !== void 0 && self2.hourElement !== void 0) {
        var selText = function(e12) {
          return getEventTarget(e12).select();
        };
        bind(self2.timeContainer, ["increment"], updateTime);
        bind(self2.timeContainer, "blur", updateTime, { capture: true });
        bind(self2.timeContainer, "click", timeIncrement);
        bind([self2.hourElement, self2.minuteElement], ["focus", "click"], selText);
        if (self2.secondElement !== void 0)
          bind(self2.secondElement, "focus", function() {
            return self2.secondElement && self2.secondElement.select();
          });
        if (self2.amPM !== void 0) {
          bind(self2.amPM, "click", function(e12) {
            updateTime(e12);
          });
        }
      }
      if (self2.config.allowInput) {
        bind(self2._input, "blur", onBlur);
      }
    }
    function jumpToDate(jumpDate, triggerChange2) {
      var jumpTo = jumpDate !== void 0 ? self2.parseDate(jumpDate) : self2.latestSelectedDateObj || (self2.config.minDate && self2.config.minDate > self2.now ? self2.config.minDate : self2.config.maxDate && self2.config.maxDate < self2.now ? self2.config.maxDate : self2.now);
      var oldYear = self2.currentYear;
      var oldMonth = self2.currentMonth;
      try {
        if (jumpTo !== void 0) {
          self2.currentYear = jumpTo.getFullYear();
          self2.currentMonth = jumpTo.getMonth();
        }
      } catch (e12) {
        e12.message = "Invalid date supplied: " + jumpTo;
        self2.config.errorHandler(e12);
      }
      if (triggerChange2 && self2.currentYear !== oldYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      if (triggerChange2 && (self2.currentYear !== oldYear || self2.currentMonth !== oldMonth)) {
        triggerEvent("onMonthChange");
      }
      self2.redraw();
    }
    function timeIncrement(e12) {
      var eventTarget = getEventTarget(e12);
      if (~eventTarget.className.indexOf("arrow"))
        incrementNumInput(e12, eventTarget.classList.contains("arrowUp") ? 1 : -1);
    }
    function incrementNumInput(e12, delta, inputElem) {
      var target = e12 && getEventTarget(e12);
      var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
      var event = createEvent("increment");
      event.delta = delta;
      input && input.dispatchEvent(event);
    }
    function build() {
      var fragment = window.document.createDocumentFragment();
      self2.calendarContainer = createElement("div", "flatpickr-calendar");
      self2.calendarContainer.tabIndex = -1;
      if (!self2.config.noCalendar) {
        fragment.appendChild(buildMonthNav());
        self2.innerContainer = createElement("div", "flatpickr-innerContainer");
        if (self2.config.weekNumbers) {
          var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
          self2.innerContainer.appendChild(weekWrapper);
          self2.weekNumbers = weekNumbers;
          self2.weekWrapper = weekWrapper;
        }
        self2.rContainer = createElement("div", "flatpickr-rContainer");
        self2.rContainer.appendChild(buildWeekdays());
        if (!self2.daysContainer) {
          self2.daysContainer = createElement("div", "flatpickr-days");
          self2.daysContainer.tabIndex = -1;
        }
        buildDays();
        self2.rContainer.appendChild(self2.daysContainer);
        self2.innerContainer.appendChild(self2.rContainer);
        fragment.appendChild(self2.innerContainer);
      }
      if (self2.config.enableTime) {
        fragment.appendChild(buildTime());
      }
      toggleClass(self2.calendarContainer, "rangeMode", self2.config.mode === "range");
      toggleClass(self2.calendarContainer, "animate", self2.config.animate === true);
      toggleClass(self2.calendarContainer, "multiMonth", self2.config.showMonths > 1);
      self2.calendarContainer.appendChild(fragment);
      var customAppend = self2.config.appendTo !== void 0 && self2.config.appendTo.nodeType !== void 0;
      if (self2.config.inline || self2.config.static) {
        self2.calendarContainer.classList.add(self2.config.inline ? "inline" : "static");
        if (self2.config.inline) {
          if (!customAppend && self2.element.parentNode)
            self2.element.parentNode.insertBefore(self2.calendarContainer, self2._input.nextSibling);
          else if (self2.config.appendTo !== void 0)
            self2.config.appendTo.appendChild(self2.calendarContainer);
        }
        if (self2.config.static) {
          var wrapper = createElement("div", "flatpickr-wrapper");
          if (self2.element.parentNode)
            self2.element.parentNode.insertBefore(wrapper, self2.element);
          wrapper.appendChild(self2.element);
          if (self2.altInput)
            wrapper.appendChild(self2.altInput);
          wrapper.appendChild(self2.calendarContainer);
        }
      }
      if (!self2.config.static && !self2.config.inline)
        (self2.config.appendTo !== void 0 ? self2.config.appendTo : window.document.body).appendChild(self2.calendarContainer);
    }
    function createDay(className, date, _dayNumber, i6) {
      var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
      dayElement.dateObj = date;
      dayElement.$i = i6;
      dayElement.setAttribute("aria-label", self2.formatDate(date, self2.config.ariaDateFormat));
      if (className.indexOf("hidden") === -1 && compareDates(date, self2.now) === 0) {
        self2.todayDateElem = dayElement;
        dayElement.classList.add("today");
        dayElement.setAttribute("aria-current", "date");
      }
      if (dateIsEnabled) {
        dayElement.tabIndex = -1;
        if (isDateSelected(date)) {
          dayElement.classList.add("selected");
          self2.selectedDateElem = dayElement;
          if (self2.config.mode === "range") {
            toggleClass(dayElement, "startRange", self2.selectedDates[0] && compareDates(date, self2.selectedDates[0], true) === 0);
            toggleClass(dayElement, "endRange", self2.selectedDates[1] && compareDates(date, self2.selectedDates[1], true) === 0);
            if (className === "nextMonthDay")
              dayElement.classList.add("inRange");
          }
        }
      } else {
        dayElement.classList.add("flatpickr-disabled");
      }
      if (self2.config.mode === "range") {
        if (isDateInRange(date) && !isDateSelected(date))
          dayElement.classList.add("inRange");
      }
      if (self2.weekNumbers && self2.config.showMonths === 1 && className !== "prevMonthDay" && i6 % 7 === 6) {
        self2.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self2.config.getWeek(date) + "</span>");
      }
      triggerEvent("onDayCreate", dayElement);
      return dayElement;
    }
    function focusOnDayElem(targetNode) {
      targetNode.focus();
      if (self2.config.mode === "range")
        onMouseOver(targetNode);
    }
    function getFirstAvailableDay(delta) {
      var startMonth = delta > 0 ? 0 : self2.config.showMonths - 1;
      var endMonth = delta > 0 ? self2.config.showMonths : -1;
      for (var m3 = startMonth; m3 != endMonth; m3 += delta) {
        var month = self2.daysContainer.children[m3];
        var startIndex = delta > 0 ? 0 : month.children.length - 1;
        var endIndex = delta > 0 ? month.children.length : -1;
        for (var i6 = startIndex; i6 != endIndex; i6 += delta) {
          var c6 = month.children[i6];
          if (c6.className.indexOf("hidden") === -1 && isEnabled(c6.dateObj))
            return c6;
        }
      }
      return void 0;
    }
    function getNextAvailableDay(current, delta) {
      var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self2.currentMonth;
      var endMonth = delta > 0 ? self2.config.showMonths : -1;
      var loopDelta = delta > 0 ? 1 : -1;
      for (var m3 = givenMonth - self2.currentMonth; m3 != endMonth; m3 += loopDelta) {
        var month = self2.daysContainer.children[m3];
        var startIndex = givenMonth - self2.currentMonth === m3 ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
        var numMonthDays = month.children.length;
        for (var i6 = startIndex; i6 >= 0 && i6 < numMonthDays && i6 != (delta > 0 ? numMonthDays : -1); i6 += loopDelta) {
          var c6 = month.children[i6];
          if (c6.className.indexOf("hidden") === -1 && isEnabled(c6.dateObj) && Math.abs(current.$i - i6) >= Math.abs(delta))
            return focusOnDayElem(c6);
        }
      }
      self2.changeMonth(loopDelta);
      focusOnDay(getFirstAvailableDay(loopDelta), 0);
      return void 0;
    }
    function focusOnDay(current, offset2) {
      var activeElement = getClosestActiveElement();
      var dayFocused = isInView(activeElement || document.body);
      var startElem = current !== void 0 ? current : dayFocused ? activeElement : self2.selectedDateElem !== void 0 && isInView(self2.selectedDateElem) ? self2.selectedDateElem : self2.todayDateElem !== void 0 && isInView(self2.todayDateElem) ? self2.todayDateElem : getFirstAvailableDay(offset2 > 0 ? 1 : -1);
      if (startElem === void 0) {
        self2._input.focus();
      } else if (!dayFocused) {
        focusOnDayElem(startElem);
      } else {
        getNextAvailableDay(startElem, offset2);
      }
    }
    function buildMonthDays(year, month) {
      var firstOfMonth = (new Date(year, month, 1).getDay() - self2.l10n.firstDayOfWeek + 7) % 7;
      var prevMonthDays = self2.utils.getDaysInMonth((month - 1 + 12) % 12, year);
      var daysInMonth = self2.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self2.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
      var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
      for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
      }
      for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
      }
      for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self2.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
        days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
      }
      var dayContainer = createElement("div", "dayContainer");
      dayContainer.appendChild(days);
      return dayContainer;
    }
    function buildDays() {
      if (self2.daysContainer === void 0) {
        return;
      }
      clearNode(self2.daysContainer);
      if (self2.weekNumbers)
        clearNode(self2.weekNumbers);
      var frag = document.createDocumentFragment();
      for (var i6 = 0; i6 < self2.config.showMonths; i6++) {
        var d3 = new Date(self2.currentYear, self2.currentMonth, 1);
        d3.setMonth(self2.currentMonth + i6);
        frag.appendChild(buildMonthDays(d3.getFullYear(), d3.getMonth()));
      }
      self2.daysContainer.appendChild(frag);
      self2.days = self2.daysContainer.firstChild;
      if (self2.config.mode === "range" && self2.selectedDates.length === 1) {
        onMouseOver();
      }
    }
    function buildMonthSwitch() {
      if (self2.config.showMonths > 1 || self2.config.monthSelectorType !== "dropdown")
        return;
      var shouldBuildMonth = function(month2) {
        if (self2.config.minDate !== void 0 && self2.currentYear === self2.config.minDate.getFullYear() && month2 < self2.config.minDate.getMonth()) {
          return false;
        }
        return !(self2.config.maxDate !== void 0 && self2.currentYear === self2.config.maxDate.getFullYear() && month2 > self2.config.maxDate.getMonth());
      };
      self2.monthsDropdownContainer.tabIndex = -1;
      self2.monthsDropdownContainer.innerHTML = "";
      for (var i6 = 0; i6 < 12; i6++) {
        if (!shouldBuildMonth(i6))
          continue;
        var month = createElement("option", "flatpickr-monthDropdown-month");
        month.value = new Date(self2.currentYear, i6).getMonth().toString();
        month.textContent = monthToStr(i6, self2.config.shorthandCurrentMonth, self2.l10n);
        month.tabIndex = -1;
        if (self2.currentMonth === i6) {
          month.selected = true;
        }
        self2.monthsDropdownContainer.appendChild(month);
      }
    }
    function buildMonth() {
      var container = createElement("div", "flatpickr-month");
      var monthNavFragment = window.document.createDocumentFragment();
      var monthElement;
      if (self2.config.showMonths > 1 || self2.config.monthSelectorType === "static") {
        monthElement = createElement("span", "cur-month");
      } else {
        self2.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
        self2.monthsDropdownContainer.setAttribute("aria-label", self2.l10n.monthAriaLabel);
        bind(self2.monthsDropdownContainer, "change", function(e12) {
          var target = getEventTarget(e12);
          var selectedMonth = parseInt(target.value, 10);
          self2.changeMonth(selectedMonth - self2.currentMonth);
          triggerEvent("onMonthChange");
        });
        buildMonthSwitch();
        monthElement = self2.monthsDropdownContainer;
      }
      var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
      var yearElement = yearInput.getElementsByTagName("input")[0];
      yearElement.setAttribute("aria-label", self2.l10n.yearAriaLabel);
      if (self2.config.minDate) {
        yearElement.setAttribute("min", self2.config.minDate.getFullYear().toString());
      }
      if (self2.config.maxDate) {
        yearElement.setAttribute("max", self2.config.maxDate.getFullYear().toString());
        yearElement.disabled = !!self2.config.minDate && self2.config.minDate.getFullYear() === self2.config.maxDate.getFullYear();
      }
      var currentMonth = createElement("div", "flatpickr-current-month");
      currentMonth.appendChild(monthElement);
      currentMonth.appendChild(yearInput);
      monthNavFragment.appendChild(currentMonth);
      container.appendChild(monthNavFragment);
      return {
        container,
        yearElement,
        monthElement
      };
    }
    function buildMonths() {
      clearNode(self2.monthNav);
      self2.monthNav.appendChild(self2.prevMonthNav);
      if (self2.config.showMonths) {
        self2.yearElements = [];
        self2.monthElements = [];
      }
      for (var m3 = self2.config.showMonths; m3--; ) {
        var month = buildMonth();
        self2.yearElements.push(month.yearElement);
        self2.monthElements.push(month.monthElement);
        self2.monthNav.appendChild(month.container);
      }
      self2.monthNav.appendChild(self2.nextMonthNav);
    }
    function buildMonthNav() {
      self2.monthNav = createElement("div", "flatpickr-months");
      self2.yearElements = [];
      self2.monthElements = [];
      self2.prevMonthNav = createElement("span", "flatpickr-prev-month");
      self2.prevMonthNav.innerHTML = self2.config.prevArrow;
      self2.nextMonthNav = createElement("span", "flatpickr-next-month");
      self2.nextMonthNav.innerHTML = self2.config.nextArrow;
      buildMonths();
      Object.defineProperty(self2, "_hidePrevMonthArrow", {
        get: function() {
          return self2.__hidePrevMonthArrow;
        },
        set: function(bool) {
          if (self2.__hidePrevMonthArrow !== bool) {
            toggleClass(self2.prevMonthNav, "flatpickr-disabled", bool);
            self2.__hidePrevMonthArrow = bool;
          }
        }
      });
      Object.defineProperty(self2, "_hideNextMonthArrow", {
        get: function() {
          return self2.__hideNextMonthArrow;
        },
        set: function(bool) {
          if (self2.__hideNextMonthArrow !== bool) {
            toggleClass(self2.nextMonthNav, "flatpickr-disabled", bool);
            self2.__hideNextMonthArrow = bool;
          }
        }
      });
      self2.currentYearElement = self2.yearElements[0];
      updateNavigationCurrentMonth();
      return self2.monthNav;
    }
    function buildTime() {
      self2.calendarContainer.classList.add("hasTime");
      if (self2.config.noCalendar)
        self2.calendarContainer.classList.add("noCalendar");
      var defaults2 = getDefaultHours(self2.config);
      self2.timeContainer = createElement("div", "flatpickr-time");
      self2.timeContainer.tabIndex = -1;
      var separator = createElement("span", "flatpickr-time-separator", ":");
      var hourInput = createNumberInput("flatpickr-hour", {
        "aria-label": self2.l10n.hourAriaLabel
      });
      self2.hourElement = hourInput.getElementsByTagName("input")[0];
      var minuteInput = createNumberInput("flatpickr-minute", {
        "aria-label": self2.l10n.minuteAriaLabel
      });
      self2.minuteElement = minuteInput.getElementsByTagName("input")[0];
      self2.hourElement.tabIndex = self2.minuteElement.tabIndex = -1;
      self2.hourElement.value = pad(self2.latestSelectedDateObj ? self2.latestSelectedDateObj.getHours() : self2.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
      self2.minuteElement.value = pad(self2.latestSelectedDateObj ? self2.latestSelectedDateObj.getMinutes() : defaults2.minutes);
      self2.hourElement.setAttribute("step", self2.config.hourIncrement.toString());
      self2.minuteElement.setAttribute("step", self2.config.minuteIncrement.toString());
      self2.hourElement.setAttribute("min", self2.config.time_24hr ? "0" : "1");
      self2.hourElement.setAttribute("max", self2.config.time_24hr ? "23" : "12");
      self2.hourElement.setAttribute("maxlength", "2");
      self2.minuteElement.setAttribute("min", "0");
      self2.minuteElement.setAttribute("max", "59");
      self2.minuteElement.setAttribute("maxlength", "2");
      self2.timeContainer.appendChild(hourInput);
      self2.timeContainer.appendChild(separator);
      self2.timeContainer.appendChild(minuteInput);
      if (self2.config.time_24hr)
        self2.timeContainer.classList.add("time24hr");
      if (self2.config.enableSeconds) {
        self2.timeContainer.classList.add("hasSeconds");
        var secondInput = createNumberInput("flatpickr-second");
        self2.secondElement = secondInput.getElementsByTagName("input")[0];
        self2.secondElement.value = pad(self2.latestSelectedDateObj ? self2.latestSelectedDateObj.getSeconds() : defaults2.seconds);
        self2.secondElement.setAttribute("step", self2.minuteElement.getAttribute("step"));
        self2.secondElement.setAttribute("min", "0");
        self2.secondElement.setAttribute("max", "59");
        self2.secondElement.setAttribute("maxlength", "2");
        self2.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
        self2.timeContainer.appendChild(secondInput);
      }
      if (!self2.config.time_24hr) {
        self2.amPM = createElement("span", "flatpickr-am-pm", self2.l10n.amPM[int((self2.latestSelectedDateObj ? self2.hourElement.value : self2.config.defaultHour) > 11)]);
        self2.amPM.title = self2.l10n.toggleTitle;
        self2.amPM.tabIndex = -1;
        self2.timeContainer.appendChild(self2.amPM);
      }
      return self2.timeContainer;
    }
    function buildWeekdays() {
      if (!self2.weekdayContainer)
        self2.weekdayContainer = createElement("div", "flatpickr-weekdays");
      else
        clearNode(self2.weekdayContainer);
      for (var i6 = self2.config.showMonths; i6--; ) {
        var container = createElement("div", "flatpickr-weekdaycontainer");
        self2.weekdayContainer.appendChild(container);
      }
      updateWeekdays();
      return self2.weekdayContainer;
    }
    function updateWeekdays() {
      if (!self2.weekdayContainer) {
        return;
      }
      var firstDayOfWeek = self2.l10n.firstDayOfWeek;
      var weekdays = __spreadArrays2(self2.l10n.weekdays.shorthand);
      if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
        weekdays = __spreadArrays2(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
      }
      for (var i6 = self2.config.showMonths; i6--; ) {
        self2.weekdayContainer.children[i6].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
      }
    }
    function buildWeeks() {
      self2.calendarContainer.classList.add("hasWeeks");
      var weekWrapper = createElement("div", "flatpickr-weekwrapper");
      weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self2.l10n.weekAbbreviation));
      var weekNumbers = createElement("div", "flatpickr-weeks");
      weekWrapper.appendChild(weekNumbers);
      return {
        weekWrapper,
        weekNumbers
      };
    }
    function changeMonth(value, isOffset) {
      if (isOffset === void 0) {
        isOffset = true;
      }
      var delta = isOffset ? value : value - self2.currentMonth;
      if (delta < 0 && self2._hidePrevMonthArrow === true || delta > 0 && self2._hideNextMonthArrow === true)
        return;
      self2.currentMonth += delta;
      if (self2.currentMonth < 0 || self2.currentMonth > 11) {
        self2.currentYear += self2.currentMonth > 11 ? 1 : -1;
        self2.currentMonth = (self2.currentMonth + 12) % 12;
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      buildDays();
      triggerEvent("onMonthChange");
      updateNavigationCurrentMonth();
    }
    function clear(triggerChangeEvent, toInitial) {
      if (triggerChangeEvent === void 0) {
        triggerChangeEvent = true;
      }
      if (toInitial === void 0) {
        toInitial = true;
      }
      self2.input.value = "";
      if (self2.altInput !== void 0)
        self2.altInput.value = "";
      if (self2.mobileInput !== void 0)
        self2.mobileInput.value = "";
      self2.selectedDates = [];
      self2.latestSelectedDateObj = void 0;
      if (toInitial === true) {
        self2.currentYear = self2._initialDate.getFullYear();
        self2.currentMonth = self2._initialDate.getMonth();
      }
      if (self2.config.enableTime === true) {
        var _a = getDefaultHours(self2.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
        setHours(hours, minutes, seconds);
      }
      self2.redraw();
      if (triggerChangeEvent)
        triggerEvent("onChange");
    }
    function close() {
      self2.isOpen = false;
      if (!self2.isMobile) {
        if (self2.calendarContainer !== void 0) {
          self2.calendarContainer.classList.remove("open");
        }
        if (self2._input !== void 0) {
          self2._input.classList.remove("active");
        }
      }
      triggerEvent("onClose");
    }
    function destroy2() {
      if (self2.config !== void 0)
        triggerEvent("onDestroy");
      for (var i6 = self2._handlers.length; i6--; ) {
        self2._handlers[i6].remove();
      }
      self2._handlers = [];
      if (self2.mobileInput) {
        if (self2.mobileInput.parentNode)
          self2.mobileInput.parentNode.removeChild(self2.mobileInput);
        self2.mobileInput = void 0;
      } else if (self2.calendarContainer && self2.calendarContainer.parentNode) {
        if (self2.config.static && self2.calendarContainer.parentNode) {
          var wrapper = self2.calendarContainer.parentNode;
          wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
          if (wrapper.parentNode) {
            while (wrapper.firstChild)
              wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
            wrapper.parentNode.removeChild(wrapper);
          }
        } else
          self2.calendarContainer.parentNode.removeChild(self2.calendarContainer);
      }
      if (self2.altInput) {
        self2.input.type = "text";
        if (self2.altInput.parentNode)
          self2.altInput.parentNode.removeChild(self2.altInput);
        delete self2.altInput;
      }
      if (self2.input) {
        self2.input.type = self2.input._type;
        self2.input.classList.remove("flatpickr-input");
        self2.input.removeAttribute("readonly");
      }
      [
        "_showTimeInput",
        "latestSelectedDateObj",
        "_hideNextMonthArrow",
        "_hidePrevMonthArrow",
        "__hideNextMonthArrow",
        "__hidePrevMonthArrow",
        "isMobile",
        "isOpen",
        "selectedDateElem",
        "minDateHasTime",
        "maxDateHasTime",
        "days",
        "daysContainer",
        "_input",
        "_positionElement",
        "innerContainer",
        "rContainer",
        "monthNav",
        "todayDateElem",
        "calendarContainer",
        "weekdayContainer",
        "prevMonthNav",
        "nextMonthNav",
        "monthsDropdownContainer",
        "currentMonthElement",
        "currentYearElement",
        "navigationCurrentMonth",
        "selectedDateElem",
        "config"
      ].forEach(function(k2) {
        try {
          delete self2[k2];
        } catch (_2) {
        }
      });
    }
    function isCalendarElem(elem) {
      return self2.calendarContainer.contains(elem);
    }
    function documentClick(e12) {
      if (self2.isOpen && !self2.config.inline) {
        var eventTarget_1 = getEventTarget(e12);
        var isCalendarElement = isCalendarElem(eventTarget_1);
        var isInput = eventTarget_1 === self2.input || eventTarget_1 === self2.altInput || self2.element.contains(eventTarget_1) || e12.path && e12.path.indexOf && (~e12.path.indexOf(self2.input) || ~e12.path.indexOf(self2.altInput));
        var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e12.relatedTarget);
        var isIgnored = !self2.config.ignoredFocusElements.some(function(elem) {
          return elem.contains(eventTarget_1);
        });
        if (lostFocus && isIgnored) {
          if (self2.config.allowInput) {
            self2.setDate(self2._input.value, false, self2.config.altInput ? self2.config.altFormat : self2.config.dateFormat);
          }
          if (self2.timeContainer !== void 0 && self2.minuteElement !== void 0 && self2.hourElement !== void 0 && self2.input.value !== "" && self2.input.value !== void 0) {
            updateTime();
          }
          self2.close();
          if (self2.config && self2.config.mode === "range" && self2.selectedDates.length === 1)
            self2.clear(false);
        }
      }
    }
    function changeYear(newYear) {
      if (!newYear || self2.config.minDate && newYear < self2.config.minDate.getFullYear() || self2.config.maxDate && newYear > self2.config.maxDate.getFullYear())
        return;
      var newYearNum = newYear, isNewYear = self2.currentYear !== newYearNum;
      self2.currentYear = newYearNum || self2.currentYear;
      if (self2.config.maxDate && self2.currentYear === self2.config.maxDate.getFullYear()) {
        self2.currentMonth = Math.min(self2.config.maxDate.getMonth(), self2.currentMonth);
      } else if (self2.config.minDate && self2.currentYear === self2.config.minDate.getFullYear()) {
        self2.currentMonth = Math.max(self2.config.minDate.getMonth(), self2.currentMonth);
      }
      if (isNewYear) {
        self2.redraw();
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
    }
    function isEnabled(date, timeless) {
      var _a;
      if (timeless === void 0) {
        timeless = true;
      }
      var dateToCheck = self2.parseDate(date, void 0, timeless);
      if (self2.config.minDate && dateToCheck && compareDates(dateToCheck, self2.config.minDate, timeless !== void 0 ? timeless : !self2.minDateHasTime) < 0 || self2.config.maxDate && dateToCheck && compareDates(dateToCheck, self2.config.maxDate, timeless !== void 0 ? timeless : !self2.maxDateHasTime) > 0)
        return false;
      if (!self2.config.enable && self2.config.disable.length === 0)
        return true;
      if (dateToCheck === void 0)
        return false;
      var bool = !!self2.config.enable, array = (_a = self2.config.enable) !== null && _a !== void 0 ? _a : self2.config.disable;
      for (var i6 = 0, d3 = void 0; i6 < array.length; i6++) {
        d3 = array[i6];
        if (typeof d3 === "function" && d3(dateToCheck))
          return bool;
        else if (d3 instanceof Date && dateToCheck !== void 0 && d3.getTime() === dateToCheck.getTime())
          return bool;
        else if (typeof d3 === "string") {
          var parsed = self2.parseDate(d3, void 0, true);
          return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
        } else if (typeof d3 === "object" && dateToCheck !== void 0 && d3.from && d3.to && dateToCheck.getTime() >= d3.from.getTime() && dateToCheck.getTime() <= d3.to.getTime())
          return bool;
      }
      return !bool;
    }
    function isInView(elem) {
      if (self2.daysContainer !== void 0)
        return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self2.daysContainer.contains(elem);
      return false;
    }
    function onBlur(e12) {
      var isInput = e12.target === self2._input;
      var valueChanged = self2._input.value.trimEnd() !== getDateStr();
      if (isInput && valueChanged && !(e12.relatedTarget && isCalendarElem(e12.relatedTarget))) {
        self2.setDate(self2._input.value, true, e12.target === self2.altInput ? self2.config.altFormat : self2.config.dateFormat);
      }
    }
    function onKeyDown(e12) {
      var eventTarget = getEventTarget(e12);
      var isInput = self2.config.wrap ? element.contains(eventTarget) : eventTarget === self2._input;
      var allowInput = self2.config.allowInput;
      var allowKeydown = self2.isOpen && (!allowInput || !isInput);
      var allowInlineKeydown = self2.config.inline && isInput && !allowInput;
      if (e12.keyCode === 13 && isInput) {
        if (allowInput) {
          self2.setDate(self2._input.value, true, eventTarget === self2.altInput ? self2.config.altFormat : self2.config.dateFormat);
          self2.close();
          return eventTarget.blur();
        } else {
          self2.open();
        }
      } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
        var isTimeObj = !!self2.timeContainer && self2.timeContainer.contains(eventTarget);
        switch (e12.keyCode) {
          case 13:
            if (isTimeObj) {
              e12.preventDefault();
              updateTime();
              focusAndClose();
            } else
              selectDate(e12);
            break;
          case 27:
            e12.preventDefault();
            focusAndClose();
            break;
          case 8:
          case 46:
            if (isInput && !self2.config.allowInput) {
              e12.preventDefault();
              self2.clear();
            }
            break;
          case 37:
          case 39:
            if (!isTimeObj && !isInput) {
              e12.preventDefault();
              var activeElement = getClosestActiveElement();
              if (self2.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
                var delta_1 = e12.keyCode === 39 ? 1 : -1;
                if (!e12.ctrlKey)
                  focusOnDay(void 0, delta_1);
                else {
                  e12.stopPropagation();
                  changeMonth(delta_1);
                  focusOnDay(getFirstAvailableDay(1), 0);
                }
              }
            } else if (self2.hourElement)
              self2.hourElement.focus();
            break;
          case 38:
          case 40:
            e12.preventDefault();
            var delta = e12.keyCode === 40 ? 1 : -1;
            if (self2.daysContainer && eventTarget.$i !== void 0 || eventTarget === self2.input || eventTarget === self2.altInput) {
              if (e12.ctrlKey) {
                e12.stopPropagation();
                changeYear(self2.currentYear - delta);
                focusOnDay(getFirstAvailableDay(1), 0);
              } else if (!isTimeObj)
                focusOnDay(void 0, delta * 7);
            } else if (eventTarget === self2.currentYearElement) {
              changeYear(self2.currentYear - delta);
            } else if (self2.config.enableTime) {
              if (!isTimeObj && self2.hourElement)
                self2.hourElement.focus();
              updateTime(e12);
              self2._debouncedChange();
            }
            break;
          case 9:
            if (isTimeObj) {
              var elems = [
                self2.hourElement,
                self2.minuteElement,
                self2.secondElement,
                self2.amPM
              ].concat(self2.pluginElements).filter(function(x2) {
                return x2;
              });
              var i6 = elems.indexOf(eventTarget);
              if (i6 !== -1) {
                var target = elems[i6 + (e12.shiftKey ? -1 : 1)];
                e12.preventDefault();
                (target || self2._input).focus();
              }
            } else if (!self2.config.noCalendar && self2.daysContainer && self2.daysContainer.contains(eventTarget) && e12.shiftKey) {
              e12.preventDefault();
              self2._input.focus();
            }
            break;
          default:
            break;
        }
      }
      if (self2.amPM !== void 0 && eventTarget === self2.amPM) {
        switch (e12.key) {
          case self2.l10n.amPM[0].charAt(0):
          case self2.l10n.amPM[0].charAt(0).toLowerCase():
            self2.amPM.textContent = self2.l10n.amPM[0];
            setHoursFromInputs();
            updateValue();
            break;
          case self2.l10n.amPM[1].charAt(0):
          case self2.l10n.amPM[1].charAt(0).toLowerCase():
            self2.amPM.textContent = self2.l10n.amPM[1];
            setHoursFromInputs();
            updateValue();
            break;
        }
      }
      if (isInput || isCalendarElem(eventTarget)) {
        triggerEvent("onKeyDown", e12);
      }
    }
    function onMouseOver(elem, cellClass) {
      if (cellClass === void 0) {
        cellClass = "flatpickr-day";
      }
      if (self2.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
        return;
      var hoverDate = elem ? elem.dateObj.getTime() : self2.days.firstElementChild.dateObj.getTime(), initialDate = self2.parseDate(self2.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self2.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self2.selectedDates[0].getTime());
      var containsDisabled = false;
      var minRange = 0, maxRange = 0;
      for (var t5 = rangeStartDate; t5 < rangeEndDate; t5 += duration.DAY) {
        if (!isEnabled(new Date(t5), true)) {
          containsDisabled = containsDisabled || t5 > rangeStartDate && t5 < rangeEndDate;
          if (t5 < initialDate && (!minRange || t5 > minRange))
            minRange = t5;
          else if (t5 > initialDate && (!maxRange || t5 < maxRange))
            maxRange = t5;
        }
      }
      var hoverableCells = Array.from(self2.rContainer.querySelectorAll("*:nth-child(-n+" + self2.config.showMonths + ") > ." + cellClass));
      hoverableCells.forEach(function(dayElem) {
        var date = dayElem.dateObj;
        var timestamp = date.getTime();
        var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
        if (outOfRange) {
          dayElem.classList.add("notAllowed");
          ["inRange", "startRange", "endRange"].forEach(function(c6) {
            dayElem.classList.remove(c6);
          });
          return;
        } else if (containsDisabled && !outOfRange)
          return;
        ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c6) {
          dayElem.classList.remove(c6);
        });
        if (elem !== void 0) {
          elem.classList.add(hoverDate <= self2.selectedDates[0].getTime() ? "startRange" : "endRange");
          if (initialDate < hoverDate && timestamp === initialDate)
            dayElem.classList.add("startRange");
          else if (initialDate > hoverDate && timestamp === initialDate)
            dayElem.classList.add("endRange");
          if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
            dayElem.classList.add("inRange");
        }
      });
    }
    function onResize() {
      if (self2.isOpen && !self2.config.static && !self2.config.inline)
        positionCalendar();
    }
    function open(e12, positionElement) {
      if (positionElement === void 0) {
        positionElement = self2._positionElement;
      }
      if (self2.isMobile === true) {
        if (e12) {
          e12.preventDefault();
          var eventTarget = getEventTarget(e12);
          if (eventTarget) {
            eventTarget.blur();
          }
        }
        if (self2.mobileInput !== void 0) {
          self2.mobileInput.focus();
          self2.mobileInput.click();
        }
        triggerEvent("onOpen");
        return;
      } else if (self2._input.disabled || self2.config.inline) {
        return;
      }
      var wasOpen = self2.isOpen;
      self2.isOpen = true;
      if (!wasOpen) {
        self2.calendarContainer.classList.add("open");
        self2._input.classList.add("active");
        triggerEvent("onOpen");
        positionCalendar(positionElement);
      }
      if (self2.config.enableTime === true && self2.config.noCalendar === true) {
        if (self2.config.allowInput === false && (e12 === void 0 || !self2.timeContainer.contains(e12.relatedTarget))) {
          setTimeout(function() {
            return self2.hourElement.select();
          }, 50);
        }
      }
    }
    function minMaxDateSetter(type) {
      return function(date) {
        var dateObj = self2.config["_" + type + "Date"] = self2.parseDate(date, self2.config.dateFormat);
        var inverseDateObj = self2.config["_" + (type === "min" ? "max" : "min") + "Date"];
        if (dateObj !== void 0) {
          self2[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
        }
        if (self2.selectedDates) {
          self2.selectedDates = self2.selectedDates.filter(function(d3) {
            return isEnabled(d3);
          });
          if (!self2.selectedDates.length && type === "min")
            setHoursFromDate(dateObj);
          updateValue();
        }
        if (self2.daysContainer) {
          redraw();
          if (dateObj !== void 0)
            self2.currentYearElement[type] = dateObj.getFullYear().toString();
          else
            self2.currentYearElement.removeAttribute(type);
          self2.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
        }
      };
    }
    function parseConfig() {
      var boolOpts = [
        "wrap",
        "weekNumbers",
        "allowInput",
        "allowInvalidPreload",
        "clickOpens",
        "time_24hr",
        "enableTime",
        "noCalendar",
        "altInput",
        "shorthandCurrentMonth",
        "inline",
        "static",
        "enableSeconds",
        "disableMobile"
      ];
      var userConfig = __assign2(__assign2({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
      var formats2 = {};
      self2.config.parseDate = userConfig.parseDate;
      self2.config.formatDate = userConfig.formatDate;
      Object.defineProperty(self2.config, "enable", {
        get: function() {
          return self2.config._enable;
        },
        set: function(dates) {
          self2.config._enable = parseDateRules(dates);
        }
      });
      Object.defineProperty(self2.config, "disable", {
        get: function() {
          return self2.config._disable;
        },
        set: function(dates) {
          self2.config._disable = parseDateRules(dates);
        }
      });
      var timeMode = userConfig.mode === "time";
      if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
        var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
        formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
      }
      if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
        var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
        formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
      }
      Object.defineProperty(self2.config, "minDate", {
        get: function() {
          return self2.config._minDate;
        },
        set: minMaxDateSetter("min")
      });
      Object.defineProperty(self2.config, "maxDate", {
        get: function() {
          return self2.config._maxDate;
        },
        set: minMaxDateSetter("max")
      });
      var minMaxTimeSetter = function(type) {
        return function(val) {
          self2.config[type === "min" ? "_minTime" : "_maxTime"] = self2.parseDate(val, "H:i:S");
        };
      };
      Object.defineProperty(self2.config, "minTime", {
        get: function() {
          return self2.config._minTime;
        },
        set: minMaxTimeSetter("min")
      });
      Object.defineProperty(self2.config, "maxTime", {
        get: function() {
          return self2.config._maxTime;
        },
        set: minMaxTimeSetter("max")
      });
      if (userConfig.mode === "time") {
        self2.config.noCalendar = true;
        self2.config.enableTime = true;
      }
      Object.assign(self2.config, formats2, userConfig);
      for (var i6 = 0; i6 < boolOpts.length; i6++)
        self2.config[boolOpts[i6]] = self2.config[boolOpts[i6]] === true || self2.config[boolOpts[i6]] === "true";
      HOOKS.filter(function(hook) {
        return self2.config[hook] !== void 0;
      }).forEach(function(hook) {
        self2.config[hook] = arrayify(self2.config[hook] || []).map(bindToInstance);
      });
      self2.isMobile = !self2.config.disableMobile && !self2.config.inline && self2.config.mode === "single" && !self2.config.disable.length && !self2.config.enable && !self2.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      for (var i6 = 0; i6 < self2.config.plugins.length; i6++) {
        var pluginConf = self2.config.plugins[i6](self2) || {};
        for (var key in pluginConf) {
          if (HOOKS.indexOf(key) > -1) {
            self2.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self2.config[key]);
          } else if (typeof userConfig[key] === "undefined")
            self2.config[key] = pluginConf[key];
        }
      }
      if (!userConfig.altInputClass) {
        self2.config.altInputClass = getInputElem().className + " " + self2.config.altInputClass;
      }
      triggerEvent("onParseConfig");
    }
    function getInputElem() {
      return self2.config.wrap ? element.querySelector("[data-input]") : element;
    }
    function setupLocale() {
      if (typeof self2.config.locale !== "object" && typeof flatpickr.l10ns[self2.config.locale] === "undefined")
        self2.config.errorHandler(new Error("flatpickr: invalid locale " + self2.config.locale));
      self2.l10n = __assign2(__assign2({}, flatpickr.l10ns.default), typeof self2.config.locale === "object" ? self2.config.locale : self2.config.locale !== "default" ? flatpickr.l10ns[self2.config.locale] : void 0);
      tokenRegex.D = "(" + self2.l10n.weekdays.shorthand.join("|") + ")";
      tokenRegex.l = "(" + self2.l10n.weekdays.longhand.join("|") + ")";
      tokenRegex.M = "(" + self2.l10n.months.shorthand.join("|") + ")";
      tokenRegex.F = "(" + self2.l10n.months.longhand.join("|") + ")";
      tokenRegex.K = "(" + self2.l10n.amPM[0] + "|" + self2.l10n.amPM[1] + "|" + self2.l10n.amPM[0].toLowerCase() + "|" + self2.l10n.amPM[1].toLowerCase() + ")";
      var userConfig = __assign2(__assign2({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
      if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
        self2.config.time_24hr = self2.l10n.time_24hr;
      }
      self2.formatDate = createDateFormatter(self2);
      self2.parseDate = createDateParser({ config: self2.config, l10n: self2.l10n });
    }
    function positionCalendar(customPositionElement) {
      if (typeof self2.config.position === "function") {
        return void self2.config.position(self2, customPositionElement);
      }
      if (self2.calendarContainer === void 0)
        return;
      triggerEvent("onPreCalendarPosition");
      var positionElement = customPositionElement || self2._positionElement;
      var calendarHeight = Array.prototype.reduce.call(self2.calendarContainer.children, function(acc, child) {
        return acc + child.offsetHeight;
      }, 0), calendarWidth = self2.calendarContainer.offsetWidth, configPos = self2.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
      var top2 = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
      toggleClass(self2.calendarContainer, "arrowTop", !showOnTop);
      toggleClass(self2.calendarContainer, "arrowBottom", showOnTop);
      if (self2.config.inline)
        return;
      var left2 = window.pageXOffset + inputBounds.left;
      var isCenter = false;
      var isRight = false;
      if (configPosHorizontal === "center") {
        left2 -= (calendarWidth - inputBounds.width) / 2;
        isCenter = true;
      } else if (configPosHorizontal === "right") {
        left2 -= calendarWidth - inputBounds.width;
        isRight = true;
      }
      toggleClass(self2.calendarContainer, "arrowLeft", !isCenter && !isRight);
      toggleClass(self2.calendarContainer, "arrowCenter", isCenter);
      toggleClass(self2.calendarContainer, "arrowRight", isRight);
      var right2 = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
      var rightMost = left2 + calendarWidth > window.document.body.offsetWidth;
      var centerMost = right2 + calendarWidth > window.document.body.offsetWidth;
      toggleClass(self2.calendarContainer, "rightMost", rightMost);
      if (self2.config.static)
        return;
      self2.calendarContainer.style.top = top2 + "px";
      if (!rightMost) {
        self2.calendarContainer.style.left = left2 + "px";
        self2.calendarContainer.style.right = "auto";
      } else if (!centerMost) {
        self2.calendarContainer.style.left = "auto";
        self2.calendarContainer.style.right = right2 + "px";
      } else {
        var doc = getDocumentStyleSheet();
        if (doc === void 0)
          return;
        var bodyWidth = window.document.body.offsetWidth;
        var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
        var centerBefore = ".flatpickr-calendar.centerMost:before";
        var centerAfter = ".flatpickr-calendar.centerMost:after";
        var centerIndex = doc.cssRules.length;
        var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
        toggleClass(self2.calendarContainer, "rightMost", false);
        toggleClass(self2.calendarContainer, "centerMost", true);
        doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
        self2.calendarContainer.style.left = centerLeft + "px";
        self2.calendarContainer.style.right = "auto";
      }
    }
    function getDocumentStyleSheet() {
      var editableSheet = null;
      for (var i6 = 0; i6 < document.styleSheets.length; i6++) {
        var sheet = document.styleSheets[i6];
        if (!sheet.cssRules)
          continue;
        try {
          sheet.cssRules;
        } catch (err) {
          continue;
        }
        editableSheet = sheet;
        break;
      }
      return editableSheet != null ? editableSheet : createStyleSheet();
    }
    function createStyleSheet() {
      var style = document.createElement("style");
      document.head.appendChild(style);
      return style.sheet;
    }
    function redraw() {
      if (self2.config.noCalendar || self2.isMobile)
        return;
      buildMonthSwitch();
      updateNavigationCurrentMonth();
      buildDays();
    }
    function focusAndClose() {
      self2._input.focus();
      if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
        setTimeout(self2.close, 0);
      } else {
        self2.close();
      }
    }
    function selectDate(e12) {
      e12.preventDefault();
      e12.stopPropagation();
      var isSelectable = function(day) {
        return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
      };
      var t5 = findParent(getEventTarget(e12), isSelectable);
      if (t5 === void 0)
        return;
      var target = t5;
      var selectedDate = self2.latestSelectedDateObj = new Date(target.dateObj.getTime());
      var shouldChangeMonth = (selectedDate.getMonth() < self2.currentMonth || selectedDate.getMonth() > self2.currentMonth + self2.config.showMonths - 1) && self2.config.mode !== "range";
      self2.selectedDateElem = target;
      if (self2.config.mode === "single")
        self2.selectedDates = [selectedDate];
      else if (self2.config.mode === "multiple") {
        var selectedIndex = isDateSelected(selectedDate);
        if (selectedIndex)
          self2.selectedDates.splice(parseInt(selectedIndex), 1);
        else
          self2.selectedDates.push(selectedDate);
      } else if (self2.config.mode === "range") {
        if (self2.selectedDates.length === 2) {
          self2.clear(false, false);
        }
        self2.latestSelectedDateObj = selectedDate;
        self2.selectedDates.push(selectedDate);
        if (compareDates(selectedDate, self2.selectedDates[0], true) !== 0)
          self2.selectedDates.sort(function(a4, b2) {
            return a4.getTime() - b2.getTime();
          });
      }
      setHoursFromInputs();
      if (shouldChangeMonth) {
        var isNewYear = self2.currentYear !== selectedDate.getFullYear();
        self2.currentYear = selectedDate.getFullYear();
        self2.currentMonth = selectedDate.getMonth();
        if (isNewYear) {
          triggerEvent("onYearChange");
          buildMonthSwitch();
        }
        triggerEvent("onMonthChange");
      }
      updateNavigationCurrentMonth();
      buildDays();
      updateValue();
      if (!shouldChangeMonth && self2.config.mode !== "range" && self2.config.showMonths === 1)
        focusOnDayElem(target);
      else if (self2.selectedDateElem !== void 0 && self2.hourElement === void 0) {
        self2.selectedDateElem && self2.selectedDateElem.focus();
      }
      if (self2.hourElement !== void 0)
        self2.hourElement !== void 0 && self2.hourElement.focus();
      if (self2.config.closeOnSelect) {
        var single = self2.config.mode === "single" && !self2.config.enableTime;
        var range = self2.config.mode === "range" && self2.selectedDates.length === 2 && !self2.config.enableTime;
        if (single || range) {
          focusAndClose();
        }
      }
      triggerChange();
    }
    var CALLBACKS = {
      locale: [setupLocale, updateWeekdays],
      showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
      minDate: [jumpToDate],
      maxDate: [jumpToDate],
      positionElement: [updatePositionElement],
      clickOpens: [
        function() {
          if (self2.config.clickOpens === true) {
            bind(self2._input, "focus", self2.open);
            bind(self2._input, "click", self2.open);
          } else {
            self2._input.removeEventListener("focus", self2.open);
            self2._input.removeEventListener("click", self2.open);
          }
        }
      ]
    };
    function set(option, value) {
      if (option !== null && typeof option === "object") {
        Object.assign(self2.config, option);
        for (var key in option) {
          if (CALLBACKS[key] !== void 0)
            CALLBACKS[key].forEach(function(x2) {
              return x2();
            });
        }
      } else {
        self2.config[option] = value;
        if (CALLBACKS[option] !== void 0)
          CALLBACKS[option].forEach(function(x2) {
            return x2();
          });
        else if (HOOKS.indexOf(option) > -1)
          self2.config[option] = arrayify(value);
      }
      self2.redraw();
      updateValue(true);
    }
    function setSelectedDate(inputDate, format2) {
      var dates = [];
      if (inputDate instanceof Array)
        dates = inputDate.map(function(d3) {
          return self2.parseDate(d3, format2);
        });
      else if (inputDate instanceof Date || typeof inputDate === "number")
        dates = [self2.parseDate(inputDate, format2)];
      else if (typeof inputDate === "string") {
        switch (self2.config.mode) {
          case "single":
          case "time":
            dates = [self2.parseDate(inputDate, format2)];
            break;
          case "multiple":
            dates = inputDate.split(self2.config.conjunction).map(function(date) {
              return self2.parseDate(date, format2);
            });
            break;
          case "range":
            dates = inputDate.split(self2.l10n.rangeSeparator).map(function(date) {
              return self2.parseDate(date, format2);
            });
            break;
          default:
            break;
        }
      } else
        self2.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
      self2.selectedDates = self2.config.allowInvalidPreload ? dates : dates.filter(function(d3) {
        return d3 instanceof Date && isEnabled(d3, false);
      });
      if (self2.config.mode === "range")
        self2.selectedDates.sort(function(a4, b2) {
          return a4.getTime() - b2.getTime();
        });
    }
    function setDate(date, triggerChange2, format2) {
      if (triggerChange2 === void 0) {
        triggerChange2 = false;
      }
      if (format2 === void 0) {
        format2 = self2.config.dateFormat;
      }
      if (date !== 0 && !date || date instanceof Array && date.length === 0)
        return self2.clear(triggerChange2);
      setSelectedDate(date, format2);
      self2.latestSelectedDateObj = self2.selectedDates[self2.selectedDates.length - 1];
      self2.redraw();
      jumpToDate(void 0, triggerChange2);
      setHoursFromDate();
      if (self2.selectedDates.length === 0) {
        self2.clear(false);
      }
      updateValue(triggerChange2);
      if (triggerChange2)
        triggerEvent("onChange");
    }
    function parseDateRules(arr) {
      return arr.slice().map(function(rule) {
        if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
          return self2.parseDate(rule, void 0, true);
        } else if (rule && typeof rule === "object" && rule.from && rule.to)
          return {
            from: self2.parseDate(rule.from, void 0),
            to: self2.parseDate(rule.to, void 0)
          };
        return rule;
      }).filter(function(x2) {
        return x2;
      });
    }
    function setupDates() {
      self2.selectedDates = [];
      self2.now = self2.parseDate(self2.config.now) || new Date();
      var preloadedDate = self2.config.defaultDate || ((self2.input.nodeName === "INPUT" || self2.input.nodeName === "TEXTAREA") && self2.input.placeholder && self2.input.value === self2.input.placeholder ? null : self2.input.value);
      if (preloadedDate)
        setSelectedDate(preloadedDate, self2.config.dateFormat);
      self2._initialDate = self2.selectedDates.length > 0 ? self2.selectedDates[0] : self2.config.minDate && self2.config.minDate.getTime() > self2.now.getTime() ? self2.config.minDate : self2.config.maxDate && self2.config.maxDate.getTime() < self2.now.getTime() ? self2.config.maxDate : self2.now;
      self2.currentYear = self2._initialDate.getFullYear();
      self2.currentMonth = self2._initialDate.getMonth();
      if (self2.selectedDates.length > 0)
        self2.latestSelectedDateObj = self2.selectedDates[0];
      if (self2.config.minTime !== void 0)
        self2.config.minTime = self2.parseDate(self2.config.minTime, "H:i");
      if (self2.config.maxTime !== void 0)
        self2.config.maxTime = self2.parseDate(self2.config.maxTime, "H:i");
      self2.minDateHasTime = !!self2.config.minDate && (self2.config.minDate.getHours() > 0 || self2.config.minDate.getMinutes() > 0 || self2.config.minDate.getSeconds() > 0);
      self2.maxDateHasTime = !!self2.config.maxDate && (self2.config.maxDate.getHours() > 0 || self2.config.maxDate.getMinutes() > 0 || self2.config.maxDate.getSeconds() > 0);
    }
    function setupInputs() {
      self2.input = getInputElem();
      if (!self2.input) {
        self2.config.errorHandler(new Error("Invalid input element specified"));
        return;
      }
      self2.input._type = self2.input.type;
      self2.input.type = "text";
      self2.input.classList.add("flatpickr-input");
      self2._input = self2.input;
      if (self2.config.altInput) {
        self2.altInput = createElement(self2.input.nodeName, self2.config.altInputClass);
        self2._input = self2.altInput;
        self2.altInput.placeholder = self2.input.placeholder;
        self2.altInput.disabled = self2.input.disabled;
        self2.altInput.required = self2.input.required;
        self2.altInput.tabIndex = self2.input.tabIndex;
        self2.altInput.type = "text";
        self2.input.setAttribute("type", "hidden");
        if (!self2.config.static && self2.input.parentNode)
          self2.input.parentNode.insertBefore(self2.altInput, self2.input.nextSibling);
      }
      if (!self2.config.allowInput)
        self2._input.setAttribute("readonly", "readonly");
      updatePositionElement();
    }
    function updatePositionElement() {
      self2._positionElement = self2.config.positionElement || self2._input;
    }
    function setupMobile() {
      var inputType = self2.config.enableTime ? self2.config.noCalendar ? "time" : "datetime-local" : "date";
      self2.mobileInput = createElement("input", self2.input.className + " flatpickr-mobile");
      self2.mobileInput.tabIndex = 1;
      self2.mobileInput.type = inputType;
      self2.mobileInput.disabled = self2.input.disabled;
      self2.mobileInput.required = self2.input.required;
      self2.mobileInput.placeholder = self2.input.placeholder;
      self2.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
      if (self2.selectedDates.length > 0) {
        self2.mobileInput.defaultValue = self2.mobileInput.value = self2.formatDate(self2.selectedDates[0], self2.mobileFormatStr);
      }
      if (self2.config.minDate)
        self2.mobileInput.min = self2.formatDate(self2.config.minDate, "Y-m-d");
      if (self2.config.maxDate)
        self2.mobileInput.max = self2.formatDate(self2.config.maxDate, "Y-m-d");
      if (self2.input.getAttribute("step"))
        self2.mobileInput.step = String(self2.input.getAttribute("step"));
      self2.input.type = "hidden";
      if (self2.altInput !== void 0)
        self2.altInput.type = "hidden";
      try {
        if (self2.input.parentNode)
          self2.input.parentNode.insertBefore(self2.mobileInput, self2.input.nextSibling);
      } catch (_a) {
      }
      bind(self2.mobileInput, "change", function(e12) {
        self2.setDate(getEventTarget(e12).value, false, self2.mobileFormatStr);
        triggerEvent("onChange");
        triggerEvent("onClose");
      });
    }
    function toggle(e12) {
      if (self2.isOpen === true)
        return self2.close();
      self2.open(e12);
    }
    function triggerEvent(event, data) {
      if (self2.config === void 0)
        return;
      var hooks = self2.config[event];
      if (hooks !== void 0 && hooks.length > 0) {
        for (var i6 = 0; hooks[i6] && i6 < hooks.length; i6++)
          hooks[i6](self2.selectedDates, self2.input.value, self2, data);
      }
      if (event === "onChange") {
        self2.input.dispatchEvent(createEvent("change"));
        self2.input.dispatchEvent(createEvent("input"));
      }
    }
    function createEvent(name) {
      var e12 = document.createEvent("Event");
      e12.initEvent(name, true, true);
      return e12;
    }
    function isDateSelected(date) {
      for (var i6 = 0; i6 < self2.selectedDates.length; i6++) {
        var selectedDate = self2.selectedDates[i6];
        if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
          return "" + i6;
      }
      return false;
    }
    function isDateInRange(date) {
      if (self2.config.mode !== "range" || self2.selectedDates.length < 2)
        return false;
      return compareDates(date, self2.selectedDates[0]) >= 0 && compareDates(date, self2.selectedDates[1]) <= 0;
    }
    function updateNavigationCurrentMonth() {
      if (self2.config.noCalendar || self2.isMobile || !self2.monthNav)
        return;
      self2.yearElements.forEach(function(yearElement, i6) {
        var d3 = new Date(self2.currentYear, self2.currentMonth, 1);
        d3.setMonth(self2.currentMonth + i6);
        if (self2.config.showMonths > 1 || self2.config.monthSelectorType === "static") {
          self2.monthElements[i6].textContent = monthToStr(d3.getMonth(), self2.config.shorthandCurrentMonth, self2.l10n) + " ";
        } else {
          self2.monthsDropdownContainer.value = d3.getMonth().toString();
        }
        yearElement.value = d3.getFullYear().toString();
      });
      self2._hidePrevMonthArrow = self2.config.minDate !== void 0 && (self2.currentYear === self2.config.minDate.getFullYear() ? self2.currentMonth <= self2.config.minDate.getMonth() : self2.currentYear < self2.config.minDate.getFullYear());
      self2._hideNextMonthArrow = self2.config.maxDate !== void 0 && (self2.currentYear === self2.config.maxDate.getFullYear() ? self2.currentMonth + 1 > self2.config.maxDate.getMonth() : self2.currentYear > self2.config.maxDate.getFullYear());
    }
    function getDateStr(specificFormat) {
      var format2 = specificFormat || (self2.config.altInput ? self2.config.altFormat : self2.config.dateFormat);
      return self2.selectedDates.map(function(dObj) {
        return self2.formatDate(dObj, format2);
      }).filter(function(d3, i6, arr) {
        return self2.config.mode !== "range" || self2.config.enableTime || arr.indexOf(d3) === i6;
      }).join(self2.config.mode !== "range" ? self2.config.conjunction : self2.l10n.rangeSeparator);
    }
    function updateValue(triggerChange2) {
      if (triggerChange2 === void 0) {
        triggerChange2 = true;
      }
      if (self2.mobileInput !== void 0 && self2.mobileFormatStr) {
        self2.mobileInput.value = self2.latestSelectedDateObj !== void 0 ? self2.formatDate(self2.latestSelectedDateObj, self2.mobileFormatStr) : "";
      }
      self2.input.value = getDateStr(self2.config.dateFormat);
      if (self2.altInput !== void 0) {
        self2.altInput.value = getDateStr(self2.config.altFormat);
      }
      if (triggerChange2 !== false)
        triggerEvent("onValueUpdate");
    }
    function onMonthNavClick(e12) {
      var eventTarget = getEventTarget(e12);
      var isPrevMonth = self2.prevMonthNav.contains(eventTarget);
      var isNextMonth = self2.nextMonthNav.contains(eventTarget);
      if (isPrevMonth || isNextMonth) {
        changeMonth(isPrevMonth ? -1 : 1);
      } else if (self2.yearElements.indexOf(eventTarget) >= 0) {
        eventTarget.select();
      } else if (eventTarget.classList.contains("arrowUp")) {
        self2.changeYear(self2.currentYear + 1);
      } else if (eventTarget.classList.contains("arrowDown")) {
        self2.changeYear(self2.currentYear - 1);
      }
    }
    function timeWrapper(e12) {
      e12.preventDefault();
      var isKeyDown = e12.type === "keydown", eventTarget = getEventTarget(e12), input = eventTarget;
      if (self2.amPM !== void 0 && eventTarget === self2.amPM) {
        self2.amPM.textContent = self2.l10n.amPM[int(self2.amPM.textContent === self2.l10n.amPM[0])];
      }
      var min2 = parseFloat(input.getAttribute("min")), max2 = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e12.delta || (isKeyDown ? e12.which === 38 ? 1 : -1 : 0);
      var newValue = curValue + step * delta;
      if (typeof input.value !== "undefined" && input.value.length === 2) {
        var isHourElem = input === self2.hourElement, isMinuteElem = input === self2.minuteElement;
        if (newValue < min2) {
          newValue = max2 + newValue + int(!isHourElem) + (int(isHourElem) && int(!self2.amPM));
          if (isMinuteElem)
            incrementNumInput(void 0, -1, self2.hourElement);
        } else if (newValue > max2) {
          newValue = input === self2.hourElement ? newValue - max2 - int(!self2.amPM) : min2;
          if (isMinuteElem)
            incrementNumInput(void 0, 1, self2.hourElement);
        }
        if (self2.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
          self2.amPM.textContent = self2.l10n.amPM[int(self2.amPM.textContent === self2.l10n.amPM[0])];
        }
        input.value = pad(newValue);
      }
    }
    init2();
    return self2;
  }
  function _flatpickr(nodeList, config) {
    var nodes = Array.prototype.slice.call(nodeList).filter(function(x2) {
      return x2 instanceof HTMLElement;
    });
    var instances = [];
    for (var i6 = 0; i6 < nodes.length; i6++) {
      var node = nodes[i6];
      try {
        if (node.getAttribute("data-fp-omit") !== null)
          continue;
        if (node._flatpickr !== void 0) {
          node._flatpickr.destroy();
          node._flatpickr = void 0;
        }
        node._flatpickr = FlatpickrInstance(node, config || {});
        instances.push(node._flatpickr);
      } catch (e12) {
        console.error(e12);
      }
    }
    return instances.length === 1 ? instances[0] : instances;
  }
  if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
      return _flatpickr(this, config);
    };
    HTMLElement.prototype.flatpickr = function(config) {
      return _flatpickr([this], config);
    };
  }
  var flatpickr = function(selector, config) {
    if (typeof selector === "string") {
      return _flatpickr(window.document.querySelectorAll(selector), config);
    } else if (selector instanceof Node) {
      return _flatpickr([selector], config);
    } else {
      return _flatpickr(selector, config);
    }
  };
  flatpickr.defaultConfig = {};
  flatpickr.l10ns = {
    en: __assign2({}, default_default),
    default: __assign2({}, default_default)
  };
  flatpickr.localize = function(l10n) {
    flatpickr.l10ns.default = __assign2(__assign2({}, flatpickr.l10ns.default), l10n);
  };
  flatpickr.setDefaults = function(config) {
    flatpickr.defaultConfig = __assign2(__assign2({}, flatpickr.defaultConfig), config);
  };
  flatpickr.parseDate = createDateParser({});
  flatpickr.formatDate = createDateFormatter({});
  flatpickr.compareDates = compareDates;
  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
    jQuery.fn.flatpickr = function(config) {
      return _flatpickr(this, config);
    };
  }
  Date.prototype.fp_incr = function(days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };
  if (typeof window !== "undefined") {
    window.flatpickr = flatpickr;
  }
  var esm_default = flatpickr;

  // ../../node_modules/stimulus-flatpickr/dist/index.m.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i6 = 0; i6 < props.length; i6++) {
      var descriptor = props[i6];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6] != null ? arguments[i6] : {};
      if (i6 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o11) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o12) {
      return o12.__proto__ || Object.getPrototypeOf(o12);
    };
    return _getPrototypeOf(o11);
  }
  function _setPrototypeOf(o11, p3) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o12, p4) {
      o12.__proto__ = p4;
      return o12;
    };
    return _setPrototypeOf(o11, p3);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e12) {
      return false;
    }
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _createSuper(Derived) {
    return function() {
      var Super = _getPrototypeOf(Derived), result;
      if (_isNativeReflectConstruct()) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function camelize2(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_2, char) => char.toUpperCase());
  }
  function capitalize2(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize2(value) {
    return value.replace(/([A-Z])/g, (_2, char) => `-${char.toLowerCase()}`);
  }
  function readInheritableStaticArrayValues2(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor2(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues2(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs2(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor2(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs2(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor2(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues2(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs2(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var extend4 = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: {
          value: extended
        }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a4 = function() {
        this.a.call(this);
      };
      const b2 = extendWithReflect(a4);
      b2.prototype.a = function() {
      };
      return new b2();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function ClassPropertiesBlessing2(constructor) {
    const classes = readInheritableStaticArrayValues2(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition2(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition2(key) {
    return {
      [`${key}Class`]: {
        get() {
          const {
            classes
          } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize2(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function TargetPropertiesBlessing2(constructor) {
    const targets = readInheritableStaticArrayValues2(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition2(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition2(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize2(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing2(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs2(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair2(valueDefinitionPair);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, {
              [attributeName]: valueDescriptor
            });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair2(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair2(valueDefinitionPair) {
    const definition = parseValueDefinitionPair2(valueDefinitionPair);
    const {
      key,
      name,
      reader: read2,
      writer: write2
    } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read2(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write2(value));
          }
        }
      },
      [`has${capitalize2(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair2([token, typeDefinition]) {
    return valueDescriptorForTokenAndTypeDefinition2(token, typeDefinition);
  }
  function parseValueTypeConstant2(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault2(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject2(typeObject) {
    const typeFromObject = parseValueTypeConstant2(typeObject.type);
    if (typeFromObject) {
      const defaultValueType = parseValueTypeDefault2(typeObject.default);
      if (typeFromObject !== defaultValueType) {
        throw new Error(`Type "${typeFromObject}" must match the type of the default value. Given default value: "${typeObject.default}" as "${defaultValueType}"`);
      }
      return typeFromObject;
    }
  }
  function parseValueTypeDefinition2(typeDefinition) {
    const typeFromObject = parseValueTypeObject2(typeDefinition);
    const typeFromDefaultValue = parseValueTypeDefault2(typeDefinition);
    const typeFromConstant = parseValueTypeConstant2(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    throw new Error(`Unknown value type "${typeDefinition}"`);
  }
  function defaultValueForDefinition2(typeDefinition) {
    const constant = parseValueTypeConstant2(typeDefinition);
    if (constant)
      return defaultValuesByType2[constant];
    const defaultValue = typeDefinition.default;
    if (defaultValue !== void 0)
      return defaultValue;
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition2(token, typeDefinition) {
    const key = `${dasherize2(token)}-value`;
    const type = parseValueTypeDefinition2(typeDefinition);
    return {
      type,
      key,
      name: camelize2(key),
      get defaultValue() {
        return defaultValueForDefinition2(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault2(typeDefinition) !== void 0;
      },
      reader: readers2[type],
      writer: writers2[type] || writers2.default
    };
  }
  var defaultValuesByType2 = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers2 = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError("Expected array");
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || value == "false");
    },
    number(value) {
      return Number(value);
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError("Expected object");
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers2 = {
    default: writeString2,
    array: writeJSON2,
    object: writeJSON2
  };
  function writeJSON2(value) {
    return JSON.stringify(value);
  }
  function writeString2(value) {
    return `${value}`;
  }
  var Controller2 = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, {
      target = this.element,
      detail = {},
      prefix = this.identifier,
      bubbles = true,
      cancelable = true
    } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, {
        detail,
        bubbles,
        cancelable
      });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller2.blessings = [ClassPropertiesBlessing2, TargetPropertiesBlessing2, ValuePropertiesBlessing2];
  Controller2.targets = [];
  Controller2.values = {};
  var kebabCase = (string) => string.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
  var capitalize$1 = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };
  var booleanOptions = ["allowInput", "altInput", "animate", "clickOpens", "closeOnSelect", "disableMobile", "enableSeconds", "enableTime", "inline", "noCalendar", "shorthandCurrentMonth", "static", "time_24hr", "weekNumbers", "wrap"];
  var stringOptions = ["altInputClass", "conjunction", "mode", "nextArrow", "position", "prevArrow", "monthSelectorType"];
  var numberOptions = ["defaultHour", "defaultMinute", "defaultSeconds", "hourIncrement", "minuteIncrement", "showMonths"];
  var arrayOptions = ["disable", "enable", "disableDaysOfWeek", "enableDaysOfWeek"];
  var arrayOrStringOptions = ["defaultDate"];
  var dateOptions = ["maxDate", "minDate", "maxTime", "minTime", "now"];
  var dateFormats = ["altFormat", "ariaDateFormat", "dateFormat"];
  var options = {
    string: stringOptions,
    boolean: booleanOptions,
    date: dateOptions,
    array: arrayOptions,
    number: numberOptions,
    arrayOrString: arrayOrStringOptions
  };
  var events = ["change", "open", "close", "monthChange", "yearChange", "ready", "valueUpdate", "dayCreate"];
  var elements = ["calendarContainer", "currentYearElement", "days", "daysContainer", "input", "nextMonthNav", "monthNav", "prevMonthNav", "rContainer", "selectedDateElem", "todayDateElem", "weekdayContainer"];
  var mapping = {
    "%Y": "Y",
    "%y": "y",
    "%C": "Y",
    "%m": "m",
    "%-m": "n",
    "%_m": "n",
    "%B": "F",
    "%^B": "F",
    "%b": "M",
    "%^b": "M",
    "%h": "M",
    "%^h": "M",
    "%d": "d",
    "%-d": "j",
    "%e": "j",
    "%H": "H",
    "%k": "H",
    "%I": "h",
    "%l": "h",
    "%-l": "h",
    "%P": "K",
    "%p": "K",
    "%M": "i",
    "%S": "S",
    "%A": "l",
    "%a": "D",
    "%w": "w"
  };
  var strftimeRegex = new RegExp(Object.keys(mapping).join("|").replace(new RegExp("\\^", "g"), "\\^"), "g");
  var convertDateFormat = (format2) => {
    return format2.replace(strftimeRegex, (match) => {
      return mapping[match];
    });
  };
  var StimulusFlatpickr = /* @__PURE__ */ function(_Controller) {
    _inherits(StimulusFlatpickr2, _Controller);
    var _super = _createSuper(StimulusFlatpickr2);
    function StimulusFlatpickr2() {
      _classCallCheck(this, StimulusFlatpickr2);
      return _super.apply(this, arguments);
    }
    _createClass(StimulusFlatpickr2, [{
      key: "initialize",
      value: function initialize() {
        this.config = {};
      }
    }, {
      key: "connect",
      value: function connect() {
        this._initializeEvents();
        this._initializeOptions();
        this._initializeDateFormats();
        this.fp = esm_default(this.flatpickrElement, _objectSpread2({}, this.config));
        this._initializeElements();
      }
    }, {
      key: "disconnect",
      value: function disconnect() {
        const value = this.inputTarget.value;
        this.fp.destroy();
        this.inputTarget.value = value;
      }
    }, {
      key: "_initializeEvents",
      value: function _initializeEvents() {
        events.forEach((event) => {
          if (this[event]) {
            const hook = `on${capitalize$1(event)}`;
            this.config[hook] = this[event].bind(this);
          }
        });
      }
    }, {
      key: "_initializeOptions",
      value: function _initializeOptions() {
        Object.keys(options).forEach((optionType) => {
          const optionsCamelCase = options[optionType];
          optionsCamelCase.forEach((option) => {
            const optionKebab = kebabCase(option);
            if (this.data.has(optionKebab)) {
              this.config[option] = this[`_${optionType}`](optionKebab);
            }
          });
        });
        this._handleDaysOfWeek();
      }
    }, {
      key: "_handleDaysOfWeek",
      value: function _handleDaysOfWeek() {
        if (this.config.disableDaysOfWeek) {
          this.config.disableDaysOfWeek = this._validateDaysOfWeek(this.config.disableDaysOfWeek);
          this.config.disable = [...this.config.disable || [], this._disable.bind(this)];
        }
        if (this.config.enableDaysOfWeek) {
          this.config.enableDaysOfWeek = this._validateDaysOfWeek(this.config.enableDaysOfWeek);
          this.config.enable = [...this.config.enable || [], this._enable.bind(this)];
        }
      }
    }, {
      key: "_validateDaysOfWeek",
      value: function _validateDaysOfWeek(days) {
        if (Array.isArray(days)) {
          return days.map((day) => parseInt(day));
        } else {
          console.error("days of week must be a valid array");
          return [];
        }
      }
    }, {
      key: "_disable",
      value: function _disable(date) {
        const disabledDays = this.config.disableDaysOfWeek;
        return disabledDays.includes(date.getDay());
      }
    }, {
      key: "_enable",
      value: function _enable(date) {
        const enabledDays = this.config.enableDaysOfWeek;
        return enabledDays.includes(date.getDay());
      }
    }, {
      key: "_initializeDateFormats",
      value: function _initializeDateFormats() {
        dateFormats.forEach((dateFormat) => {
          if (this.data.has(dateFormat)) {
            this.config[dateFormat] = convertDateFormat(this.data.get(dateFormat));
          }
        });
      }
    }, {
      key: "_initializeElements",
      value: function _initializeElements() {
        elements.forEach((element) => {
          this[`${element}Target`] = this.fp[element];
        });
      }
    }, {
      key: "_string",
      value: function _string(option) {
        return this.data.get(option);
      }
    }, {
      key: "_date",
      value: function _date(option) {
        return this.data.get(option);
      }
    }, {
      key: "_boolean",
      value: function _boolean(option) {
        return !(this.data.get(option) == "0" || this.data.get(option) == "false");
      }
    }, {
      key: "_array",
      value: function _array(option) {
        return JSON.parse(this.data.get(option));
      }
    }, {
      key: "_number",
      value: function _number(option) {
        return parseInt(this.data.get(option));
      }
    }, {
      key: "_arrayOrString",
      value: function _arrayOrString(option) {
        const val = this.data.get(option);
        try {
          return JSON.parse(val);
        } catch (e12) {
          return val;
        }
      }
    }, {
      key: "flatpickrElement",
      get: function() {
        return this.hasInstanceTarget && this.instanceTarget || this.element;
      }
    }]);
    return StimulusFlatpickr2;
  }(Controller2);
  _defineProperty(StimulusFlatpickr, "targets", ["instance"]);
  var index_m_default = StimulusFlatpickr;

  // controllers/index.js
  controller_default.forEach((controller) => {
    application.register(controller.name, controller.module.default);
  });
  application.register("dropdown", i5);
  application.register("modal", a3);
  application.register("tabs", l8);
  application.register("popover", n8);
  application.register("toggle", o10);
  application.register("slideover", r6);
  application.register("flatpickr", index_m_default);

  // src/actiontext.js
  var import_trix2 = __toESM(require_trix());

  // ../../node_modules/@rails/request.js/src/fetch_response.js
  var FetchResponse2 = class {
    constructor(response) {
      this.response = response;
    }
    get statusCode() {
      return this.response.status;
    }
    get redirected() {
      return this.response.redirected;
    }
    get ok() {
      return this.response.ok;
    }
    get unauthenticated() {
      return this.statusCode === 401;
    }
    get unprocessableEntity() {
      return this.statusCode === 422;
    }
    get authenticationURL() {
      return this.response.headers.get("WWW-Authenticate");
    }
    get contentType() {
      const contentType = this.response.headers.get("Content-Type") || "";
      return contentType.replace(/;.*$/, "");
    }
    get headers() {
      return this.response.headers;
    }
    get html() {
      if (this.contentType.match(/^(application|text)\/(html|xhtml\+xml)$/)) {
        return this.text;
      }
      return Promise.reject(new Error(`Expected an HTML response but got "${this.contentType}" instead`));
    }
    get json() {
      if (this.contentType.match(/^application\/.*json$/)) {
        return this.responseJson || (this.responseJson = this.response.json());
      }
      return Promise.reject(new Error(`Expected a JSON response but got "${this.contentType}" instead`));
    }
    get text() {
      return this.responseText || (this.responseText = this.response.text());
    }
    get isTurboStream() {
      return this.contentType.match(/^text\/vnd\.turbo-stream\.html/);
    }
    async renderTurboStream() {
      if (this.isTurboStream) {
        if (window.Turbo) {
          await window.Turbo.renderStreamMessage(await this.text);
        } else {
          console.warn("You must set `window.Turbo = Turbo` to automatically process Turbo Stream events with request.js");
        }
      } else {
        return Promise.reject(new Error(`Expected a Turbo Stream response but got "${this.contentType}" instead`));
      }
    }
  };

  // ../../node_modules/@rails/request.js/src/request_interceptor.js
  var RequestInterceptor = class {
    static register(interceptor) {
      this.interceptor = interceptor;
    }
    static get() {
      return this.interceptor;
    }
    static reset() {
      this.interceptor = void 0;
    }
  };

  // ../../node_modules/@rails/request.js/src/lib/utils.js
  function getCookie(name) {
    const cookies = document.cookie ? document.cookie.split("; ") : [];
    const prefix = `${encodeURIComponent(name)}=`;
    const cookie = cookies.find((cookie2) => cookie2.startsWith(prefix));
    if (cookie) {
      const value = cookie.split("=").slice(1).join("=");
      if (value) {
        return decodeURIComponent(value);
      }
    }
  }
  function compact(object) {
    const result = {};
    for (const key in object) {
      const value = object[key];
      if (value !== void 0) {
        result[key] = value;
      }
    }
    return result;
  }
  function metaContent(name) {
    const element = document.head.querySelector(`meta[name="${name}"]`);
    return element && element.content;
  }
  function stringEntriesFromFormData(formData) {
    return [...formData].reduce((entries, [name, value]) => {
      return entries.concat(typeof value === "string" ? [[name, value]] : []);
    }, []);
  }
  function mergeEntries(searchParams, entries) {
    for (const [name, value] of entries) {
      if (value instanceof window.File)
        continue;
      if (searchParams.has(name)) {
        searchParams.delete(name);
        searchParams.set(name, value);
      } else {
        searchParams.append(name, value);
      }
    }
  }

  // ../../node_modules/@rails/request.js/src/fetch_request.js
  var FetchRequest2 = class {
    constructor(method, url, options2 = {}) {
      this.method = method;
      this.options = options2;
      this.originalUrl = url.toString();
    }
    async perform() {
      try {
        const requestInterceptor = RequestInterceptor.get();
        if (requestInterceptor) {
          await requestInterceptor(this);
        }
      } catch (error2) {
        console.error(error2);
      }
      const response = new FetchResponse2(await window.fetch(this.url, this.fetchOptions));
      if (response.unauthenticated && response.authenticationURL) {
        return Promise.reject(window.location.href = response.authenticationURL);
      }
      if (response.ok && response.isTurboStream) {
        await response.renderTurboStream();
      }
      return response;
    }
    addHeader(key, value) {
      const headers = this.additionalHeaders;
      headers[key] = value;
      this.options.headers = headers;
    }
    get fetchOptions() {
      return {
        method: this.method.toUpperCase(),
        headers: this.headers,
        body: this.formattedBody,
        signal: this.signal,
        credentials: "same-origin",
        redirect: this.redirect
      };
    }
    get headers() {
      return compact(
        Object.assign(
          {
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": this.csrfToken,
            "Content-Type": this.contentType,
            Accept: this.accept
          },
          this.additionalHeaders
        )
      );
    }
    get csrfToken() {
      return getCookie(metaContent("csrf-param")) || metaContent("csrf-token");
    }
    get contentType() {
      if (this.options.contentType) {
        return this.options.contentType;
      } else if (this.body == null || this.body instanceof window.FormData) {
        return void 0;
      } else if (this.body instanceof window.File) {
        return this.body.type;
      }
      return "application/json";
    }
    get accept() {
      switch (this.responseKind) {
        case "html":
          return "text/html, application/xhtml+xml";
        case "turbo-stream":
          return "text/vnd.turbo-stream.html, text/html, application/xhtml+xml";
        case "json":
          return "application/json, application/vnd.api+json";
        default:
          return "*/*";
      }
    }
    get body() {
      return this.options.body;
    }
    get query() {
      const originalQuery = (this.originalUrl.split("?")[1] || "").split("#")[0];
      const params = new URLSearchParams(originalQuery);
      let requestQuery = this.options.query;
      if (requestQuery instanceof window.FormData) {
        requestQuery = stringEntriesFromFormData(requestQuery);
      } else if (requestQuery instanceof window.URLSearchParams) {
        requestQuery = requestQuery.entries();
      } else {
        requestQuery = Object.entries(requestQuery || {});
      }
      mergeEntries(params, requestQuery);
      const query = params.toString();
      return query.length > 0 ? `?${query}` : "";
    }
    get url() {
      return this.originalUrl.split("?")[0].split("#")[0] + this.query;
    }
    get responseKind() {
      return this.options.responseKind || "html";
    }
    get signal() {
      return this.options.signal;
    }
    get redirect() {
      return this.options.redirect || "follow";
    }
    get additionalHeaders() {
      return this.options.headers || {};
    }
    get formattedBody() {
      const bodyIsAString = Object.prototype.toString.call(this.body) === "[object String]";
      const contentTypeIsJson = this.headers["Content-Type"] === "application/json";
      if (contentTypeIsJson && !bodyIsAString) {
        return JSON.stringify(this.body);
      }
      return this.body;
    }
  };

  // ../../node_modules/@rails/request.js/src/verbs.js
  async function get(url, options2) {
    const request = new FetchRequest2("get", url, options2);
    return request.perform();
  }

  // src/actiontext.js
  import_trix2.default.config.textAttributes.inlineCode = {
    tagName: "code",
    inheritable: true
  };
  var EmbedController = class {
    constructor(element) {
      this.patterns = void 0;
      this.element = element;
      this.editor = element.editor;
      this.toolbar = element.toolbarElement;
      this.injectHTML();
      this.hrefElement = this.toolbar.querySelector("[data-trix-input][name='href']");
      this.embedContainerElement = this.toolbar.querySelector("[data-behavior='embed_container']");
      this.embedElement = this.toolbar.querySelector("[data-behavior='embed_url']");
      this.reset();
      this.installEventHandlers();
    }
    injectHTML() {
      this.toolbar.querySelector('[data-trix-dialog="href"]').insertAdjacentHTML("beforeend", `
        <div data-behavior="embed_container">
          <div class="link_to_embed link_to_embed--new">
            Would you like to embed media from this site?
            <input class="btn btn-tertiary btn-small outline" type="button" data-behavior="embed_url" value="Yes, embed it">
          </div>
        </div>
    `);
    }
    installEventHandlers() {
      this.hrefElement.addEventListener("input", this.didInput.bind(this));
      this.hrefElement.addEventListener("focusin", this.didInput.bind(this));
      this.embedElement.addEventListener("click", this.embed.bind(this));
    }
    didInput(event) {
      let value = event.target.value.trim();
      if (this.patterns === void 0) {
        this.loadPatterns(value);
      } else if (this.match(value)) {
        this.fetch(value);
      } else {
        this.reset();
      }
    }
    async loadPatterns(value) {
      const response = await get("/action_text/embeds/patterns.json", { responseKind: "json" });
      if (response.ok) {
        const patterns = await response.json;
        this.patterns = patterns.map((pattern) => new RegExp(pattern.source, pattern.options));
        if (this.match(value)) {
          this.fetch(value);
        }
      }
    }
    match(value) {
      return this.patterns.some((regex) => regex.test(value));
    }
    fetch(value) {
      Rails.ajax({
        url: `/action_text/embeds?id=${encodeURIComponent(value)}`,
        type: "post",
        error: this.reset.bind(this),
        success: this.showEmbed.bind(this)
      });
    }
    embed(event) {
      if (this.currentEmbed == null) {
        return;
      }
      let attachment = new import_trix2.default.Attachment(this.currentEmbed);
      this.editor.insertAttachment(attachment);
      this.element.focus();
    }
    showEmbed(embed) {
      this.currentEmbed = embed;
      this.embedContainerElement.style.display = "block";
    }
    reset() {
      this.embedContainerElement.style.display = "none";
      this.currentEmbed = null;
    }
  };
  var InlineCode = class {
    constructor(element) {
      this.element = element;
      this.editor = element.editor;
      this.toolbar = element.toolbarElement;
      this.installEventHandlers();
    }
    installEventHandlers() {
      const blockCodeButton = this.toolbar.querySelector("[data-trix-attribute=code]");
      const inlineCodeButton = blockCodeButton.cloneNode(true);
      inlineCodeButton.hidden = true;
      inlineCodeButton.dataset.trixAttribute = "inlineCode";
      blockCodeButton.insertAdjacentElement("afterend", inlineCodeButton);
      this.element.addEventListener("trix-selection-change", (_2) => {
        const type = this.getCodeFormattingType();
        blockCodeButton.hidden = type == "inline";
        inlineCodeButton.hidden = type == "block";
      });
    }
    getCodeFormattingType() {
      if (this.editor.attributeIsActive("code"))
        return "block";
      if (this.editor.attributeIsActive("inlineCode"))
        return "inline";
      const range = this.editor.getSelectedRange();
      if (range[0] == range[1])
        return "block";
      const text = this.editor.getSelectedDocument().toString().trim();
      return /\n/.test(text) ? "block" : "inline";
    }
  };
  document.addEventListener("trix-initialize", function(event) {
    new EmbedController(event.target);
    new InlineCode(event.target);
  });

  // rails:/Users/fuchsfelipel/code/parkar-rails/app/javascript/src/**/*
  var module1 = __toESM(require_confirm());
  var module2 = __toESM(require_direct_uploads());
  var module3 = __toESM(require_lazysrc());

  // ../../node_modules/js-cookie/dist/js.cookie.mjs
  function assign(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key in source) {
        target[key] = source[key];
      }
    }
    return target;
  }
  var defaultConverter = {
    read: function(value) {
      if (value[0] === '"') {
        value = value.slice(1, -1);
      }
      return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
    },
    write: function(value) {
      return encodeURIComponent(value).replace(
        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
        decodeURIComponent
      );
    }
  };
  function init(converter, defaultAttributes) {
    function set(key, value, attributes) {
      if (typeof document === "undefined") {
        return;
      }
      attributes = assign({}, defaultAttributes, attributes);
      if (typeof attributes.expires === "number") {
        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
      }
      if (attributes.expires) {
        attributes.expires = attributes.expires.toUTCString();
      }
      key = encodeURIComponent(key).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
      var stringifiedAttributes = "";
      for (var attributeName in attributes) {
        if (!attributes[attributeName]) {
          continue;
        }
        stringifiedAttributes += "; " + attributeName;
        if (attributes[attributeName] === true) {
          continue;
        }
        stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
      }
      return document.cookie = key + "=" + converter.write(value, key) + stringifiedAttributes;
    }
    function get2(key) {
      if (typeof document === "undefined" || arguments.length && !key) {
        return;
      }
      var cookies = document.cookie ? document.cookie.split("; ") : [];
      var jar = {};
      for (var i6 = 0; i6 < cookies.length; i6++) {
        var parts = cookies[i6].split("=");
        var value = parts.slice(1).join("=");
        try {
          var foundKey = decodeURIComponent(parts[0]);
          jar[foundKey] = converter.read(value, foundKey);
          if (key === foundKey) {
            break;
          }
        } catch (e12) {
        }
      }
      return key ? jar[key] : jar;
    }
    return Object.create(
      {
        set,
        get: get2,
        remove: function(key, attributes) {
          set(
            key,
            "",
            assign({}, attributes, {
              expires: -1
            })
          );
        },
        withAttributes: function(attributes) {
          return init(this.converter, assign({}, this.attributes, attributes));
        },
        withConverter: function(converter2) {
          return init(assign({}, this.converter, converter2), this.attributes);
        }
      },
      {
        attributes: { value: Object.freeze(defaultAttributes) },
        converter: { value: Object.freeze(converter) }
      }
    );
  }
  var api = init(defaultConverter, { path: "/" });
  var js_cookie_default = api;

  // src/timezone.js
  var import_jstz = __toESM(require_jstz2());
  function findTimeZone() {
    const oldIntl = window.Intl;
    try {
      window.Intl = void 0;
      const tz = import_jstz.default.determine().name();
      window.Intl = oldIntl;
      return tz;
    } catch (e12) {
      return import_jstz.default.determine().name();
    }
  }
  document.addEventListener("turbo:load", () => {
    js_cookie_default.set("browser_time_zone", findTimeZone(), { expires: 365, path: "/", secure: true, sameSite: "strict" });
  });

  // src/turbo_native/bridge.js
  var Bridge = class {
    static toggleNavBar() {
      const event = new CustomEvent("toggle-nav-bar");
      window.dispatchEvent(event);
    }
    static setNotificationCount(icon, tab = icon) {
      this.postMessage("showNotificationBadge", { icon, tab });
    }
    static postMessage(name, data = {}) {
      window.webkit?.messageHandlers?.nativeApp?.postMessage({ name, ...data });
      window.nativeApp?.postMessage(JSON.stringify({ name, ...data }));
    }
  };
  window.TurboNativeBridge = Bridge;

  // application.js
  window.Rails = import_ujs.default;
  window.Turbo = turbo_es2017_esm_exports;
  require_activestorage().start();
  require_local_time().start();
  import_ujs.default.start();
})();
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
/*! js-cookie v3.0.1 | MIT */
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-LIcense-Identifier: Apache-2.0
 */
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * This script gives you the zone info key representing your device's time zone setting.
 *
 * @name jsTimezoneDetect
 * @version 1.0.6
 * @author Jon Nylander
 * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt
 *
 * For usage and examples, visit:
 * http://pellepim.bitbucket.org/jstz/
 *
 * Copyright (c) Jon Nylander
 */
//# sourceMappingURL=/assets/application.js-b76731f1790f8027a93e82bad786b24cd54d1d1e52bf95a46d1067bb2a471f3d.map
//!
;
